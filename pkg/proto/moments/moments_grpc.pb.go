// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: moments/moments.proto

package moments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MomentsClient is the client API for Moments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MomentsClient interface {
	CreateMoment(ctx context.Context, in *Moment, opts ...grpc.CallOption) (*CreateMomentResponse, error)
	CreateMomentLike(ctx context.Context, in *MomentLike, opts ...grpc.CallOption) (*CommonResp, error)
	CancelMomentLike(ctx context.Context, in *MomentCancelLike, opts ...grpc.CallOption) (*CommonResp, error)
	CreateMomentComment(ctx context.Context, in *MomentComment, opts ...grpc.CallOption) (*MomentCommentResponse, error)
	CreateReplyOfMomentComment(ctx context.Context, in *ReplyOfMomentComment, opts ...grpc.CallOption) (*MomentCommentResponse, error)
	GetListHomeTimeLineOfMoments(ctx context.Context, in *ListHomeTimeLineOfMomentsReq, opts ...grpc.CallOption) (*ListHomeTimeLineOfMoments, error)
	GetMomentDetailsByID(ctx context.Context, in *GetMomentDetailsByIDRequest, opts ...grpc.CallOption) (*GetMomentDetailsByIDResponse, error)
	GetMomentCommentsByID(ctx context.Context, in *GetMomentCommentsByIDRequest, opts ...grpc.CallOption) (*GetMomentCommentsByIDResponse, error)
	RepostAMoment(ctx context.Context, in *RepostAMomentRequest, opts ...grpc.CallOption) (*CreateMomentResponse, error)
	GetAnyUserMomentsByID(ctx context.Context, in *GetAnyUserMomentsByIDRequest, opts ...grpc.CallOption) (*GetAnyUserMomentsByIDResp, error)
	GetUserMomentCount(ctx context.Context, in *GetUserMomentCountRequest, opts ...grpc.CallOption) (*GetUserMomentCountResp, error)
	DeleteMoment(ctx context.Context, in *DeleteMomentRequest, opts ...grpc.CallOption) (*CommonResp, error)
	GetMoments(ctx context.Context, in *GetMomentsReq, opts ...grpc.CallOption) (*GetMomentsResp, error)
	DeleteMoments(ctx context.Context, in *DeleteMomentsReq, opts ...grpc.CallOption) (*DeleteMomentsResp, error)
	AlterMoment(ctx context.Context, in *AlterMomentReq, opts ...grpc.CallOption) (*AlterMomentResp, error)
	ChangeMomentStatus(ctx context.Context, in *ChangeMomentStatusReq, opts ...grpc.CallOption) (*ChangeMomentStatusResp, error)
	ModifyVisibility(ctx context.Context, in *ModifyVisibilityReq, opts ...grpc.CallOption) (*ModifyVisibilityResp, error)
	GetMomentDetails(ctx context.Context, in *GetMomentDetailsReq, opts ...grpc.CallOption) (*GetMomentDetailsResp, error)
	CtlMomentComment(ctx context.Context, in *CtlMomentCommentReq, opts ...grpc.CallOption) (*CtlMomentCommentResp, error)
	GetComments(ctx context.Context, in *GetCommentsReq, opts ...grpc.CallOption) (*GetCommentsResp, error)
	RemoveComments(ctx context.Context, in *RemoveCommentsReq, opts ...grpc.CallOption) (*RemoveCommentsResp, error)
	AlterComment(ctx context.Context, in *AlterCommentReq, opts ...grpc.CallOption) (*AlterCommentResp, error)
	SwitchCommentHideState(ctx context.Context, in *SwitchCommentHideStateReq, opts ...grpc.CallOption) (*SwitchCommentHideStateResp, error)
	GetLikes(ctx context.Context, in *GetLikesReq, opts ...grpc.CallOption) (*GetLikesResp, error)
	RemoveLikes(ctx context.Context, in *RemoveLikesReq, opts ...grpc.CallOption) (*RemoveLikesResp, error)
	SwitchLikeHideState(ctx context.Context, in *SwitchLikeHideStateReq, opts ...grpc.CallOption) (*SwitchLikeHideStateResp, error)
	DeleteMomentComment(ctx context.Context, in *DeleteMomentCommentRequest, opts ...grpc.CallOption) (*CommonResp, error)
	GlobalSearchInMoments(ctx context.Context, in *GlobalSearchInMomentsRequest, opts ...grpc.CallOption) (*ListHomeTimeLineOfMoments, error)
	GetMomentAnyUserMediaByID(ctx context.Context, in *GetMomentAnyUserMediaByIDRequest, opts ...grpc.CallOption) (*GetMomentAnyUserMediaByIDResp, error)
}

type momentsClient struct {
	cc grpc.ClientConnInterface
}

func NewMomentsClient(cc grpc.ClientConnInterface) MomentsClient {
	return &momentsClient{cc}
}

func (c *momentsClient) CreateMoment(ctx context.Context, in *Moment, opts ...grpc.CallOption) (*CreateMomentResponse, error) {
	out := new(CreateMomentResponse)
	err := c.cc.Invoke(ctx, "/moments.moments/CreateMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) CreateMomentLike(ctx context.Context, in *MomentLike, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/moments.moments/CreateMomentLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) CancelMomentLike(ctx context.Context, in *MomentCancelLike, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/moments.moments/CancelMomentLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) CreateMomentComment(ctx context.Context, in *MomentComment, opts ...grpc.CallOption) (*MomentCommentResponse, error) {
	out := new(MomentCommentResponse)
	err := c.cc.Invoke(ctx, "/moments.moments/CreateMomentComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) CreateReplyOfMomentComment(ctx context.Context, in *ReplyOfMomentComment, opts ...grpc.CallOption) (*MomentCommentResponse, error) {
	out := new(MomentCommentResponse)
	err := c.cc.Invoke(ctx, "/moments.moments/CreateReplyOfMomentComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) GetListHomeTimeLineOfMoments(ctx context.Context, in *ListHomeTimeLineOfMomentsReq, opts ...grpc.CallOption) (*ListHomeTimeLineOfMoments, error) {
	out := new(ListHomeTimeLineOfMoments)
	err := c.cc.Invoke(ctx, "/moments.moments/GetListHomeTimeLineOfMoments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) GetMomentDetailsByID(ctx context.Context, in *GetMomentDetailsByIDRequest, opts ...grpc.CallOption) (*GetMomentDetailsByIDResponse, error) {
	out := new(GetMomentDetailsByIDResponse)
	err := c.cc.Invoke(ctx, "/moments.moments/GetMomentDetailsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) GetMomentCommentsByID(ctx context.Context, in *GetMomentCommentsByIDRequest, opts ...grpc.CallOption) (*GetMomentCommentsByIDResponse, error) {
	out := new(GetMomentCommentsByIDResponse)
	err := c.cc.Invoke(ctx, "/moments.moments/GetMomentCommentsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) RepostAMoment(ctx context.Context, in *RepostAMomentRequest, opts ...grpc.CallOption) (*CreateMomentResponse, error) {
	out := new(CreateMomentResponse)
	err := c.cc.Invoke(ctx, "/moments.moments/RepostAMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) GetAnyUserMomentsByID(ctx context.Context, in *GetAnyUserMomentsByIDRequest, opts ...grpc.CallOption) (*GetAnyUserMomentsByIDResp, error) {
	out := new(GetAnyUserMomentsByIDResp)
	err := c.cc.Invoke(ctx, "/moments.moments/GetAnyUserMomentsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) GetUserMomentCount(ctx context.Context, in *GetUserMomentCountRequest, opts ...grpc.CallOption) (*GetUserMomentCountResp, error) {
	out := new(GetUserMomentCountResp)
	err := c.cc.Invoke(ctx, "/moments.moments/GetUserMomentCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) DeleteMoment(ctx context.Context, in *DeleteMomentRequest, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/moments.moments/DeleteMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) GetMoments(ctx context.Context, in *GetMomentsReq, opts ...grpc.CallOption) (*GetMomentsResp, error) {
	out := new(GetMomentsResp)
	err := c.cc.Invoke(ctx, "/moments.moments/GetMoments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) DeleteMoments(ctx context.Context, in *DeleteMomentsReq, opts ...grpc.CallOption) (*DeleteMomentsResp, error) {
	out := new(DeleteMomentsResp)
	err := c.cc.Invoke(ctx, "/moments.moments/DeleteMoments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) AlterMoment(ctx context.Context, in *AlterMomentReq, opts ...grpc.CallOption) (*AlterMomentResp, error) {
	out := new(AlterMomentResp)
	err := c.cc.Invoke(ctx, "/moments.moments/AlterMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) ChangeMomentStatus(ctx context.Context, in *ChangeMomentStatusReq, opts ...grpc.CallOption) (*ChangeMomentStatusResp, error) {
	out := new(ChangeMomentStatusResp)
	err := c.cc.Invoke(ctx, "/moments.moments/ChangeMomentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) ModifyVisibility(ctx context.Context, in *ModifyVisibilityReq, opts ...grpc.CallOption) (*ModifyVisibilityResp, error) {
	out := new(ModifyVisibilityResp)
	err := c.cc.Invoke(ctx, "/moments.moments/ModifyVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) GetMomentDetails(ctx context.Context, in *GetMomentDetailsReq, opts ...grpc.CallOption) (*GetMomentDetailsResp, error) {
	out := new(GetMomentDetailsResp)
	err := c.cc.Invoke(ctx, "/moments.moments/GetMomentDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) CtlMomentComment(ctx context.Context, in *CtlMomentCommentReq, opts ...grpc.CallOption) (*CtlMomentCommentResp, error) {
	out := new(CtlMomentCommentResp)
	err := c.cc.Invoke(ctx, "/moments.moments/CtlMomentComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) GetComments(ctx context.Context, in *GetCommentsReq, opts ...grpc.CallOption) (*GetCommentsResp, error) {
	out := new(GetCommentsResp)
	err := c.cc.Invoke(ctx, "/moments.moments/GetComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) RemoveComments(ctx context.Context, in *RemoveCommentsReq, opts ...grpc.CallOption) (*RemoveCommentsResp, error) {
	out := new(RemoveCommentsResp)
	err := c.cc.Invoke(ctx, "/moments.moments/RemoveComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) AlterComment(ctx context.Context, in *AlterCommentReq, opts ...grpc.CallOption) (*AlterCommentResp, error) {
	out := new(AlterCommentResp)
	err := c.cc.Invoke(ctx, "/moments.moments/AlterComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) SwitchCommentHideState(ctx context.Context, in *SwitchCommentHideStateReq, opts ...grpc.CallOption) (*SwitchCommentHideStateResp, error) {
	out := new(SwitchCommentHideStateResp)
	err := c.cc.Invoke(ctx, "/moments.moments/SwitchCommentHideState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) GetLikes(ctx context.Context, in *GetLikesReq, opts ...grpc.CallOption) (*GetLikesResp, error) {
	out := new(GetLikesResp)
	err := c.cc.Invoke(ctx, "/moments.moments/GetLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) RemoveLikes(ctx context.Context, in *RemoveLikesReq, opts ...grpc.CallOption) (*RemoveLikesResp, error) {
	out := new(RemoveLikesResp)
	err := c.cc.Invoke(ctx, "/moments.moments/RemoveLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) SwitchLikeHideState(ctx context.Context, in *SwitchLikeHideStateReq, opts ...grpc.CallOption) (*SwitchLikeHideStateResp, error) {
	out := new(SwitchLikeHideStateResp)
	err := c.cc.Invoke(ctx, "/moments.moments/SwitchLikeHideState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) DeleteMomentComment(ctx context.Context, in *DeleteMomentCommentRequest, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/moments.moments/DeleteMomentComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) GlobalSearchInMoments(ctx context.Context, in *GlobalSearchInMomentsRequest, opts ...grpc.CallOption) (*ListHomeTimeLineOfMoments, error) {
	out := new(ListHomeTimeLineOfMoments)
	err := c.cc.Invoke(ctx, "/moments.moments/GlobalSearchInMoments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentsClient) GetMomentAnyUserMediaByID(ctx context.Context, in *GetMomentAnyUserMediaByIDRequest, opts ...grpc.CallOption) (*GetMomentAnyUserMediaByIDResp, error) {
	out := new(GetMomentAnyUserMediaByIDResp)
	err := c.cc.Invoke(ctx, "/moments.moments/GetMomentAnyUserMediaByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MomentsServer is the server API for Moments service.
// All implementations should embed UnimplementedMomentsServer
// for forward compatibility
type MomentsServer interface {
	CreateMoment(context.Context, *Moment) (*CreateMomentResponse, error)
	CreateMomentLike(context.Context, *MomentLike) (*CommonResp, error)
	CancelMomentLike(context.Context, *MomentCancelLike) (*CommonResp, error)
	CreateMomentComment(context.Context, *MomentComment) (*MomentCommentResponse, error)
	CreateReplyOfMomentComment(context.Context, *ReplyOfMomentComment) (*MomentCommentResponse, error)
	GetListHomeTimeLineOfMoments(context.Context, *ListHomeTimeLineOfMomentsReq) (*ListHomeTimeLineOfMoments, error)
	GetMomentDetailsByID(context.Context, *GetMomentDetailsByIDRequest) (*GetMomentDetailsByIDResponse, error)
	GetMomentCommentsByID(context.Context, *GetMomentCommentsByIDRequest) (*GetMomentCommentsByIDResponse, error)
	RepostAMoment(context.Context, *RepostAMomentRequest) (*CreateMomentResponse, error)
	GetAnyUserMomentsByID(context.Context, *GetAnyUserMomentsByIDRequest) (*GetAnyUserMomentsByIDResp, error)
	GetUserMomentCount(context.Context, *GetUserMomentCountRequest) (*GetUserMomentCountResp, error)
	DeleteMoment(context.Context, *DeleteMomentRequest) (*CommonResp, error)
	GetMoments(context.Context, *GetMomentsReq) (*GetMomentsResp, error)
	DeleteMoments(context.Context, *DeleteMomentsReq) (*DeleteMomentsResp, error)
	AlterMoment(context.Context, *AlterMomentReq) (*AlterMomentResp, error)
	ChangeMomentStatus(context.Context, *ChangeMomentStatusReq) (*ChangeMomentStatusResp, error)
	ModifyVisibility(context.Context, *ModifyVisibilityReq) (*ModifyVisibilityResp, error)
	GetMomentDetails(context.Context, *GetMomentDetailsReq) (*GetMomentDetailsResp, error)
	CtlMomentComment(context.Context, *CtlMomentCommentReq) (*CtlMomentCommentResp, error)
	GetComments(context.Context, *GetCommentsReq) (*GetCommentsResp, error)
	RemoveComments(context.Context, *RemoveCommentsReq) (*RemoveCommentsResp, error)
	AlterComment(context.Context, *AlterCommentReq) (*AlterCommentResp, error)
	SwitchCommentHideState(context.Context, *SwitchCommentHideStateReq) (*SwitchCommentHideStateResp, error)
	GetLikes(context.Context, *GetLikesReq) (*GetLikesResp, error)
	RemoveLikes(context.Context, *RemoveLikesReq) (*RemoveLikesResp, error)
	SwitchLikeHideState(context.Context, *SwitchLikeHideStateReq) (*SwitchLikeHideStateResp, error)
	DeleteMomentComment(context.Context, *DeleteMomentCommentRequest) (*CommonResp, error)
	GlobalSearchInMoments(context.Context, *GlobalSearchInMomentsRequest) (*ListHomeTimeLineOfMoments, error)
	GetMomentAnyUserMediaByID(context.Context, *GetMomentAnyUserMediaByIDRequest) (*GetMomentAnyUserMediaByIDResp, error)
}

// UnimplementedMomentsServer should be embedded to have forward compatible implementations.
type UnimplementedMomentsServer struct {
}

func (UnimplementedMomentsServer) CreateMoment(context.Context, *Moment) (*CreateMomentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMoment not implemented")
}
func (UnimplementedMomentsServer) CreateMomentLike(context.Context, *MomentLike) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMomentLike not implemented")
}
func (UnimplementedMomentsServer) CancelMomentLike(context.Context, *MomentCancelLike) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMomentLike not implemented")
}
func (UnimplementedMomentsServer) CreateMomentComment(context.Context, *MomentComment) (*MomentCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMomentComment not implemented")
}
func (UnimplementedMomentsServer) CreateReplyOfMomentComment(context.Context, *ReplyOfMomentComment) (*MomentCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReplyOfMomentComment not implemented")
}
func (UnimplementedMomentsServer) GetListHomeTimeLineOfMoments(context.Context, *ListHomeTimeLineOfMomentsReq) (*ListHomeTimeLineOfMoments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListHomeTimeLineOfMoments not implemented")
}
func (UnimplementedMomentsServer) GetMomentDetailsByID(context.Context, *GetMomentDetailsByIDRequest) (*GetMomentDetailsByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMomentDetailsByID not implemented")
}
func (UnimplementedMomentsServer) GetMomentCommentsByID(context.Context, *GetMomentCommentsByIDRequest) (*GetMomentCommentsByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMomentCommentsByID not implemented")
}
func (UnimplementedMomentsServer) RepostAMoment(context.Context, *RepostAMomentRequest) (*CreateMomentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepostAMoment not implemented")
}
func (UnimplementedMomentsServer) GetAnyUserMomentsByID(context.Context, *GetAnyUserMomentsByIDRequest) (*GetAnyUserMomentsByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnyUserMomentsByID not implemented")
}
func (UnimplementedMomentsServer) GetUserMomentCount(context.Context, *GetUserMomentCountRequest) (*GetUserMomentCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMomentCount not implemented")
}
func (UnimplementedMomentsServer) DeleteMoment(context.Context, *DeleteMomentRequest) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMoment not implemented")
}
func (UnimplementedMomentsServer) GetMoments(context.Context, *GetMomentsReq) (*GetMomentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoments not implemented")
}
func (UnimplementedMomentsServer) DeleteMoments(context.Context, *DeleteMomentsReq) (*DeleteMomentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMoments not implemented")
}
func (UnimplementedMomentsServer) AlterMoment(context.Context, *AlterMomentReq) (*AlterMomentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterMoment not implemented")
}
func (UnimplementedMomentsServer) ChangeMomentStatus(context.Context, *ChangeMomentStatusReq) (*ChangeMomentStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMomentStatus not implemented")
}
func (UnimplementedMomentsServer) ModifyVisibility(context.Context, *ModifyVisibilityReq) (*ModifyVisibilityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyVisibility not implemented")
}
func (UnimplementedMomentsServer) GetMomentDetails(context.Context, *GetMomentDetailsReq) (*GetMomentDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMomentDetails not implemented")
}
func (UnimplementedMomentsServer) CtlMomentComment(context.Context, *CtlMomentCommentReq) (*CtlMomentCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CtlMomentComment not implemented")
}
func (UnimplementedMomentsServer) GetComments(context.Context, *GetCommentsReq) (*GetCommentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedMomentsServer) RemoveComments(context.Context, *RemoveCommentsReq) (*RemoveCommentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveComments not implemented")
}
func (UnimplementedMomentsServer) AlterComment(context.Context, *AlterCommentReq) (*AlterCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterComment not implemented")
}
func (UnimplementedMomentsServer) SwitchCommentHideState(context.Context, *SwitchCommentHideStateReq) (*SwitchCommentHideStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchCommentHideState not implemented")
}
func (UnimplementedMomentsServer) GetLikes(context.Context, *GetLikesReq) (*GetLikesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikes not implemented")
}
func (UnimplementedMomentsServer) RemoveLikes(context.Context, *RemoveLikesReq) (*RemoveLikesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLikes not implemented")
}
func (UnimplementedMomentsServer) SwitchLikeHideState(context.Context, *SwitchLikeHideStateReq) (*SwitchLikeHideStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchLikeHideState not implemented")
}
func (UnimplementedMomentsServer) DeleteMomentComment(context.Context, *DeleteMomentCommentRequest) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMomentComment not implemented")
}
func (UnimplementedMomentsServer) GlobalSearchInMoments(context.Context, *GlobalSearchInMomentsRequest) (*ListHomeTimeLineOfMoments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalSearchInMoments not implemented")
}
func (UnimplementedMomentsServer) GetMomentAnyUserMediaByID(context.Context, *GetMomentAnyUserMediaByIDRequest) (*GetMomentAnyUserMediaByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMomentAnyUserMediaByID not implemented")
}

// UnsafeMomentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MomentsServer will
// result in compilation errors.
type UnsafeMomentsServer interface {
	mustEmbedUnimplementedMomentsServer()
}

func RegisterMomentsServer(s grpc.ServiceRegistrar, srv MomentsServer) {
	s.RegisterService(&Moments_ServiceDesc, srv)
}

func _Moments_CreateMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Moment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).CreateMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/CreateMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).CreateMoment(ctx, req.(*Moment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_CreateMomentLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentLike)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).CreateMomentLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/CreateMomentLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).CreateMomentLike(ctx, req.(*MomentLike))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_CancelMomentLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentCancelLike)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).CancelMomentLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/CancelMomentLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).CancelMomentLike(ctx, req.(*MomentCancelLike))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_CreateMomentComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).CreateMomentComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/CreateMomentComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).CreateMomentComment(ctx, req.(*MomentComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_CreateReplyOfMomentComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyOfMomentComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).CreateReplyOfMomentComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/CreateReplyOfMomentComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).CreateReplyOfMomentComment(ctx, req.(*ReplyOfMomentComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_GetListHomeTimeLineOfMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomeTimeLineOfMomentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).GetListHomeTimeLineOfMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/GetListHomeTimeLineOfMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).GetListHomeTimeLineOfMoments(ctx, req.(*ListHomeTimeLineOfMomentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_GetMomentDetailsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMomentDetailsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).GetMomentDetailsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/GetMomentDetailsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).GetMomentDetailsByID(ctx, req.(*GetMomentDetailsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_GetMomentCommentsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMomentCommentsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).GetMomentCommentsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/GetMomentCommentsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).GetMomentCommentsByID(ctx, req.(*GetMomentCommentsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_RepostAMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepostAMomentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).RepostAMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/RepostAMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).RepostAMoment(ctx, req.(*RepostAMomentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_GetAnyUserMomentsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnyUserMomentsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).GetAnyUserMomentsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/GetAnyUserMomentsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).GetAnyUserMomentsByID(ctx, req.(*GetAnyUserMomentsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_GetUserMomentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMomentCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).GetUserMomentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/GetUserMomentCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).GetUserMomentCount(ctx, req.(*GetUserMomentCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_DeleteMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMomentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).DeleteMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/DeleteMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).DeleteMoment(ctx, req.(*DeleteMomentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_GetMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMomentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).GetMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/GetMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).GetMoments(ctx, req.(*GetMomentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_DeleteMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMomentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).DeleteMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/DeleteMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).DeleteMoments(ctx, req.(*DeleteMomentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_AlterMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).AlterMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/AlterMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).AlterMoment(ctx, req.(*AlterMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_ChangeMomentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMomentStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).ChangeMomentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/ChangeMomentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).ChangeMomentStatus(ctx, req.(*ChangeMomentStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_ModifyVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyVisibilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).ModifyVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/ModifyVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).ModifyVisibility(ctx, req.(*ModifyVisibilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_GetMomentDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMomentDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).GetMomentDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/GetMomentDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).GetMomentDetails(ctx, req.(*GetMomentDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_CtlMomentComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtlMomentCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).CtlMomentComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/CtlMomentComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).CtlMomentComment(ctx, req.(*CtlMomentCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/GetComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).GetComments(ctx, req.(*GetCommentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_RemoveComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCommentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).RemoveComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/RemoveComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).RemoveComments(ctx, req.(*RemoveCommentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_AlterComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).AlterComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/AlterComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).AlterComment(ctx, req.(*AlterCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_SwitchCommentHideState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchCommentHideStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).SwitchCommentHideState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/SwitchCommentHideState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).SwitchCommentHideState(ctx, req.(*SwitchCommentHideStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_GetLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).GetLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/GetLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).GetLikes(ctx, req.(*GetLikesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_RemoveLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).RemoveLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/RemoveLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).RemoveLikes(ctx, req.(*RemoveLikesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_SwitchLikeHideState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchLikeHideStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).SwitchLikeHideState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/SwitchLikeHideState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).SwitchLikeHideState(ctx, req.(*SwitchLikeHideStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_DeleteMomentComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMomentCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).DeleteMomentComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/DeleteMomentComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).DeleteMomentComment(ctx, req.(*DeleteMomentCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_GlobalSearchInMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalSearchInMomentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).GlobalSearchInMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/GlobalSearchInMoments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).GlobalSearchInMoments(ctx, req.(*GlobalSearchInMomentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moments_GetMomentAnyUserMediaByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMomentAnyUserMediaByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentsServer).GetMomentAnyUserMediaByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moments.moments/GetMomentAnyUserMediaByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentsServer).GetMomentAnyUserMediaByID(ctx, req.(*GetMomentAnyUserMediaByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Moments_ServiceDesc is the grpc.ServiceDesc for Moments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Moments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moments.moments",
	HandlerType: (*MomentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMoment",
			Handler:    _Moments_CreateMoment_Handler,
		},
		{
			MethodName: "CreateMomentLike",
			Handler:    _Moments_CreateMomentLike_Handler,
		},
		{
			MethodName: "CancelMomentLike",
			Handler:    _Moments_CancelMomentLike_Handler,
		},
		{
			MethodName: "CreateMomentComment",
			Handler:    _Moments_CreateMomentComment_Handler,
		},
		{
			MethodName: "CreateReplyOfMomentComment",
			Handler:    _Moments_CreateReplyOfMomentComment_Handler,
		},
		{
			MethodName: "GetListHomeTimeLineOfMoments",
			Handler:    _Moments_GetListHomeTimeLineOfMoments_Handler,
		},
		{
			MethodName: "GetMomentDetailsByID",
			Handler:    _Moments_GetMomentDetailsByID_Handler,
		},
		{
			MethodName: "GetMomentCommentsByID",
			Handler:    _Moments_GetMomentCommentsByID_Handler,
		},
		{
			MethodName: "RepostAMoment",
			Handler:    _Moments_RepostAMoment_Handler,
		},
		{
			MethodName: "GetAnyUserMomentsByID",
			Handler:    _Moments_GetAnyUserMomentsByID_Handler,
		},
		{
			MethodName: "GetUserMomentCount",
			Handler:    _Moments_GetUserMomentCount_Handler,
		},
		{
			MethodName: "DeleteMoment",
			Handler:    _Moments_DeleteMoment_Handler,
		},
		{
			MethodName: "GetMoments",
			Handler:    _Moments_GetMoments_Handler,
		},
		{
			MethodName: "DeleteMoments",
			Handler:    _Moments_DeleteMoments_Handler,
		},
		{
			MethodName: "AlterMoment",
			Handler:    _Moments_AlterMoment_Handler,
		},
		{
			MethodName: "ChangeMomentStatus",
			Handler:    _Moments_ChangeMomentStatus_Handler,
		},
		{
			MethodName: "ModifyVisibility",
			Handler:    _Moments_ModifyVisibility_Handler,
		},
		{
			MethodName: "GetMomentDetails",
			Handler:    _Moments_GetMomentDetails_Handler,
		},
		{
			MethodName: "CtlMomentComment",
			Handler:    _Moments_CtlMomentComment_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _Moments_GetComments_Handler,
		},
		{
			MethodName: "RemoveComments",
			Handler:    _Moments_RemoveComments_Handler,
		},
		{
			MethodName: "AlterComment",
			Handler:    _Moments_AlterComment_Handler,
		},
		{
			MethodName: "SwitchCommentHideState",
			Handler:    _Moments_SwitchCommentHideState_Handler,
		},
		{
			MethodName: "GetLikes",
			Handler:    _Moments_GetLikes_Handler,
		},
		{
			MethodName: "RemoveLikes",
			Handler:    _Moments_RemoveLikes_Handler,
		},
		{
			MethodName: "SwitchLikeHideState",
			Handler:    _Moments_SwitchLikeHideState_Handler,
		},
		{
			MethodName: "DeleteMomentComment",
			Handler:    _Moments_DeleteMomentComment_Handler,
		},
		{
			MethodName: "GlobalSearchInMoments",
			Handler:    _Moments_GlobalSearchInMoments_Handler,
		},
		{
			MethodName: "GetMomentAnyUserMediaByID",
			Handler:    _Moments_GetMomentAnyUserMediaByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moments/moments.proto",
}
