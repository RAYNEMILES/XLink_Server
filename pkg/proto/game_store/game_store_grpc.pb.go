// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: game_store/game_store.proto

package game_store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameStoreClient is the client API for GameStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameStoreClient interface {
	// game list
	BannerGames(ctx context.Context, in *BannerGamesReq, opts ...grpc.CallOption) (*BannerGamesResp, error)
	TodayRecommendations(ctx context.Context, in *TodayRecommendationsReq, opts ...grpc.CallOption) (*TodayRecommendationsResp, error)
	PopularGames(ctx context.Context, in *PopularGamesReq, opts ...grpc.CallOption) (*PopularGamesResp, error)
	AllGames(ctx context.Context, in *AllGamesReq, opts ...grpc.CallOption) (*AllGamesResp, error)
	// search by name
	SearchName(ctx context.Context, in *SearchNameReq, opts ...grpc.CallOption) (*SearchNameResp, error)
	SearchGameListByName(ctx context.Context, in *SearchGameListByNameReq, opts ...grpc.CallOption) (*SearchGameListByNameResp, error)
	// categories
	GetCategories(ctx context.Context, in *GetCategoriesReq, opts ...grpc.CallOption) (*GetCategoriesResp, error)
	// favorite and history
	PlayGameRecord(ctx context.Context, in *PlayGameRecordReq, opts ...grpc.CallOption) (*PlayGameRecordResp, error)
	GetHistory(ctx context.Context, in *GetHistoryReq, opts ...grpc.CallOption) (*GetHistoryResp, error)
	GetFavorites(ctx context.Context, in *GetFavoritesReq, opts ...grpc.CallOption) (*GetFavoritesResp, error)
	RemoveGameFavorite(ctx context.Context, in *RemoveGameFavoriteReq, opts ...grpc.CallOption) (*RemoveGameFavoriteResp, error)
	AddGameFavorite(ctx context.Context, in *AddGameFavoriteReq, opts ...grpc.CallOption) (*AddGameFavoriteResp, error)
	GameDetails(ctx context.Context, in *GameDetailsReq, opts ...grpc.CallOption) (*GameDetailsResp, error)
	// background management
	GetGameList(ctx context.Context, in *GetGameListReq, opts ...grpc.CallOption) (*GetGameListResp, error)
	EditGame(ctx context.Context, in *EditGameReq, opts ...grpc.CallOption) (*EditGameResp, error)
	AddGame(ctx context.Context, in *AddGameReq, opts ...grpc.CallOption) (*AddGameResp, error)
	DeleteGames(ctx context.Context, in *DeleteGamesReq, opts ...grpc.CallOption) (*DeleteGamesResp, error)
	// category
	AddCategory(ctx context.Context, in *AddCategoryReq, opts ...grpc.CallOption) (*AddCategoryResp, error)
	GetCategory(ctx context.Context, in *GetCategoryReq, opts ...grpc.CallOption) (*GetCategoryResp, error)
	EditCategory(ctx context.Context, in *EditCategoryReq, opts ...grpc.CallOption) (*EditCategoryResp, error)
	SetCategoryStatus(ctx context.Context, in *SetCategoryStatusReq, opts ...grpc.CallOption) (*SetCategoryStatusResp, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*DeleteCategoryResp, error)
}

type gameStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewGameStoreClient(cc grpc.ClientConnInterface) GameStoreClient {
	return &gameStoreClient{cc}
}

func (c *gameStoreClient) BannerGames(ctx context.Context, in *BannerGamesReq, opts ...grpc.CallOption) (*BannerGamesResp, error) {
	out := new(BannerGamesResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/BannerGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) TodayRecommendations(ctx context.Context, in *TodayRecommendationsReq, opts ...grpc.CallOption) (*TodayRecommendationsResp, error) {
	out := new(TodayRecommendationsResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/TodayRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) PopularGames(ctx context.Context, in *PopularGamesReq, opts ...grpc.CallOption) (*PopularGamesResp, error) {
	out := new(PopularGamesResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/PopularGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) AllGames(ctx context.Context, in *AllGamesReq, opts ...grpc.CallOption) (*AllGamesResp, error) {
	out := new(AllGamesResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/AllGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) SearchName(ctx context.Context, in *SearchNameReq, opts ...grpc.CallOption) (*SearchNameResp, error) {
	out := new(SearchNameResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/SearchName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) SearchGameListByName(ctx context.Context, in *SearchGameListByNameReq, opts ...grpc.CallOption) (*SearchGameListByNameResp, error) {
	out := new(SearchGameListByNameResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/SearchGameListByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) GetCategories(ctx context.Context, in *GetCategoriesReq, opts ...grpc.CallOption) (*GetCategoriesResp, error) {
	out := new(GetCategoriesResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/GetCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) PlayGameRecord(ctx context.Context, in *PlayGameRecordReq, opts ...grpc.CallOption) (*PlayGameRecordResp, error) {
	out := new(PlayGameRecordResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/PlayGameRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) GetHistory(ctx context.Context, in *GetHistoryReq, opts ...grpc.CallOption) (*GetHistoryResp, error) {
	out := new(GetHistoryResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) GetFavorites(ctx context.Context, in *GetFavoritesReq, opts ...grpc.CallOption) (*GetFavoritesResp, error) {
	out := new(GetFavoritesResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/GetFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) RemoveGameFavorite(ctx context.Context, in *RemoveGameFavoriteReq, opts ...grpc.CallOption) (*RemoveGameFavoriteResp, error) {
	out := new(RemoveGameFavoriteResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/RemoveGameFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) AddGameFavorite(ctx context.Context, in *AddGameFavoriteReq, opts ...grpc.CallOption) (*AddGameFavoriteResp, error) {
	out := new(AddGameFavoriteResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/AddGameFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) GameDetails(ctx context.Context, in *GameDetailsReq, opts ...grpc.CallOption) (*GameDetailsResp, error) {
	out := new(GameDetailsResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/GameDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) GetGameList(ctx context.Context, in *GetGameListReq, opts ...grpc.CallOption) (*GetGameListResp, error) {
	out := new(GetGameListResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/GetGameList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) EditGame(ctx context.Context, in *EditGameReq, opts ...grpc.CallOption) (*EditGameResp, error) {
	out := new(EditGameResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/EditGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) AddGame(ctx context.Context, in *AddGameReq, opts ...grpc.CallOption) (*AddGameResp, error) {
	out := new(AddGameResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/AddGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) DeleteGames(ctx context.Context, in *DeleteGamesReq, opts ...grpc.CallOption) (*DeleteGamesResp, error) {
	out := new(DeleteGamesResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/DeleteGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) AddCategory(ctx context.Context, in *AddCategoryReq, opts ...grpc.CallOption) (*AddCategoryResp, error) {
	out := new(AddCategoryResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/AddCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) GetCategory(ctx context.Context, in *GetCategoryReq, opts ...grpc.CallOption) (*GetCategoryResp, error) {
	out := new(GetCategoryResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) EditCategory(ctx context.Context, in *EditCategoryReq, opts ...grpc.CallOption) (*EditCategoryResp, error) {
	out := new(EditCategoryResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/EditCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) SetCategoryStatus(ctx context.Context, in *SetCategoryStatusReq, opts ...grpc.CallOption) (*SetCategoryStatusResp, error) {
	out := new(SetCategoryStatusResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/SetCategoryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...grpc.CallOption) (*DeleteCategoryResp, error) {
	out := new(DeleteCategoryResp)
	err := c.cc.Invoke(ctx, "/game_store.GameStore/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameStoreServer is the server API for GameStore service.
// All implementations should embed UnimplementedGameStoreServer
// for forward compatibility
type GameStoreServer interface {
	// game list
	BannerGames(context.Context, *BannerGamesReq) (*BannerGamesResp, error)
	TodayRecommendations(context.Context, *TodayRecommendationsReq) (*TodayRecommendationsResp, error)
	PopularGames(context.Context, *PopularGamesReq) (*PopularGamesResp, error)
	AllGames(context.Context, *AllGamesReq) (*AllGamesResp, error)
	// search by name
	SearchName(context.Context, *SearchNameReq) (*SearchNameResp, error)
	SearchGameListByName(context.Context, *SearchGameListByNameReq) (*SearchGameListByNameResp, error)
	// categories
	GetCategories(context.Context, *GetCategoriesReq) (*GetCategoriesResp, error)
	// favorite and history
	PlayGameRecord(context.Context, *PlayGameRecordReq) (*PlayGameRecordResp, error)
	GetHistory(context.Context, *GetHistoryReq) (*GetHistoryResp, error)
	GetFavorites(context.Context, *GetFavoritesReq) (*GetFavoritesResp, error)
	RemoveGameFavorite(context.Context, *RemoveGameFavoriteReq) (*RemoveGameFavoriteResp, error)
	AddGameFavorite(context.Context, *AddGameFavoriteReq) (*AddGameFavoriteResp, error)
	GameDetails(context.Context, *GameDetailsReq) (*GameDetailsResp, error)
	// background management
	GetGameList(context.Context, *GetGameListReq) (*GetGameListResp, error)
	EditGame(context.Context, *EditGameReq) (*EditGameResp, error)
	AddGame(context.Context, *AddGameReq) (*AddGameResp, error)
	DeleteGames(context.Context, *DeleteGamesReq) (*DeleteGamesResp, error)
	// category
	AddCategory(context.Context, *AddCategoryReq) (*AddCategoryResp, error)
	GetCategory(context.Context, *GetCategoryReq) (*GetCategoryResp, error)
	EditCategory(context.Context, *EditCategoryReq) (*EditCategoryResp, error)
	SetCategoryStatus(context.Context, *SetCategoryStatusReq) (*SetCategoryStatusResp, error)
	DeleteCategory(context.Context, *DeleteCategoryReq) (*DeleteCategoryResp, error)
}

// UnimplementedGameStoreServer should be embedded to have forward compatible implementations.
type UnimplementedGameStoreServer struct {
}

func (UnimplementedGameStoreServer) BannerGames(context.Context, *BannerGamesReq) (*BannerGamesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BannerGames not implemented")
}
func (UnimplementedGameStoreServer) TodayRecommendations(context.Context, *TodayRecommendationsReq) (*TodayRecommendationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TodayRecommendations not implemented")
}
func (UnimplementedGameStoreServer) PopularGames(context.Context, *PopularGamesReq) (*PopularGamesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopularGames not implemented")
}
func (UnimplementedGameStoreServer) AllGames(context.Context, *AllGamesReq) (*AllGamesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllGames not implemented")
}
func (UnimplementedGameStoreServer) SearchName(context.Context, *SearchNameReq) (*SearchNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchName not implemented")
}
func (UnimplementedGameStoreServer) SearchGameListByName(context.Context, *SearchGameListByNameReq) (*SearchGameListByNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGameListByName not implemented")
}
func (UnimplementedGameStoreServer) GetCategories(context.Context, *GetCategoriesReq) (*GetCategoriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedGameStoreServer) PlayGameRecord(context.Context, *PlayGameRecordReq) (*PlayGameRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayGameRecord not implemented")
}
func (UnimplementedGameStoreServer) GetHistory(context.Context, *GetHistoryReq) (*GetHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedGameStoreServer) GetFavorites(context.Context, *GetFavoritesReq) (*GetFavoritesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavorites not implemented")
}
func (UnimplementedGameStoreServer) RemoveGameFavorite(context.Context, *RemoveGameFavoriteReq) (*RemoveGameFavoriteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGameFavorite not implemented")
}
func (UnimplementedGameStoreServer) AddGameFavorite(context.Context, *AddGameFavoriteReq) (*AddGameFavoriteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGameFavorite not implemented")
}
func (UnimplementedGameStoreServer) GameDetails(context.Context, *GameDetailsReq) (*GameDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameDetails not implemented")
}
func (UnimplementedGameStoreServer) GetGameList(context.Context, *GetGameListReq) (*GetGameListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameList not implemented")
}
func (UnimplementedGameStoreServer) EditGame(context.Context, *EditGameReq) (*EditGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditGame not implemented")
}
func (UnimplementedGameStoreServer) AddGame(context.Context, *AddGameReq) (*AddGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGame not implemented")
}
func (UnimplementedGameStoreServer) DeleteGames(context.Context, *DeleteGamesReq) (*DeleteGamesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGames not implemented")
}
func (UnimplementedGameStoreServer) AddCategory(context.Context, *AddCategoryReq) (*AddCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCategory not implemented")
}
func (UnimplementedGameStoreServer) GetCategory(context.Context, *GetCategoryReq) (*GetCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedGameStoreServer) EditCategory(context.Context, *EditCategoryReq) (*EditCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCategory not implemented")
}
func (UnimplementedGameStoreServer) SetCategoryStatus(context.Context, *SetCategoryStatusReq) (*SetCategoryStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCategoryStatus not implemented")
}
func (UnimplementedGameStoreServer) DeleteCategory(context.Context, *DeleteCategoryReq) (*DeleteCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}

// UnsafeGameStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameStoreServer will
// result in compilation errors.
type UnsafeGameStoreServer interface {
	mustEmbedUnimplementedGameStoreServer()
}

func RegisterGameStoreServer(s grpc.ServiceRegistrar, srv GameStoreServer) {
	s.RegisterService(&GameStore_ServiceDesc, srv)
}

func _GameStore_BannerGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerGamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).BannerGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/BannerGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).BannerGames(ctx, req.(*BannerGamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_TodayRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodayRecommendationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).TodayRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/TodayRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).TodayRecommendations(ctx, req.(*TodayRecommendationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_PopularGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopularGamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).PopularGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/PopularGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).PopularGames(ctx, req.(*PopularGamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_AllGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllGamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).AllGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/AllGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).AllGames(ctx, req.(*AllGamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_SearchName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).SearchName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/SearchName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).SearchName(ctx, req.(*SearchNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_SearchGameListByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGameListByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).SearchGameListByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/SearchGameListByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).SearchGameListByName(ctx, req.(*SearchGameListByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/GetCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).GetCategories(ctx, req.(*GetCategoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_PlayGameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayGameRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).PlayGameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/PlayGameRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).PlayGameRecord(ctx, req.(*PlayGameRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).GetHistory(ctx, req.(*GetHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_GetFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoritesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).GetFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/GetFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).GetFavorites(ctx, req.(*GetFavoritesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_RemoveGameFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGameFavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).RemoveGameFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/RemoveGameFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).RemoveGameFavorite(ctx, req.(*RemoveGameFavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_AddGameFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameFavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).AddGameFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/AddGameFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).AddGameFavorite(ctx, req.(*AddGameFavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_GameDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).GameDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/GameDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).GameDetails(ctx, req.(*GameDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_GetGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).GetGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/GetGameList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).GetGameList(ctx, req.(*GetGameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_EditGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).EditGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/EditGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).EditGame(ctx, req.(*EditGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_AddGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).AddGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/AddGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).AddGame(ctx, req.(*AddGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_DeleteGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).DeleteGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/DeleteGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).DeleteGames(ctx, req.(*DeleteGamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_AddCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).AddCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/AddCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).AddCategory(ctx, req.(*AddCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).GetCategory(ctx, req.(*GetCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_EditCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).EditCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/EditCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).EditCategory(ctx, req.(*EditCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_SetCategoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCategoryStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).SetCategoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/SetCategoryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).SetCategoryStatus(ctx, req.(*SetCategoryStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_store.GameStore/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).DeleteCategory(ctx, req.(*DeleteCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GameStore_ServiceDesc is the grpc.ServiceDesc for GameStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game_store.GameStore",
	HandlerType: (*GameStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BannerGames",
			Handler:    _GameStore_BannerGames_Handler,
		},
		{
			MethodName: "TodayRecommendations",
			Handler:    _GameStore_TodayRecommendations_Handler,
		},
		{
			MethodName: "PopularGames",
			Handler:    _GameStore_PopularGames_Handler,
		},
		{
			MethodName: "AllGames",
			Handler:    _GameStore_AllGames_Handler,
		},
		{
			MethodName: "SearchName",
			Handler:    _GameStore_SearchName_Handler,
		},
		{
			MethodName: "SearchGameListByName",
			Handler:    _GameStore_SearchGameListByName_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _GameStore_GetCategories_Handler,
		},
		{
			MethodName: "PlayGameRecord",
			Handler:    _GameStore_PlayGameRecord_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _GameStore_GetHistory_Handler,
		},
		{
			MethodName: "GetFavorites",
			Handler:    _GameStore_GetFavorites_Handler,
		},
		{
			MethodName: "RemoveGameFavorite",
			Handler:    _GameStore_RemoveGameFavorite_Handler,
		},
		{
			MethodName: "AddGameFavorite",
			Handler:    _GameStore_AddGameFavorite_Handler,
		},
		{
			MethodName: "GameDetails",
			Handler:    _GameStore_GameDetails_Handler,
		},
		{
			MethodName: "GetGameList",
			Handler:    _GameStore_GetGameList_Handler,
		},
		{
			MethodName: "EditGame",
			Handler:    _GameStore_EditGame_Handler,
		},
		{
			MethodName: "AddGame",
			Handler:    _GameStore_AddGame_Handler,
		},
		{
			MethodName: "DeleteGames",
			Handler:    _GameStore_DeleteGames_Handler,
		},
		{
			MethodName: "AddCategory",
			Handler:    _GameStore_AddCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _GameStore_GetCategory_Handler,
		},
		{
			MethodName: "EditCategory",
			Handler:    _GameStore_EditCategory_Handler,
		},
		{
			MethodName: "SetCategoryStatus",
			Handler:    _GameStore_SetCategoryStatus_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _GameStore_DeleteCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_store/game_store.proto",
}
