// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: auth/auth.proto

package pbAuth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error)
	UserToken(ctx context.Context, in *UserTokenReq, opts ...grpc.CallOption) (*UserTokenResp, error)
	ForceLogout(ctx context.Context, in *ForceLogoutReq, opts ...grpc.CallOption) (*ForceLogoutResp, error)
	UpdateUserIPandStatus(ctx context.Context, in *UpdateUserIPReq, opts ...grpc.CallOption) (*UpdateUserIPResp, error)
	GetUserIPandStatus(ctx context.Context, in *GetUserIPReq, opts ...grpc.CallOption) (*GetUserIPResp, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	// qr login
	GetDeviceLoginQrCode(ctx context.Context, in *GetDeviceLoginQrCodeRequest, opts ...grpc.CallOption) (*GetDeviceLoginQrCodeResponse, error)
	PushDeviceLoginQrCode(ctx context.Context, in *PushDeviceLoginQrCodeRequest, opts ...grpc.CallOption) (*PushDeviceLoginQrCodeResponse, error)
	ConfirmDeviceLoginQrCode(ctx context.Context, in *ConfirmDeviceLoginQrCodeRequest, opts ...grpc.CallOption) (*ConfirmDeviceLoginQrCodeResponse, error)
	CheckDeviceLoginQrCodeState(ctx context.Context, in *CheckDeviceLoginQrCodeStateRequest, opts ...grpc.CallOption) (*CheckDeviceLoginQrCodeStateResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error) {
	out := new(UserRegisterResp)
	err := c.cc.Invoke(ctx, "/pbAuth.Auth/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UserToken(ctx context.Context, in *UserTokenReq, opts ...grpc.CallOption) (*UserTokenResp, error) {
	out := new(UserTokenResp)
	err := c.cc.Invoke(ctx, "/pbAuth.Auth/UserToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ForceLogout(ctx context.Context, in *ForceLogoutReq, opts ...grpc.CallOption) (*ForceLogoutResp, error) {
	out := new(ForceLogoutResp)
	err := c.cc.Invoke(ctx, "/pbAuth.Auth/ForceLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateUserIPandStatus(ctx context.Context, in *UpdateUserIPReq, opts ...grpc.CallOption) (*UpdateUserIPResp, error) {
	out := new(UpdateUserIPResp)
	err := c.cc.Invoke(ctx, "/pbAuth.Auth/UpdateUserIPandStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserIPandStatus(ctx context.Context, in *GetUserIPReq, opts ...grpc.CallOption) (*GetUserIPResp, error) {
	out := new(GetUserIPResp)
	err := c.cc.Invoke(ctx, "/pbAuth.Auth/GetUserIPandStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, "/pbAuth.Auth/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetDeviceLoginQrCode(ctx context.Context, in *GetDeviceLoginQrCodeRequest, opts ...grpc.CallOption) (*GetDeviceLoginQrCodeResponse, error) {
	out := new(GetDeviceLoginQrCodeResponse)
	err := c.cc.Invoke(ctx, "/pbAuth.Auth/GetDeviceLoginQrCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) PushDeviceLoginQrCode(ctx context.Context, in *PushDeviceLoginQrCodeRequest, opts ...grpc.CallOption) (*PushDeviceLoginQrCodeResponse, error) {
	out := new(PushDeviceLoginQrCodeResponse)
	err := c.cc.Invoke(ctx, "/pbAuth.Auth/PushDeviceLoginQrCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ConfirmDeviceLoginQrCode(ctx context.Context, in *ConfirmDeviceLoginQrCodeRequest, opts ...grpc.CallOption) (*ConfirmDeviceLoginQrCodeResponse, error) {
	out := new(ConfirmDeviceLoginQrCodeResponse)
	err := c.cc.Invoke(ctx, "/pbAuth.Auth/ConfirmDeviceLoginQrCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CheckDeviceLoginQrCodeState(ctx context.Context, in *CheckDeviceLoginQrCodeStateRequest, opts ...grpc.CallOption) (*CheckDeviceLoginQrCodeStateResponse, error) {
	out := new(CheckDeviceLoginQrCodeStateResponse)
	err := c.cc.Invoke(ctx, "/pbAuth.Auth/CheckDeviceLoginQrCodeState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations should embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error)
	UserToken(context.Context, *UserTokenReq) (*UserTokenResp, error)
	ForceLogout(context.Context, *ForceLogoutReq) (*ForceLogoutResp, error)
	UpdateUserIPandStatus(context.Context, *UpdateUserIPReq) (*UpdateUserIPResp, error)
	GetUserIPandStatus(context.Context, *GetUserIPReq) (*GetUserIPResp, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	// qr login
	GetDeviceLoginQrCode(context.Context, *GetDeviceLoginQrCodeRequest) (*GetDeviceLoginQrCodeResponse, error)
	PushDeviceLoginQrCode(context.Context, *PushDeviceLoginQrCodeRequest) (*PushDeviceLoginQrCodeResponse, error)
	ConfirmDeviceLoginQrCode(context.Context, *ConfirmDeviceLoginQrCodeRequest) (*ConfirmDeviceLoginQrCodeResponse, error)
	CheckDeviceLoginQrCodeState(context.Context, *CheckDeviceLoginQrCodeStateRequest) (*CheckDeviceLoginQrCodeStateResponse, error)
}

// UnimplementedAuthServer should be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedAuthServer) UserToken(context.Context, *UserTokenReq) (*UserTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserToken not implemented")
}
func (UnimplementedAuthServer) ForceLogout(context.Context, *ForceLogoutReq) (*ForceLogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceLogout not implemented")
}
func (UnimplementedAuthServer) UpdateUserIPandStatus(context.Context, *UpdateUserIPReq) (*UpdateUserIPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserIPandStatus not implemented")
}
func (UnimplementedAuthServer) GetUserIPandStatus(context.Context, *GetUserIPReq) (*GetUserIPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIPandStatus not implemented")
}
func (UnimplementedAuthServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAuthServer) GetDeviceLoginQrCode(context.Context, *GetDeviceLoginQrCodeRequest) (*GetDeviceLoginQrCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceLoginQrCode not implemented")
}
func (UnimplementedAuthServer) PushDeviceLoginQrCode(context.Context, *PushDeviceLoginQrCodeRequest) (*PushDeviceLoginQrCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushDeviceLoginQrCode not implemented")
}
func (UnimplementedAuthServer) ConfirmDeviceLoginQrCode(context.Context, *ConfirmDeviceLoginQrCodeRequest) (*ConfirmDeviceLoginQrCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmDeviceLoginQrCode not implemented")
}
func (UnimplementedAuthServer) CheckDeviceLoginQrCodeState(context.Context, *CheckDeviceLoginQrCodeStateRequest) (*CheckDeviceLoginQrCodeStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDeviceLoginQrCodeState not implemented")
}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbAuth.Auth/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UserRegister(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbAuth.Auth/UserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UserToken(ctx, req.(*UserTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ForceLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceLogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ForceLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbAuth.Auth/ForceLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ForceLogout(ctx, req.(*ForceLogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateUserIPandStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateUserIPandStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbAuth.Auth/UpdateUserIPandStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateUserIPandStatus(ctx, req.(*UpdateUserIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserIPandStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserIPandStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbAuth.Auth/GetUserIPandStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserIPandStatus(ctx, req.(*GetUserIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbAuth.Auth/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetDeviceLoginQrCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceLoginQrCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetDeviceLoginQrCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbAuth.Auth/GetDeviceLoginQrCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetDeviceLoginQrCode(ctx, req.(*GetDeviceLoginQrCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_PushDeviceLoginQrCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushDeviceLoginQrCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).PushDeviceLoginQrCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbAuth.Auth/PushDeviceLoginQrCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).PushDeviceLoginQrCode(ctx, req.(*PushDeviceLoginQrCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ConfirmDeviceLoginQrCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmDeviceLoginQrCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ConfirmDeviceLoginQrCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbAuth.Auth/ConfirmDeviceLoginQrCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ConfirmDeviceLoginQrCode(ctx, req.(*ConfirmDeviceLoginQrCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CheckDeviceLoginQrCodeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDeviceLoginQrCodeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CheckDeviceLoginQrCodeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbAuth.Auth/CheckDeviceLoginQrCodeState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CheckDeviceLoginQrCodeState(ctx, req.(*CheckDeviceLoginQrCodeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbAuth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRegister",
			Handler:    _Auth_UserRegister_Handler,
		},
		{
			MethodName: "UserToken",
			Handler:    _Auth_UserToken_Handler,
		},
		{
			MethodName: "ForceLogout",
			Handler:    _Auth_ForceLogout_Handler,
		},
		{
			MethodName: "UpdateUserIPandStatus",
			Handler:    _Auth_UpdateUserIPandStatus_Handler,
		},
		{
			MethodName: "GetUserIPandStatus",
			Handler:    _Auth_GetUserIPandStatus_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Auth_ChangePassword_Handler,
		},
		{
			MethodName: "GetDeviceLoginQrCode",
			Handler:    _Auth_GetDeviceLoginQrCode_Handler,
		},
		{
			MethodName: "PushDeviceLoginQrCode",
			Handler:    _Auth_PushDeviceLoginQrCode_Handler,
		},
		{
			MethodName: "ConfirmDeviceLoginQrCode",
			Handler:    _Auth_ConfirmDeviceLoginQrCode_Handler,
		},
		{
			MethodName: "CheckDeviceLoginQrCodeState",
			Handler:    _Auth_CheckDeviceLoginQrCodeState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}
