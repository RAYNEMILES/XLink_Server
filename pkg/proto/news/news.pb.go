// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.5
// source: news/news.proto

package news

import (
	admin_cms "Open_IM/pkg/proto/admin_cms"
	sdk_ws "Open_IM/pkg/proto/sdk_ws"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
}

func (x *CommonResponse) Reset() {
	*x = CommonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResponse) ProtoMessage() {}

func (x *CommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResponse.ProtoReflect.Descriptor instead.
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{0}
}

func (x *CommonResponse) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *CommonResponse) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type Official struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserID          string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Type            int32  `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	IdType          int32  `protobuf:"varint,4,opt,name=IdType,proto3" json:"IdType,omitempty"`
	IdName          string `protobuf:"bytes,5,opt,name=IdName,proto3" json:"IdName,omitempty"`
	IdNumber        string `protobuf:"bytes,6,opt,name=IdNumber,proto3" json:"IdNumber,omitempty"`
	FaceURL         string `protobuf:"bytes,7,opt,name=FaceURL,proto3" json:"FaceURL,omitempty"`
	Nickname        string `protobuf:"bytes,8,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Bio             string `protobuf:"bytes,9,opt,name=Bio,proto3" json:"Bio,omitempty"`
	CountryCode     string `protobuf:"bytes,10,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	ProcessStatus   int32  `protobuf:"varint,11,opt,name=ProcessStatus,proto3" json:"ProcessStatus,omitempty"`
	ProcessBy       string `protobuf:"bytes,12,opt,name=ProcessBy,proto3" json:"ProcessBy,omitempty"`
	ProcessFeedback string `protobuf:"bytes,13,opt,name=ProcessFeedback,proto3" json:"ProcessFeedback,omitempty"`
	CreateTime      int32  `protobuf:"varint,14,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	ProcessTime     int32  `protobuf:"varint,15,opt,name=ProcessTime,proto3" json:"ProcessTime,omitempty"`
	InitialNickname string `protobuf:"bytes,16,opt,name=InitialNickname,proto3" json:"InitialNickname,omitempty"`
	IsSystem        int32  `protobuf:"varint,17,opt,name=IsSystem,proto3" json:"IsSystem,omitempty"`
}

func (x *Official) Reset() {
	*x = Official{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Official) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Official) ProtoMessage() {}

func (x *Official) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Official.ProtoReflect.Descriptor instead.
func (*Official) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{1}
}

func (x *Official) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Official) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Official) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Official) GetIdType() int32 {
	if x != nil {
		return x.IdType
	}
	return 0
}

func (x *Official) GetIdName() string {
	if x != nil {
		return x.IdName
	}
	return ""
}

func (x *Official) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *Official) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *Official) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Official) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *Official) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Official) GetProcessStatus() int32 {
	if x != nil {
		return x.ProcessStatus
	}
	return 0
}

func (x *Official) GetProcessBy() string {
	if x != nil {
		return x.ProcessBy
	}
	return ""
}

func (x *Official) GetProcessFeedback() string {
	if x != nil {
		return x.ProcessFeedback
	}
	return ""
}

func (x *Official) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Official) GetProcessTime() int32 {
	if x != nil {
		return x.ProcessTime
	}
	return 0
}

func (x *Official) GetInitialNickname() string {
	if x != nil {
		return x.InitialNickname
	}
	return ""
}

func (x *Official) GetIsSystem() int32 {
	if x != nil {
		return x.IsSystem
	}
	return 0
}

type OfficialAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Official  *Official                 `protobuf:"bytes,1,opt,name=official,proto3" json:"official,omitempty"`
	Interests []*admin_cms.InterestResp `protobuf:"bytes,2,rep,name=Interests,proto3" json:"Interests,omitempty"`
}

func (x *OfficialAccountResponse) Reset() {
	*x = OfficialAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialAccountResponse) ProtoMessage() {}

func (x *OfficialAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialAccountResponse.ProtoReflect.Descriptor instead.
func (*OfficialAccountResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{2}
}

func (x *OfficialAccountResponse) GetOfficial() *Official {
	if x != nil {
		return x.Official
	}
	return nil
}

func (x *OfficialAccountResponse) GetInterests() []*admin_cms.InterestResp {
	if x != nil {
		return x.Interests
	}
	return nil
}

type RegisterOfficialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string  `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	UserID      string  `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	UserGender  int32   `protobuf:"varint,3,opt,name=userGender,proto3" json:"userGender,omitempty"`
	Type        int32   `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	IdType      int32   `protobuf:"varint,5,opt,name=idType,proto3" json:"idType,omitempty"`
	IdName      string  `protobuf:"bytes,6,opt,name=idName,proto3" json:"idName,omitempty"`
	IdNumber    string  `protobuf:"bytes,7,opt,name=idNumber,proto3" json:"idNumber,omitempty"`
	FaceURL     string  `protobuf:"bytes,8,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	Nickname    string  `protobuf:"bytes,9,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Bio         string  `protobuf:"bytes,10,opt,name=bio,proto3" json:"bio,omitempty"`
	CountryCode string  `protobuf:"bytes,11,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	Interests   []int64 `protobuf:"varint,12,rep,packed,name=interests,proto3" json:"interests,omitempty"`
}

func (x *RegisterOfficialRequest) Reset() {
	*x = RegisterOfficialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterOfficialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterOfficialRequest) ProtoMessage() {}

func (x *RegisterOfficialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterOfficialRequest.ProtoReflect.Descriptor instead.
func (*RegisterOfficialRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterOfficialRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *RegisterOfficialRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RegisterOfficialRequest) GetUserGender() int32 {
	if x != nil {
		return x.UserGender
	}
	return 0
}

func (x *RegisterOfficialRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RegisterOfficialRequest) GetIdType() int32 {
	if x != nil {
		return x.IdType
	}
	return 0
}

func (x *RegisterOfficialRequest) GetIdName() string {
	if x != nil {
		return x.IdName
	}
	return ""
}

func (x *RegisterOfficialRequest) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *RegisterOfficialRequest) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *RegisterOfficialRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RegisterOfficialRequest) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *RegisterOfficialRequest) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *RegisterOfficialRequest) GetInterests() []int64 {
	if x != nil {
		return x.Interests
	}
	return nil
}

type GetSelfOfficialInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetSelfOfficialInfoRequest) Reset() {
	*x = GetSelfOfficialInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSelfOfficialInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfOfficialInfoRequest) ProtoMessage() {}

func (x *GetSelfOfficialInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfOfficialInfoRequest.ProtoReflect.Descriptor instead.
func (*GetSelfOfficialInfoRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{4}
}

func (x *GetSelfOfficialInfoRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetSelfOfficialInfoRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SelfUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	OfficialID int64  `protobuf:"varint,2,opt,name=officialID,proto3" json:"officialID,omitempty"`
	Nickname   string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FaceURL    string `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
}

func (x *SelfUserInfo) Reset() {
	*x = SelfUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfUserInfo) ProtoMessage() {}

func (x *SelfUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfUserInfo.ProtoReflect.Descriptor instead.
func (*SelfUserInfo) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{5}
}

func (x *SelfUserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SelfUserInfo) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *SelfUserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SelfUserInfo) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

type SelfOfficialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname            string  `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	NicknameUpdateTime  int64   `protobuf:"varint,2,opt,name=nicknameUpdateTime,proto3" json:"nicknameUpdateTime,omitempty"`
	NicknameUpdateCount int32   `protobuf:"varint,3,opt,name=nicknameUpdateCount,proto3" json:"nicknameUpdateCount,omitempty"`
	Bio                 string  `protobuf:"bytes,4,opt,name=bio,proto3" json:"bio,omitempty"`
	FaceURL             string  `protobuf:"bytes,5,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	ProcessStatus       int32   `protobuf:"varint,6,opt,name=processStatus,proto3" json:"processStatus,omitempty"`
	ProcessFeedback     string  `protobuf:"bytes,7,opt,name=processFeedback,proto3" json:"processFeedback,omitempty"`
	PostCounts          int64   `protobuf:"varint,8,opt,name=postCounts,proto3" json:"postCounts,omitempty"`
	FollowCounts        int64   `protobuf:"varint,9,opt,name=followCounts,proto3" json:"followCounts,omitempty"`
	LikeCounts          int64   `protobuf:"varint,10,opt,name=likeCounts,proto3" json:"likeCounts,omitempty"`
	Interests           []int64 `protobuf:"varint,11,rep,packed,name=interests,proto3" json:"interests,omitempty"`
}

func (x *SelfOfficialInfo) Reset() {
	*x = SelfOfficialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfOfficialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfOfficialInfo) ProtoMessage() {}

func (x *SelfOfficialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfOfficialInfo.ProtoReflect.Descriptor instead.
func (*SelfOfficialInfo) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{6}
}

func (x *SelfOfficialInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SelfOfficialInfo) GetNicknameUpdateTime() int64 {
	if x != nil {
		return x.NicknameUpdateTime
	}
	return 0
}

func (x *SelfOfficialInfo) GetNicknameUpdateCount() int32 {
	if x != nil {
		return x.NicknameUpdateCount
	}
	return 0
}

func (x *SelfOfficialInfo) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *SelfOfficialInfo) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *SelfOfficialInfo) GetProcessStatus() int32 {
	if x != nil {
		return x.ProcessStatus
	}
	return 0
}

func (x *SelfOfficialInfo) GetProcessFeedback() string {
	if x != nil {
		return x.ProcessFeedback
	}
	return ""
}

func (x *SelfOfficialInfo) GetPostCounts() int64 {
	if x != nil {
		return x.PostCounts
	}
	return 0
}

func (x *SelfOfficialInfo) GetFollowCounts() int64 {
	if x != nil {
		return x.FollowCounts
	}
	return 0
}

func (x *SelfOfficialInfo) GetLikeCounts() int64 {
	if x != nil {
		return x.LikeCounts
	}
	return 0
}

func (x *SelfOfficialInfo) GetInterests() []int64 {
	if x != nil {
		return x.Interests
	}
	return nil
}

type GetSelfOfficialInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32                             `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrMsg  string                            `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	Data    *GetSelfOfficialInfoResponse_Data `protobuf:"bytes,3,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *GetSelfOfficialInfoResponse) Reset() {
	*x = GetSelfOfficialInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSelfOfficialInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfOfficialInfoResponse) ProtoMessage() {}

func (x *GetSelfOfficialInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfOfficialInfoResponse.ProtoReflect.Descriptor instead.
func (*GetSelfOfficialInfoResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{7}
}

func (x *GetSelfOfficialInfoResponse) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *GetSelfOfficialInfoResponse) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *GetSelfOfficialInfoResponse) GetData() *GetSelfOfficialInfoResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type SetSelfOfficialInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string  `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	UserID      string  `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	FaceURL     string  `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	Nickname    string  `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Bio         string  `protobuf:"bytes,5,opt,name=bio,proto3" json:"bio,omitempty"`
	Interests   []int64 `protobuf:"varint,6,rep,packed,name=interests,proto3" json:"interests,omitempty"`
}

func (x *SetSelfOfficialInfoRequest) Reset() {
	*x = SetSelfOfficialInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSelfOfficialInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSelfOfficialInfoRequest) ProtoMessage() {}

func (x *SetSelfOfficialInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSelfOfficialInfoRequest.ProtoReflect.Descriptor instead.
func (*SetSelfOfficialInfoRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{8}
}

func (x *SetSelfOfficialInfoRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *SetSelfOfficialInfoRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SetSelfOfficialInfoRequest) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *SetSelfOfficialInfoRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SetSelfOfficialInfoRequest) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *SetSelfOfficialInfoRequest) GetInterests() []int64 {
	if x != nil {
		return x.Interests
	}
	return nil
}

type GetOfficialAccountsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID     string                    `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Pagination      *sdk_ws.RequestPagination `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	OfficialAccount string                    `protobuf:"bytes,3,opt,name=OfficialAccount,proto3" json:"OfficialAccount,omitempty"`
	AccountType     int32                     `protobuf:"varint,4,opt,name=AccountType,proto3" json:"AccountType,omitempty"`
	IdType          int32                     `protobuf:"varint,5,opt,name=IdType,proto3" json:"IdType,omitempty"`
	IdNumber        string                    `protobuf:"bytes,6,opt,name=IdNumber,proto3" json:"IdNumber,omitempty"`
	ProcessStatus   int32                     `protobuf:"varint,7,opt,name=ProcessStatus,proto3" json:"ProcessStatus,omitempty"`
	TagsId          string                    `protobuf:"bytes,8,opt,name=TagsId,proto3" json:"TagsId,omitempty"`
	TimeType        int32                     `protobuf:"varint,9,opt,name=TimeType,proto3" json:"TimeType,omitempty"`
	StartTime       string                    `protobuf:"bytes,10,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime         string                    `protobuf:"bytes,11,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	OrderBy         string                    `protobuf:"bytes,12,opt,name=OrderBy,proto3" json:"OrderBy,omitempty"`
	IsSystem        int32                     `protobuf:"varint,13,opt,name=IsSystem,proto3" json:"IsSystem,omitempty"`
	Bio             string                    `protobuf:"bytes,14,opt,name=Bio,proto3" json:"Bio,omitempty"`
}

func (x *GetOfficialAccountsReq) Reset() {
	*x = GetOfficialAccountsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfficialAccountsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfficialAccountsReq) ProtoMessage() {}

func (x *GetOfficialAccountsReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfficialAccountsReq.ProtoReflect.Descriptor instead.
func (*GetOfficialAccountsReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{9}
}

func (x *GetOfficialAccountsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetOfficialAccountsReq) GetPagination() *sdk_ws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetOfficialAccountsReq) GetOfficialAccount() string {
	if x != nil {
		return x.OfficialAccount
	}
	return ""
}

func (x *GetOfficialAccountsReq) GetAccountType() int32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *GetOfficialAccountsReq) GetIdType() int32 {
	if x != nil {
		return x.IdType
	}
	return 0
}

func (x *GetOfficialAccountsReq) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *GetOfficialAccountsReq) GetProcessStatus() int32 {
	if x != nil {
		return x.ProcessStatus
	}
	return 0
}

func (x *GetOfficialAccountsReq) GetTagsId() string {
	if x != nil {
		return x.TagsId
	}
	return ""
}

func (x *GetOfficialAccountsReq) GetTimeType() int32 {
	if x != nil {
		return x.TimeType
	}
	return 0
}

func (x *GetOfficialAccountsReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetOfficialAccountsReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetOfficialAccountsReq) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetOfficialAccountsReq) GetIsSystem() int32 {
	if x != nil {
		return x.IsSystem
	}
	return 0
}

func (x *GetOfficialAccountsReq) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

type GetOfficialAccountsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp      *CommonResponse            `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	OfficialAccount []*OfficialAccountResponse `protobuf:"bytes,2,rep,name=OfficialAccount,proto3" json:"OfficialAccount,omitempty"`
	Pagination      *sdk_ws.ResponsePagination `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	OfficialNums    int32                      `protobuf:"varint,4,opt,name=OfficialNums,proto3" json:"OfficialNums,omitempty"`
	PendingNums     int64                      `protobuf:"varint,5,opt,name=PendingNums,proto3" json:"PendingNums,omitempty"`
}

func (x *GetOfficialAccountsResp) Reset() {
	*x = GetOfficialAccountsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfficialAccountsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfficialAccountsResp) ProtoMessage() {}

func (x *GetOfficialAccountsResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfficialAccountsResp.ProtoReflect.Descriptor instead.
func (*GetOfficialAccountsResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{10}
}

func (x *GetOfficialAccountsResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetOfficialAccountsResp) GetOfficialAccount() []*OfficialAccountResponse {
	if x != nil {
		return x.OfficialAccount
	}
	return nil
}

func (x *GetOfficialAccountsResp) GetPagination() *sdk_ws.ResponsePagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetOfficialAccountsResp) GetOfficialNums() int32 {
	if x != nil {
		return x.OfficialNums
	}
	return 0
}

func (x *GetOfficialAccountsResp) GetPendingNums() int64 {
	if x != nil {
		return x.PendingNums
	}
	return 0
}

type DeleteOfficialAccountsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpUserId    string   `protobuf:"bytes,1,opt,name=OpUserId,proto3" json:"OpUserId,omitempty"`
	OperationID string   `protobuf:"bytes,2,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Officials   []string `protobuf:"bytes,3,rep,name=Officials,proto3" json:"Officials,omitempty"`
}

func (x *DeleteOfficialAccountsReq) Reset() {
	*x = DeleteOfficialAccountsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOfficialAccountsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOfficialAccountsReq) ProtoMessage() {}

func (x *DeleteOfficialAccountsReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOfficialAccountsReq.ProtoReflect.Descriptor instead.
func (*DeleteOfficialAccountsReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteOfficialAccountsReq) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *DeleteOfficialAccountsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *DeleteOfficialAccountsReq) GetOfficials() []string {
	if x != nil {
		return x.Officials
	}
	return nil
}

type DeleteOfficialAccountsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *DeleteOfficialAccountsResp) Reset() {
	*x = DeleteOfficialAccountsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOfficialAccountsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOfficialAccountsResp) ProtoMessage() {}

func (x *DeleteOfficialAccountsResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOfficialAccountsResp.ProtoReflect.Descriptor instead.
func (*DeleteOfficialAccountsResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteOfficialAccountsResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type AlterOfficialAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string    `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Official    *Official `protobuf:"bytes,2,opt,name=Official,proto3" json:"Official,omitempty"`
	Interests   []int64   `protobuf:"varint,3,rep,packed,name=Interests,proto3" json:"Interests,omitempty"`
	OpUserID    string    `protobuf:"bytes,4,opt,name=OpUserID,proto3" json:"OpUserID,omitempty"`
}

func (x *AlterOfficialAccountReq) Reset() {
	*x = AlterOfficialAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterOfficialAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterOfficialAccountReq) ProtoMessage() {}

func (x *AlterOfficialAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterOfficialAccountReq.ProtoReflect.Descriptor instead.
func (*AlterOfficialAccountReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{13}
}

func (x *AlterOfficialAccountReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *AlterOfficialAccountReq) GetOfficial() *Official {
	if x != nil {
		return x.Official
	}
	return nil
}

func (x *AlterOfficialAccountReq) GetInterests() []int64 {
	if x != nil {
		return x.Interests
	}
	return nil
}

func (x *AlterOfficialAccountReq) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

type AlterOfficialAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *AlterOfficialAccountResp) Reset() {
	*x = AlterOfficialAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterOfficialAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterOfficialAccountResp) ProtoMessage() {}

func (x *AlterOfficialAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterOfficialAccountResp.ProtoReflect.Descriptor instead.
func (*AlterOfficialAccountResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{14}
}

func (x *AlterOfficialAccountResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type AddOfficialAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpUserId        string  `protobuf:"bytes,1,opt,name=OpUserId,proto3" json:"OpUserId,omitempty"`
	OperationID     string  `protobuf:"bytes,2,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserID          string  `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Nickname        string  `protobuf:"bytes,4,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	InitialNickname string  `protobuf:"bytes,5,opt,name=InitialNickname,proto3" json:"InitialNickname,omitempty"`
	Type            int32   `protobuf:"varint,6,opt,name=Type,proto3" json:"Type,omitempty"`
	IdType          int32   `protobuf:"varint,7,opt,name=IdType,proto3" json:"IdType,omitempty"`
	IdName          string  `protobuf:"bytes,8,opt,name=IdName,proto3" json:"IdName,omitempty"`
	IdNumber        string  `protobuf:"bytes,9,opt,name=IdNumber,proto3" json:"IdNumber,omitempty"`
	Interests       []int64 `protobuf:"varint,10,rep,packed,name=Interests,proto3" json:"Interests,omitempty"`
	IsSystem        int32   `protobuf:"varint,11,opt,name=IsSystem,proto3" json:"IsSystem,omitempty"`
	ProfilePhoto    string  `protobuf:"bytes,12,opt,name=ProfilePhoto,proto3" json:"ProfilePhoto,omitempty"`
	Bio             string  `protobuf:"bytes,13,opt,name=Bio,proto3" json:"Bio,omitempty"`
}

func (x *AddOfficialAccountReq) Reset() {
	*x = AddOfficialAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOfficialAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOfficialAccountReq) ProtoMessage() {}

func (x *AddOfficialAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOfficialAccountReq.ProtoReflect.Descriptor instead.
func (*AddOfficialAccountReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{15}
}

func (x *AddOfficialAccountReq) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *AddOfficialAccountReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *AddOfficialAccountReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AddOfficialAccountReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *AddOfficialAccountReq) GetInitialNickname() string {
	if x != nil {
		return x.InitialNickname
	}
	return ""
}

func (x *AddOfficialAccountReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AddOfficialAccountReq) GetIdType() int32 {
	if x != nil {
		return x.IdType
	}
	return 0
}

func (x *AddOfficialAccountReq) GetIdName() string {
	if x != nil {
		return x.IdName
	}
	return ""
}

func (x *AddOfficialAccountReq) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *AddOfficialAccountReq) GetInterests() []int64 {
	if x != nil {
		return x.Interests
	}
	return nil
}

func (x *AddOfficialAccountReq) GetIsSystem() int32 {
	if x != nil {
		return x.IsSystem
	}
	return 0
}

func (x *AddOfficialAccountReq) GetProfilePhoto() string {
	if x != nil {
		return x.ProfilePhoto
	}
	return ""
}

func (x *AddOfficialAccountReq) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

type AddOfficialAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *AddOfficialAccountResp) Reset() {
	*x = AddOfficialAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOfficialAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOfficialAccountResp) ProtoMessage() {}

func (x *AddOfficialAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOfficialAccountResp.ProtoReflect.Descriptor instead.
func (*AddOfficialAccountResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{16}
}

func (x *AddOfficialAccountResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type ProcessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpUserId        string `protobuf:"bytes,1,opt,name=OpUserId,proto3" json:"OpUserId,omitempty"`
	OperationID     string `protobuf:"bytes,2,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	OfficialId      int64  `protobuf:"varint,3,opt,name=OfficialId,proto3" json:"OfficialId,omitempty"`
	ProcessStatus   int32  `protobuf:"varint,4,opt,name=ProcessStatus,proto3" json:"ProcessStatus,omitempty"`
	ProcessFeedback string `protobuf:"bytes,5,opt,name=ProcessFeedback,proto3" json:"ProcessFeedback,omitempty"`
}

func (x *ProcessReq) Reset() {
	*x = ProcessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessReq) ProtoMessage() {}

func (x *ProcessReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessReq.ProtoReflect.Descriptor instead.
func (*ProcessReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{17}
}

func (x *ProcessReq) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *ProcessReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ProcessReq) GetOfficialId() int64 {
	if x != nil {
		return x.OfficialId
	}
	return 0
}

func (x *ProcessReq) GetProcessStatus() int32 {
	if x != nil {
		return x.ProcessStatus
	}
	return 0
}

func (x *ProcessReq) GetProcessFeedback() string {
	if x != nil {
		return x.ProcessFeedback
	}
	return ""
}

type ProcessResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *ProcessResp) Reset() {
	*x = ProcessResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessResp) ProtoMessage() {}

func (x *ProcessResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessResp.ProtoReflect.Descriptor instead.
func (*ProcessResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{18}
}

func (x *ProcessResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type FollowOfficialAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	OfficialID  int64  `protobuf:"varint,2,opt,name=officialID,proto3" json:"officialID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *FollowOfficialAccountRequest) Reset() {
	*x = FollowOfficialAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowOfficialAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowOfficialAccountRequest) ProtoMessage() {}

func (x *FollowOfficialAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowOfficialAccountRequest.ProtoReflect.Descriptor instead.
func (*FollowOfficialAccountRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{19}
}

func (x *FollowOfficialAccountRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *FollowOfficialAccountRequest) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *FollowOfficialAccountRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type UnfollowOfficialAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	OfficialID  int64  `protobuf:"varint,2,opt,name=officialID,proto3" json:"officialID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *UnfollowOfficialAccountRequest) Reset() {
	*x = UnfollowOfficialAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnfollowOfficialAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnfollowOfficialAccountRequest) ProtoMessage() {}

func (x *UnfollowOfficialAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnfollowOfficialAccountRequest.ProtoReflect.Descriptor instead.
func (*UnfollowOfficialAccountRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{20}
}

func (x *UnfollowOfficialAccountRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *UnfollowOfficialAccountRequest) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *UnfollowOfficialAccountRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type UpdateOfficialFollowSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	OfficialID  int64  `protobuf:"varint,2,opt,name=officialID,proto3" json:"officialID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Muted       bool   `protobuf:"varint,4,opt,name=muted,proto3" json:"muted,omitempty"`
	Enabled     bool   `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *UpdateOfficialFollowSettingsRequest) Reset() {
	*x = UpdateOfficialFollowSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOfficialFollowSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOfficialFollowSettingsRequest) ProtoMessage() {}

func (x *UpdateOfficialFollowSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOfficialFollowSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateOfficialFollowSettingsRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateOfficialFollowSettingsRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *UpdateOfficialFollowSettingsRequest) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *UpdateOfficialFollowSettingsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateOfficialFollowSettingsRequest) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *UpdateOfficialFollowSettingsRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type OfficialFollowSettingsByOfficialIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	OfficialID  int64  `protobuf:"varint,2,opt,name=OfficialID,proto3" json:"OfficialID,omitempty"`
	ReqUserID   string `protobuf:"bytes,3,opt,name=ReqUserID,proto3" json:"ReqUserID,omitempty"`
}

func (x *OfficialFollowSettingsByOfficialIDRequest) Reset() {
	*x = OfficialFollowSettingsByOfficialIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialFollowSettingsByOfficialIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialFollowSettingsByOfficialIDRequest) ProtoMessage() {}

func (x *OfficialFollowSettingsByOfficialIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialFollowSettingsByOfficialIDRequest.ProtoReflect.Descriptor instead.
func (*OfficialFollowSettingsByOfficialIDRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{22}
}

func (x *OfficialFollowSettingsByOfficialIDRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *OfficialFollowSettingsByOfficialIDRequest) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *OfficialFollowSettingsByOfficialIDRequest) GetReqUserID() string {
	if x != nil {
		return x.ReqUserID
	}
	return ""
}

type OfficialFollowSettingsByOfficialIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	UserFollow *UserFollow     `protobuf:"bytes,2,opt,name=UserFollow,proto3" json:"UserFollow,omitempty"`
}

func (x *OfficialFollowSettingsByOfficialIDResponse) Reset() {
	*x = OfficialFollowSettingsByOfficialIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialFollowSettingsByOfficialIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialFollowSettingsByOfficialIDResponse) ProtoMessage() {}

func (x *OfficialFollowSettingsByOfficialIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialFollowSettingsByOfficialIDResponse.ProtoReflect.Descriptor instead.
func (*OfficialFollowSettingsByOfficialIDResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{23}
}

func (x *OfficialFollowSettingsByOfficialIDResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *OfficialFollowSettingsByOfficialIDResponse) GetUserFollow() *UserFollow {
	if x != nil {
		return x.UserFollow
	}
	return nil
}

type BlockOfficialFollowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID    string   `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	OfficialUserID string   `protobuf:"bytes,2,opt,name=officialUserID,proto3" json:"officialUserID,omitempty"`
	UserIDList     []string `protobuf:"bytes,3,rep,name=userIDList,proto3" json:"userIDList,omitempty"`
}

func (x *BlockOfficialFollowsRequest) Reset() {
	*x = BlockOfficialFollowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockOfficialFollowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockOfficialFollowsRequest) ProtoMessage() {}

func (x *BlockOfficialFollowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockOfficialFollowsRequest.ProtoReflect.Descriptor instead.
func (*BlockOfficialFollowsRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{24}
}

func (x *BlockOfficialFollowsRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *BlockOfficialFollowsRequest) GetOfficialUserID() string {
	if x != nil {
		return x.OfficialUserID
	}
	return ""
}

func (x *BlockOfficialFollowsRequest) GetUserIDList() []string {
	if x != nil {
		return x.UserIDList
	}
	return nil
}

type UnblockOfficialFollowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID    string   `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	OfficialUserID string   `protobuf:"bytes,2,opt,name=officialUserID,proto3" json:"officialUserID,omitempty"`
	UserIDList     []string `protobuf:"bytes,3,rep,name=userIDList,proto3" json:"userIDList,omitempty"`
}

func (x *UnblockOfficialFollowsRequest) Reset() {
	*x = UnblockOfficialFollowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockOfficialFollowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockOfficialFollowsRequest) ProtoMessage() {}

func (x *UnblockOfficialFollowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockOfficialFollowsRequest.ProtoReflect.Descriptor instead.
func (*UnblockOfficialFollowsRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{25}
}

func (x *UnblockOfficialFollowsRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *UnblockOfficialFollowsRequest) GetOfficialUserID() string {
	if x != nil {
		return x.OfficialUserID
	}
	return ""
}

func (x *UnblockOfficialFollowsRequest) GetUserIDList() []string {
	if x != nil {
		return x.UserIDList
	}
	return nil
}

type DeleteOfficialFollowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID    string   `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	OfficialUserID string   `protobuf:"bytes,2,opt,name=officialUserID,proto3" json:"officialUserID,omitempty"`
	UserIDList     []string `protobuf:"bytes,3,rep,name=userIDList,proto3" json:"userIDList,omitempty"`
}

func (x *DeleteOfficialFollowsRequest) Reset() {
	*x = DeleteOfficialFollowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOfficialFollowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOfficialFollowsRequest) ProtoMessage() {}

func (x *DeleteOfficialFollowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOfficialFollowsRequest.ProtoReflect.Descriptor instead.
func (*DeleteOfficialFollowsRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteOfficialFollowsRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *DeleteOfficialFollowsRequest) GetOfficialUserID() string {
	if x != nil {
		return x.OfficialUserID
	}
	return ""
}

func (x *DeleteOfficialFollowsRequest) GetUserIDList() []string {
	if x != nil {
		return x.UserIDList
	}
	return nil
}

type LikeArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	ArticleID   int64  `protobuf:"varint,2,opt,name=articleID,proto3" json:"articleID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *LikeArticleRequest) Reset() {
	*x = LikeArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeArticleRequest) ProtoMessage() {}

func (x *LikeArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeArticleRequest.ProtoReflect.Descriptor instead.
func (*LikeArticleRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{27}
}

func (x *LikeArticleRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *LikeArticleRequest) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *LikeArticleRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type UnlikeArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	ArticleID   int64  `protobuf:"varint,2,opt,name=articleID,proto3" json:"articleID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *UnlikeArticleRequest) Reset() {
	*x = UnlikeArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlikeArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlikeArticleRequest) ProtoMessage() {}

func (x *UnlikeArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlikeArticleRequest.ProtoReflect.Descriptor instead.
func (*UnlikeArticleRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{28}
}

func (x *UnlikeArticleRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *UnlikeArticleRequest) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *UnlikeArticleRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type LikeArticleCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	CommentID   int64  `protobuf:"varint,2,opt,name=commentID,proto3" json:"commentID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *LikeArticleCommentRequest) Reset() {
	*x = LikeArticleCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeArticleCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeArticleCommentRequest) ProtoMessage() {}

func (x *LikeArticleCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeArticleCommentRequest.ProtoReflect.Descriptor instead.
func (*LikeArticleCommentRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{29}
}

func (x *LikeArticleCommentRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *LikeArticleCommentRequest) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *LikeArticleCommentRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type UnlikeArticleCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	CommentID   int64  `protobuf:"varint,2,opt,name=commentID,proto3" json:"commentID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *UnlikeArticleCommentRequest) Reset() {
	*x = UnlikeArticleCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlikeArticleCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlikeArticleCommentRequest) ProtoMessage() {}

func (x *UnlikeArticleCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlikeArticleCommentRequest.ProtoReflect.Descriptor instead.
func (*UnlikeArticleCommentRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{30}
}

func (x *UnlikeArticleCommentRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *UnlikeArticleCommentRequest) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *UnlikeArticleCommentRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type OfficialLikeArticleCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	CommentID   int64  `protobuf:"varint,2,opt,name=commentID,proto3" json:"commentID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *OfficialLikeArticleCommentRequest) Reset() {
	*x = OfficialLikeArticleCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialLikeArticleCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialLikeArticleCommentRequest) ProtoMessage() {}

func (x *OfficialLikeArticleCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialLikeArticleCommentRequest.ProtoReflect.Descriptor instead.
func (*OfficialLikeArticleCommentRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{31}
}

func (x *OfficialLikeArticleCommentRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *OfficialLikeArticleCommentRequest) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *OfficialLikeArticleCommentRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type OfficialUnlikeArticleCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	CommentID   int64  `protobuf:"varint,2,opt,name=commentID,proto3" json:"commentID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *OfficialUnlikeArticleCommentRequest) Reset() {
	*x = OfficialUnlikeArticleCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialUnlikeArticleCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialUnlikeArticleCommentRequest) ProtoMessage() {}

func (x *OfficialUnlikeArticleCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialUnlikeArticleCommentRequest.ProtoReflect.Descriptor instead.
func (*OfficialUnlikeArticleCommentRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{32}
}

func (x *OfficialUnlikeArticleCommentRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *OfficialUnlikeArticleCommentRequest) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *OfficialUnlikeArticleCommentRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type OfficialDeleteArticleCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	CommentID   int64  `protobuf:"varint,2,opt,name=commentID,proto3" json:"commentID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *OfficialDeleteArticleCommentRequest) Reset() {
	*x = OfficialDeleteArticleCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialDeleteArticleCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialDeleteArticleCommentRequest) ProtoMessage() {}

func (x *OfficialDeleteArticleCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialDeleteArticleCommentRequest.ProtoReflect.Descriptor instead.
func (*OfficialDeleteArticleCommentRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{33}
}

func (x *OfficialDeleteArticleCommentRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *OfficialDeleteArticleCommentRequest) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *OfficialDeleteArticleCommentRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type OfficialHideArticleCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	CommentID   int64  `protobuf:"varint,2,opt,name=commentID,proto3" json:"commentID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *OfficialHideArticleCommentRequest) Reset() {
	*x = OfficialHideArticleCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialHideArticleCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialHideArticleCommentRequest) ProtoMessage() {}

func (x *OfficialHideArticleCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialHideArticleCommentRequest.ProtoReflect.Descriptor instead.
func (*OfficialHideArticleCommentRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{34}
}

func (x *OfficialHideArticleCommentRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *OfficialHideArticleCommentRequest) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *OfficialHideArticleCommentRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type OfficialShowArticleCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	CommentID   int64  `protobuf:"varint,2,opt,name=commentID,proto3" json:"commentID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *OfficialShowArticleCommentRequest) Reset() {
	*x = OfficialShowArticleCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialShowArticleCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialShowArticleCommentRequest) ProtoMessage() {}

func (x *OfficialShowArticleCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialShowArticleCommentRequest.ProtoReflect.Descriptor instead.
func (*OfficialShowArticleCommentRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{35}
}

func (x *OfficialShowArticleCommentRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *OfficialShowArticleCommentRequest) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *OfficialShowArticleCommentRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type DeleteArticleLikeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	ArticleID   int64  `protobuf:"varint,2,opt,name=articleID,proto3" json:"articleID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	OpUserID    string `protobuf:"bytes,4,opt,name=opUserID,proto3" json:"opUserID,omitempty"`
}

func (x *DeleteArticleLikeRequest) Reset() {
	*x = DeleteArticleLikeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArticleLikeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArticleLikeRequest) ProtoMessage() {}

func (x *DeleteArticleLikeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArticleLikeRequest.ProtoReflect.Descriptor instead.
func (*DeleteArticleLikeRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteArticleLikeRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *DeleteArticleLikeRequest) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *DeleteArticleLikeRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DeleteArticleLikeRequest) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

type AddArticleCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID     string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	ArticleID       int64  `protobuf:"varint,2,opt,name=articleID,proto3" json:"articleID,omitempty"`
	UserID          string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	OpUserID        string `protobuf:"bytes,4,opt,name=opUserID,proto3" json:"opUserID,omitempty"`
	Content         string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ParentCommentID int64  `protobuf:"varint,6,opt,name=parentCommentID,proto3" json:"parentCommentID,omitempty"`
	ReplyUserID     string `protobuf:"bytes,7,opt,name=replyUserID,proto3" json:"replyUserID,omitempty"`
	ReplyOfficialID int64  `protobuf:"varint,8,opt,name=replyOfficialID,proto3" json:"replyOfficialID,omitempty"`
}

func (x *AddArticleCommentRequest) Reset() {
	*x = AddArticleCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddArticleCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddArticleCommentRequest) ProtoMessage() {}

func (x *AddArticleCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddArticleCommentRequest.ProtoReflect.Descriptor instead.
func (*AddArticleCommentRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{37}
}

func (x *AddArticleCommentRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *AddArticleCommentRequest) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *AddArticleCommentRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AddArticleCommentRequest) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

func (x *AddArticleCommentRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddArticleCommentRequest) GetParentCommentID() int64 {
	if x != nil {
		return x.ParentCommentID
	}
	return 0
}

func (x *AddArticleCommentRequest) GetReplyUserID() string {
	if x != nil {
		return x.ReplyUserID
	}
	return ""
}

func (x *AddArticleCommentRequest) GetReplyOfficialID() int64 {
	if x != nil {
		return x.ReplyOfficialID
	}
	return 0
}

type AddArticleCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
	CommentID  int64           `protobuf:"varint,2,opt,name=commentID,proto3" json:"commentID,omitempty"`
}

func (x *AddArticleCommentResponse) Reset() {
	*x = AddArticleCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddArticleCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddArticleCommentResponse) ProtoMessage() {}

func (x *AddArticleCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddArticleCommentResponse.ProtoReflect.Descriptor instead.
func (*AddArticleCommentResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{38}
}

func (x *AddArticleCommentResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *AddArticleCommentResponse) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

type UserArticleSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleID        int64  `protobuf:"varint,1,opt,name=articleID,proto3" json:"articleID,omitempty"`
	Title            string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	CoverPhoto       string `protobuf:"bytes,3,opt,name=coverPhoto,proto3" json:"coverPhoto,omitempty"`
	TextContent      string `protobuf:"bytes,4,opt,name=textContent,proto3" json:"textContent,omitempty"`
	ReadCounts       int64  `protobuf:"varint,5,opt,name=readCounts,proto3" json:"readCounts,omitempty"`
	UniqueReadCounts int64  `protobuf:"varint,6,opt,name=uniqueReadCounts,proto3" json:"uniqueReadCounts,omitempty"`
	LikeCounts       int64  `protobuf:"varint,7,opt,name=LikeCounts,proto3" json:"LikeCounts,omitempty"`
	CommentCounts    int64  `protobuf:"varint,8,opt,name=commentCounts,proto3" json:"commentCounts,omitempty"`
	RepostCounts     int64  `protobuf:"varint,9,opt,name=repostCounts,proto3" json:"repostCounts,omitempty"`
	CreateTime       int64  `protobuf:"varint,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *UserArticleSummary) Reset() {
	*x = UserArticleSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserArticleSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserArticleSummary) ProtoMessage() {}

func (x *UserArticleSummary) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserArticleSummary.ProtoReflect.Descriptor instead.
func (*UserArticleSummary) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{39}
}

func (x *UserArticleSummary) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *UserArticleSummary) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UserArticleSummary) GetCoverPhoto() string {
	if x != nil {
		return x.CoverPhoto
	}
	return ""
}

func (x *UserArticleSummary) GetTextContent() string {
	if x != nil {
		return x.TextContent
	}
	return ""
}

func (x *UserArticleSummary) GetReadCounts() int64 {
	if x != nil {
		return x.ReadCounts
	}
	return 0
}

func (x *UserArticleSummary) GetUniqueReadCounts() int64 {
	if x != nil {
		return x.UniqueReadCounts
	}
	return 0
}

func (x *UserArticleSummary) GetLikeCounts() int64 {
	if x != nil {
		return x.LikeCounts
	}
	return 0
}

func (x *UserArticleSummary) GetCommentCounts() int64 {
	if x != nil {
		return x.CommentCounts
	}
	return 0
}

func (x *UserArticleSummary) GetRepostCounts() int64 {
	if x != nil {
		return x.RepostCounts
	}
	return 0
}

func (x *UserArticleSummary) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListArticlesTimeLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	Source      int32  `protobuf:"varint,2,opt,name=source,proto3" json:"source,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	OfficialID  int64  `protobuf:"varint,4,opt,name=officialID,proto3" json:"officialID,omitempty"`
	Offset      int64  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int64  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListArticlesTimeLineRequest) Reset() {
	*x = ListArticlesTimeLineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArticlesTimeLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArticlesTimeLineRequest) ProtoMessage() {}

func (x *ListArticlesTimeLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArticlesTimeLineRequest.ProtoReflect.Descriptor instead.
func (*ListArticlesTimeLineRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{40}
}

func (x *ListArticlesTimeLineRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ListArticlesTimeLineRequest) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *ListArticlesTimeLineRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ListArticlesTimeLineRequest) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *ListArticlesTimeLineRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListArticlesTimeLineRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListArticlesTimeLineResponseEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Article  *UserArticleSummary `protobuf:"bytes,1,opt,name=article,proto3" json:"article,omitempty"`
	Official *UserFollow         `protobuf:"bytes,2,opt,name=official,proto3" json:"official,omitempty"`
}

func (x *ListArticlesTimeLineResponseEntry) Reset() {
	*x = ListArticlesTimeLineResponseEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArticlesTimeLineResponseEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArticlesTimeLineResponseEntry) ProtoMessage() {}

func (x *ListArticlesTimeLineResponseEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArticlesTimeLineResponseEntry.ProtoReflect.Descriptor instead.
func (*ListArticlesTimeLineResponseEntry) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{41}
}

func (x *ListArticlesTimeLineResponseEntry) GetArticle() *UserArticleSummary {
	if x != nil {
		return x.Article
	}
	return nil
}

func (x *ListArticlesTimeLineResponseEntry) GetOfficial() *UserFollow {
	if x != nil {
		return x.Official
	}
	return nil
}

type ListArticlesTimeLineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse                      `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
	Entries    []*ListArticlesTimeLineResponseEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	Count      int64                                `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ListArticlesTimeLineResponse) Reset() {
	*x = ListArticlesTimeLineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArticlesTimeLineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArticlesTimeLineResponse) ProtoMessage() {}

func (x *ListArticlesTimeLineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArticlesTimeLineResponse.ProtoReflect.Descriptor instead.
func (*ListArticlesTimeLineResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{42}
}

func (x *ListArticlesTimeLineResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *ListArticlesTimeLineResponse) GetEntries() []*ListArticlesTimeLineResponseEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *ListArticlesTimeLineResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ArticleLikeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleID      int64  `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	UserID         string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserName       string `protobuf:"bytes,3,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserProfileImg string `protobuf:"bytes,4,opt,name=UserProfileImg,proto3" json:"UserProfileImg,omitempty"`
	CreateBy       string `protobuf:"bytes,5,opt,name=CreateBy,proto3" json:"CreateBy,omitempty"`
	CreateTime     int64  `protobuf:"varint,6,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdateBy       string `protobuf:"bytes,7,opt,name=UpdateBy,proto3" json:"UpdateBy,omitempty"`
	UpdatedTime    int64  `protobuf:"varint,8,opt,name=UpdatedTime,proto3" json:"UpdatedTime,omitempty"`
	DeletedBy      string `protobuf:"bytes,9,opt,name=DeletedBy,proto3" json:"DeletedBy,omitempty"`
	DeleteTime     int64  `protobuf:"varint,10,opt,name=DeleteTime,proto3" json:"DeleteTime,omitempty"`
	Status         int32  `protobuf:"varint,11,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ArticleLikeResponse) Reset() {
	*x = ArticleLikeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleLikeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleLikeResponse) ProtoMessage() {}

func (x *ArticleLikeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleLikeResponse.ProtoReflect.Descriptor instead.
func (*ArticleLikeResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{43}
}

func (x *ArticleLikeResponse) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *ArticleLikeResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ArticleLikeResponse) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ArticleLikeResponse) GetUserProfileImg() string {
	if x != nil {
		return x.UserProfileImg
	}
	return ""
}

func (x *ArticleLikeResponse) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *ArticleLikeResponse) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ArticleLikeResponse) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *ArticleLikeResponse) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *ArticleLikeResponse) GetDeletedBy() string {
	if x != nil {
		return x.DeletedBy
	}
	return ""
}

func (x *ArticleLikeResponse) GetDeleteTime() int64 {
	if x != nil {
		return x.DeleteTime
	}
	return 0
}

func (x *ArticleLikeResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ArticleCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleID       int64  `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	CommentID       string `protobuf:"bytes,2,opt,name=CommentID,proto3" json:"CommentID,omitempty"`
	UserID          string `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserName        string `protobuf:"bytes,4,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserProfileImg  string `protobuf:"bytes,5,opt,name=UserProfileImg,proto3" json:"UserProfileImg,omitempty"`
	CommentContent  string `protobuf:"bytes,6,opt,name=CommentContent,proto3" json:"CommentContent,omitempty"`
	CommentParentID string `protobuf:"bytes,7,opt,name=CommentParentID,proto3" json:"CommentParentID,omitempty"`
	CreateBy        string `protobuf:"bytes,8,opt,name=CreateBy,proto3" json:"CreateBy,omitempty"`
	CreateTime      int64  `protobuf:"varint,9,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdateBy        string `protobuf:"bytes,10,opt,name=UpdateBy,proto3" json:"UpdateBy,omitempty"`
	UpdatedTime     int64  `protobuf:"varint,11,opt,name=UpdatedTime,proto3" json:"UpdatedTime,omitempty"`
	DeletedBy       string `protobuf:"bytes,12,opt,name=DeletedBy,proto3" json:"DeletedBy,omitempty"`
	DeleteTime      int64  `protobuf:"varint,13,opt,name=DeleteTime,proto3" json:"DeleteTime,omitempty"`
	Status          int32  `protobuf:"varint,14,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ArticleCommentResp) Reset() {
	*x = ArticleCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleCommentResp) ProtoMessage() {}

func (x *ArticleCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleCommentResp.ProtoReflect.Descriptor instead.
func (*ArticleCommentResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{44}
}

func (x *ArticleCommentResp) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *ArticleCommentResp) GetCommentID() string {
	if x != nil {
		return x.CommentID
	}
	return ""
}

func (x *ArticleCommentResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ArticleCommentResp) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ArticleCommentResp) GetUserProfileImg() string {
	if x != nil {
		return x.UserProfileImg
	}
	return ""
}

func (x *ArticleCommentResp) GetCommentContent() string {
	if x != nil {
		return x.CommentContent
	}
	return ""
}

func (x *ArticleCommentResp) GetCommentParentID() string {
	if x != nil {
		return x.CommentParentID
	}
	return ""
}

func (x *ArticleCommentResp) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *ArticleCommentResp) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ArticleCommentResp) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *ArticleCommentResp) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *ArticleCommentResp) GetDeletedBy() string {
	if x != nil {
		return x.DeletedBy
	}
	return ""
}

func (x *ArticleCommentResp) GetDeleteTime() int64 {
	if x != nil {
		return x.DeleteTime
	}
	return 0
}

func (x *ArticleCommentResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleID          int64  `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	OfficialID         int64  `protobuf:"varint,2,opt,name=OfficialID,proto3" json:"OfficialID,omitempty"`
	Title              string `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	CoverPhoto         string `protobuf:"bytes,4,opt,name=CoverPhoto,proto3" json:"CoverPhoto,omitempty"`
	Content            string `protobuf:"bytes,5,opt,name=Content,proto3" json:"Content,omitempty"`
	TextContent        string `protobuf:"bytes,6,opt,name=TextContent,proto3" json:"TextContent,omitempty"`
	OfficialName       string `protobuf:"bytes,7,opt,name=OfficialName,proto3" json:"OfficialName,omitempty"`
	OfficialProfileImg string `protobuf:"bytes,8,opt,name=OfficialProfileImg,proto3" json:"OfficialProfileImg,omitempty"`
	CreatedBy          string `protobuf:"bytes,9,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	CreateTime         int64  `protobuf:"varint,10,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdatedBy          string `protobuf:"bytes,11,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	UpdateTime         int64  `protobuf:"varint,12,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	DeletedBy          string `protobuf:"bytes,13,opt,name=DeletedBy,proto3" json:"DeletedBy,omitempty"`
	DeleteTime         int64  `protobuf:"varint,14,opt,name=DeleteTime,proto3" json:"DeleteTime,omitempty"`
	Status             int32  `protobuf:"varint,15,opt,name=Status,proto3" json:"Status,omitempty"`
	Privacy            int32  `protobuf:"varint,16,opt,name=Privacy,proto3" json:"Privacy,omitempty"`
	CommentCounts      int64  `protobuf:"varint,17,opt,name=CommentCounts,proto3" json:"CommentCounts,omitempty"`
	LikeCounts         int64  `protobuf:"varint,18,opt,name=LikeCounts,proto3" json:"LikeCounts,omitempty"`
	ReadCounts         int64  `protobuf:"varint,19,opt,name=ReadCounts,proto3" json:"ReadCounts,omitempty"`
	UniqueReadCounts   int64  `protobuf:"varint,20,opt,name=UniqueReadCounts,proto3" json:"UniqueReadCounts,omitempty"`
	RepostCounts       int64  `protobuf:"varint,21,opt,name=RepostCounts,proto3" json:"RepostCounts,omitempty"`
	LastLoginIp        string `protobuf:"bytes,22,opt,name=LastLoginIp,proto3" json:"LastLoginIp,omitempty"`
	LastLoginTime      string `protobuf:"bytes,23,opt,name=LastLoginTime,proto3" json:"LastLoginTime,omitempty"`
	OfficialType       int32  `protobuf:"varint,24,opt,name=OfficialType,proto3" json:"OfficialType,omitempty"`
	OfficialStatus     int64  `protobuf:"varint,25,opt,name=OfficialStatus,proto3" json:"OfficialStatus,omitempty"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{45}
}

func (x *Article) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *Article) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *Article) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Article) GetCoverPhoto() string {
	if x != nil {
		return x.CoverPhoto
	}
	return ""
}

func (x *Article) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Article) GetTextContent() string {
	if x != nil {
		return x.TextContent
	}
	return ""
}

func (x *Article) GetOfficialName() string {
	if x != nil {
		return x.OfficialName
	}
	return ""
}

func (x *Article) GetOfficialProfileImg() string {
	if x != nil {
		return x.OfficialProfileImg
	}
	return ""
}

func (x *Article) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Article) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Article) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Article) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *Article) GetDeletedBy() string {
	if x != nil {
		return x.DeletedBy
	}
	return ""
}

func (x *Article) GetDeleteTime() int64 {
	if x != nil {
		return x.DeleteTime
	}
	return 0
}

func (x *Article) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Article) GetPrivacy() int32 {
	if x != nil {
		return x.Privacy
	}
	return 0
}

func (x *Article) GetCommentCounts() int64 {
	if x != nil {
		return x.CommentCounts
	}
	return 0
}

func (x *Article) GetLikeCounts() int64 {
	if x != nil {
		return x.LikeCounts
	}
	return 0
}

func (x *Article) GetReadCounts() int64 {
	if x != nil {
		return x.ReadCounts
	}
	return 0
}

func (x *Article) GetUniqueReadCounts() int64 {
	if x != nil {
		return x.UniqueReadCounts
	}
	return 0
}

func (x *Article) GetRepostCounts() int64 {
	if x != nil {
		return x.RepostCounts
	}
	return 0
}

func (x *Article) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *Article) GetLastLoginTime() string {
	if x != nil {
		return x.LastLoginTime
	}
	return ""
}

func (x *Article) GetOfficialType() int32 {
	if x != nil {
		return x.OfficialType
	}
	return 0
}

func (x *Article) GetOfficialStatus() int64 {
	if x != nil {
		return x.OfficialStatus
	}
	return 0
}

type ArticleComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID         int64  `protobuf:"varint,1,opt,name=CommentID,proto3" json:"CommentID,omitempty"`
	ParentCommentID   int64  `protobuf:"varint,2,opt,name=ParentCommentID,proto3" json:"ParentCommentID,omitempty"`
	ArticleID         int64  `protobuf:"varint,3,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	OfficialID        int64  `protobuf:"varint,4,opt,name=OfficialID,proto3" json:"OfficialID,omitempty"`
	CommentReplyCount int64  `protobuf:"varint,5,opt,name=CommentReplyCount,proto3" json:"CommentReplyCount,omitempty"`
	Content           string `protobuf:"bytes,6,opt,name=Content,proto3" json:"Content,omitempty"`
	UserID            string `protobuf:"bytes,7,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserName          string `protobuf:"bytes,8,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserProfileImg    string `protobuf:"bytes,9,opt,name=UserProfileImg,proto3" json:"UserProfileImg,omitempty"`
	CreatedBy         string `protobuf:"bytes,10,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	CreateTime        int64  `protobuf:"varint,11,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdatedBy         string `protobuf:"bytes,12,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	UpdateTime        int64  `protobuf:"varint,13,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	DeletedBy         string `protobuf:"bytes,14,opt,name=DeletedBy,proto3" json:"DeletedBy,omitempty"`
	DeleteTime        int64  `protobuf:"varint,15,opt,name=DeleteTime,proto3" json:"DeleteTime,omitempty"`
	Status            int32  `protobuf:"varint,16,opt,name=Status,proto3" json:"Status,omitempty"`
	ArticleTitle      string `protobuf:"bytes,17,opt,name=ArticleTitle,proto3" json:"ArticleTitle,omitempty"`
	OfficialType      int32  `protobuf:"varint,18,opt,name=OfficialType,proto3" json:"OfficialType,omitempty"`
	OfficialName      string `protobuf:"bytes,19,opt,name=OfficialName,proto3" json:"OfficialName,omitempty"`
	LastLoginTime     string `protobuf:"bytes,20,opt,name=LastLoginTime,proto3" json:"LastLoginTime,omitempty"`
	LastLoginIp       string `protobuf:"bytes,21,opt,name=LastLoginIp,proto3" json:"LastLoginIp,omitempty"`
	CoverPhoto        string `protobuf:"bytes,22,opt,name=CoverPhoto,proto3" json:"CoverPhoto,omitempty"`
	PostTime          int64  `protobuf:"varint,23,opt,name=PostTime,proto3" json:"PostTime,omitempty"`
	CommentLikes      int64  `protobuf:"varint,24,opt,name=CommentLikes,proto3" json:"CommentLikes,omitempty"`
}

func (x *ArticleComment) Reset() {
	*x = ArticleComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleComment) ProtoMessage() {}

func (x *ArticleComment) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleComment.ProtoReflect.Descriptor instead.
func (*ArticleComment) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{46}
}

func (x *ArticleComment) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *ArticleComment) GetParentCommentID() int64 {
	if x != nil {
		return x.ParentCommentID
	}
	return 0
}

func (x *ArticleComment) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *ArticleComment) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *ArticleComment) GetCommentReplyCount() int64 {
	if x != nil {
		return x.CommentReplyCount
	}
	return 0
}

func (x *ArticleComment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ArticleComment) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ArticleComment) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ArticleComment) GetUserProfileImg() string {
	if x != nil {
		return x.UserProfileImg
	}
	return ""
}

func (x *ArticleComment) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ArticleComment) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ArticleComment) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ArticleComment) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *ArticleComment) GetDeletedBy() string {
	if x != nil {
		return x.DeletedBy
	}
	return ""
}

func (x *ArticleComment) GetDeleteTime() int64 {
	if x != nil {
		return x.DeleteTime
	}
	return 0
}

func (x *ArticleComment) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ArticleComment) GetArticleTitle() string {
	if x != nil {
		return x.ArticleTitle
	}
	return ""
}

func (x *ArticleComment) GetOfficialType() int32 {
	if x != nil {
		return x.OfficialType
	}
	return 0
}

func (x *ArticleComment) GetOfficialName() string {
	if x != nil {
		return x.OfficialName
	}
	return ""
}

func (x *ArticleComment) GetLastLoginTime() string {
	if x != nil {
		return x.LastLoginTime
	}
	return ""
}

func (x *ArticleComment) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *ArticleComment) GetCoverPhoto() string {
	if x != nil {
		return x.CoverPhoto
	}
	return ""
}

func (x *ArticleComment) GetPostTime() int64 {
	if x != nil {
		return x.PostTime
	}
	return 0
}

func (x *ArticleComment) GetCommentLikes() int64 {
	if x != nil {
		return x.CommentLikes
	}
	return 0
}

type ArticleLike struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleID      int64  `protobuf:"varint,1,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	UserID         string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserName       string `protobuf:"bytes,3,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserProfileImg string `protobuf:"bytes,4,opt,name=UserProfileImg,proto3" json:"UserProfileImg,omitempty"`
	CreatedBy      string `protobuf:"bytes,5,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	CreateTime     int64  `protobuf:"varint,6,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdatedBy      string `protobuf:"bytes,7,opt,name=UpdatedBy,proto3" json:"UpdatedBy,omitempty"`
	UpdateTime     int64  `protobuf:"varint,8,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	DeletedBy      string `protobuf:"bytes,9,opt,name=DeletedBy,proto3" json:"DeletedBy,omitempty"`
	DeleteTime     int64  `protobuf:"varint,10,opt,name=DeleteTime,proto3" json:"DeleteTime,omitempty"`
	Status         int32  `protobuf:"varint,11,opt,name=Status,proto3" json:"Status,omitempty"`
	ArticleTitle   string `protobuf:"bytes,12,opt,name=ArticleTitle,proto3" json:"ArticleTitle,omitempty"`
	OfficialName   string `protobuf:"bytes,13,opt,name=OfficialName,proto3" json:"OfficialName,omitempty"`
	OfficialType   int32  `protobuf:"varint,14,opt,name=OfficialType,proto3" json:"OfficialType,omitempty"`
	LastLoginIp    string `protobuf:"bytes,15,opt,name=LastLoginIp,proto3" json:"LastLoginIp,omitempty"`
	LastLoginTime  string `protobuf:"bytes,16,opt,name=LastLoginTime,proto3" json:"LastLoginTime,omitempty"`
	CoverPhoto     string `protobuf:"bytes,17,opt,name=CoverPhoto,proto3" json:"CoverPhoto,omitempty"`
	PostTime       int64  `protobuf:"varint,18,opt,name=PostTime,proto3" json:"PostTime,omitempty"`
}

func (x *ArticleLike) Reset() {
	*x = ArticleLike{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleLike) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleLike) ProtoMessage() {}

func (x *ArticleLike) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleLike.ProtoReflect.Descriptor instead.
func (*ArticleLike) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{47}
}

func (x *ArticleLike) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *ArticleLike) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ArticleLike) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ArticleLike) GetUserProfileImg() string {
	if x != nil {
		return x.UserProfileImg
	}
	return ""
}

func (x *ArticleLike) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ArticleLike) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ArticleLike) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ArticleLike) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *ArticleLike) GetDeletedBy() string {
	if x != nil {
		return x.DeletedBy
	}
	return ""
}

func (x *ArticleLike) GetDeleteTime() int64 {
	if x != nil {
		return x.DeleteTime
	}
	return 0
}

func (x *ArticleLike) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ArticleLike) GetArticleTitle() string {
	if x != nil {
		return x.ArticleTitle
	}
	return ""
}

func (x *ArticleLike) GetOfficialName() string {
	if x != nil {
		return x.OfficialName
	}
	return ""
}

func (x *ArticleLike) GetOfficialType() int32 {
	if x != nil {
		return x.OfficialType
	}
	return 0
}

func (x *ArticleLike) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *ArticleLike) GetLastLoginTime() string {
	if x != nil {
		return x.LastLoginTime
	}
	return ""
}

func (x *ArticleLike) GetCoverPhoto() string {
	if x != nil {
		return x.CoverPhoto
	}
	return ""
}

func (x *ArticleLike) GetPostTime() int64 {
	if x != nil {
		return x.PostTime
	}
	return 0
}

type ArticleRepost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MomentId      string `protobuf:"bytes,1,opt,name=MomentId,proto3" json:"MomentId,omitempty"`
	ShareUser     string `protobuf:"bytes,2,opt,name=ShareUser,proto3" json:"ShareUser,omitempty"`
	OfficialType  int32  `protobuf:"varint,3,opt,name=OfficialType,proto3" json:"OfficialType,omitempty"`
	ArticleTitle  string `protobuf:"bytes,4,opt,name=ArticleTitle,proto3" json:"ArticleTitle,omitempty"`
	OriginalUser  string `protobuf:"bytes,5,opt,name=OriginalUser,proto3" json:"OriginalUser,omitempty"`
	CommentCounts int64  `protobuf:"varint,6,opt,name=CommentCounts,proto3" json:"CommentCounts,omitempty"`
	LikeCounts    int64  `protobuf:"varint,7,opt,name=LikeCounts,proto3" json:"LikeCounts,omitempty"`
	ShareTime     int64  `protobuf:"varint,8,opt,name=ShareTime,proto3" json:"ShareTime,omitempty"`
	LastLoginIp   string `protobuf:"bytes,9,opt,name=LastLoginIp,proto3" json:"LastLoginIp,omitempty"`
	Privacy       int32  `protobuf:"varint,10,opt,name=Privacy,proto3" json:"Privacy,omitempty"`
	CoverPhoto    string `protobuf:"bytes,11,opt,name=CoverPhoto,proto3" json:"CoverPhoto,omitempty"`
	DeletedBy     string `protobuf:"bytes,12,opt,name=DeletedBy,proto3" json:"DeletedBy,omitempty"`
	DeleteTime    int64  `protobuf:"varint,13,opt,name=DeleteTime,proto3" json:"DeleteTime,omitempty"`
	ArticleId     int64  `protobuf:"varint,14,opt,name=ArticleId,proto3" json:"ArticleId,omitempty"`
}

func (x *ArticleRepost) Reset() {
	*x = ArticleRepost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleRepost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleRepost) ProtoMessage() {}

func (x *ArticleRepost) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleRepost.ProtoReflect.Descriptor instead.
func (*ArticleRepost) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{48}
}

func (x *ArticleRepost) GetMomentId() string {
	if x != nil {
		return x.MomentId
	}
	return ""
}

func (x *ArticleRepost) GetShareUser() string {
	if x != nil {
		return x.ShareUser
	}
	return ""
}

func (x *ArticleRepost) GetOfficialType() int32 {
	if x != nil {
		return x.OfficialType
	}
	return 0
}

func (x *ArticleRepost) GetArticleTitle() string {
	if x != nil {
		return x.ArticleTitle
	}
	return ""
}

func (x *ArticleRepost) GetOriginalUser() string {
	if x != nil {
		return x.OriginalUser
	}
	return ""
}

func (x *ArticleRepost) GetCommentCounts() int64 {
	if x != nil {
		return x.CommentCounts
	}
	return 0
}

func (x *ArticleRepost) GetLikeCounts() int64 {
	if x != nil {
		return x.LikeCounts
	}
	return 0
}

func (x *ArticleRepost) GetShareTime() int64 {
	if x != nil {
		return x.ShareTime
	}
	return 0
}

func (x *ArticleRepost) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *ArticleRepost) GetPrivacy() int32 {
	if x != nil {
		return x.Privacy
	}
	return 0
}

func (x *ArticleRepost) GetCoverPhoto() string {
	if x != nil {
		return x.CoverPhoto
	}
	return ""
}

func (x *ArticleRepost) GetDeletedBy() string {
	if x != nil {
		return x.DeletedBy
	}
	return ""
}

func (x *ArticleRepost) GetDeleteTime() int64 {
	if x != nil {
		return x.DeleteTime
	}
	return 0
}

func (x *ArticleRepost) GetArticleId() int64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

type GetNewsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID     string                    `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Pagination      *sdk_ws.RequestPagination `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	OfficialAccount string                    `protobuf:"bytes,3,opt,name=OfficialAccount,proto3" json:"OfficialAccount,omitempty"`
	AccountType     int32                     `protobuf:"varint,4,opt,name=AccountType,proto3" json:"AccountType,omitempty"`
	Ip              string                    `protobuf:"bytes,5,opt,name=Ip,proto3" json:"Ip,omitempty"`
	TimeType        int32                     `protobuf:"varint,6,opt,name=TimeType,proto3" json:"TimeType,omitempty"`
	StartTime       string                    `protobuf:"bytes,7,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime         string                    `protobuf:"bytes,8,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Title           string                    `protobuf:"bytes,9,opt,name=Title,proto3" json:"Title,omitempty"`
	OrderBy         string                    `protobuf:"bytes,10,opt,name=OrderBy,proto3" json:"OrderBy,omitempty"`
}

func (x *GetNewsReq) Reset() {
	*x = GetNewsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsReq) ProtoMessage() {}

func (x *GetNewsReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsReq.ProtoReflect.Descriptor instead.
func (*GetNewsReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{49}
}

func (x *GetNewsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetNewsReq) GetPagination() *sdk_ws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetNewsReq) GetOfficialAccount() string {
	if x != nil {
		return x.OfficialAccount
	}
	return ""
}

func (x *GetNewsReq) GetAccountType() int32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *GetNewsReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GetNewsReq) GetTimeType() int32 {
	if x != nil {
		return x.TimeType
	}
	return 0
}

func (x *GetNewsReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetNewsReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetNewsReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetNewsReq) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetNewsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp   *CommonResponse            `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Articles     []*Article                 `protobuf:"bytes,2,rep,name=Articles,proto3" json:"Articles,omitempty"`
	Pagination   *sdk_ws.ResponsePagination `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	ArticlesNums int32                      `protobuf:"varint,4,opt,name=ArticlesNums,proto3" json:"ArticlesNums,omitempty"`
}

func (x *GetNewsResp) Reset() {
	*x = GetNewsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsResp) ProtoMessage() {}

func (x *GetNewsResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsResp.ProtoReflect.Descriptor instead.
func (*GetNewsResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{50}
}

func (x *GetNewsResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetNewsResp) GetArticles() []*Article {
	if x != nil {
		return x.Articles
	}
	return nil
}

func (x *GetNewsResp) GetPagination() *sdk_ws.ResponsePagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetNewsResp) GetArticlesNums() int32 {
	if x != nil {
		return x.ArticlesNums
	}
	return 0
}

type DeleteNewsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpUserId    string  `protobuf:"bytes,1,opt,name=OpUserId,proto3" json:"OpUserId,omitempty"`
	OperationID string  `protobuf:"bytes,2,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Articles    []int64 `protobuf:"varint,3,rep,packed,name=Articles,proto3" json:"Articles,omitempty"`
}

func (x *DeleteNewsReq) Reset() {
	*x = DeleteNewsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNewsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNewsReq) ProtoMessage() {}

func (x *DeleteNewsReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNewsReq.ProtoReflect.Descriptor instead.
func (*DeleteNewsReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{51}
}

func (x *DeleteNewsReq) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *DeleteNewsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *DeleteNewsReq) GetArticles() []int64 {
	if x != nil {
		return x.Articles
	}
	return nil
}

type DeleteNewsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *DeleteNewsResp) Reset() {
	*x = DeleteNewsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNewsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNewsResp) ProtoMessage() {}

func (x *DeleteNewsResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNewsResp.ProtoReflect.Descriptor instead.
func (*DeleteNewsResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteNewsResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type AlterNewsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	OpUserId    string `protobuf:"bytes,2,opt,name=OpUserId,proto3" json:"OpUserId,omitempty"`
	ArticleId   int64  `protobuf:"varint,3,opt,name=ArticleId,proto3" json:"ArticleId,omitempty"`
	Title       string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Content     string `protobuf:"bytes,5,opt,name=Content,proto3" json:"Content,omitempty"`
	TextContent string `protobuf:"bytes,6,opt,name=TextContent,proto3" json:"TextContent,omitempty"`
}

func (x *AlterNewsReq) Reset() {
	*x = AlterNewsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterNewsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterNewsReq) ProtoMessage() {}

func (x *AlterNewsReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterNewsReq.ProtoReflect.Descriptor instead.
func (*AlterNewsReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{53}
}

func (x *AlterNewsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *AlterNewsReq) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *AlterNewsReq) GetArticleId() int64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

func (x *AlterNewsReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AlterNewsReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AlterNewsReq) GetTextContent() string {
	if x != nil {
		return x.TextContent
	}
	return ""
}

type AlterNewsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *AlterNewsResp) Reset() {
	*x = AlterNewsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterNewsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterNewsResp) ProtoMessage() {}

func (x *AlterNewsResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterNewsResp.ProtoReflect.Descriptor instead.
func (*AlterNewsResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{54}
}

func (x *AlterNewsResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type ChangePrivacyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	OpUserId    string `protobuf:"bytes,2,opt,name=OpUserId,proto3" json:"OpUserId,omitempty"`
	ArticleId   int64  `protobuf:"varint,3,opt,name=ArticleId,proto3" json:"ArticleId,omitempty"`
	Privacy     int32  `protobuf:"varint,5,opt,name=Privacy,proto3" json:"Privacy,omitempty"`
}

func (x *ChangePrivacyReq) Reset() {
	*x = ChangePrivacyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePrivacyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePrivacyReq) ProtoMessage() {}

func (x *ChangePrivacyReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePrivacyReq.ProtoReflect.Descriptor instead.
func (*ChangePrivacyReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{55}
}

func (x *ChangePrivacyReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ChangePrivacyReq) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *ChangePrivacyReq) GetArticleId() int64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

func (x *ChangePrivacyReq) GetPrivacy() int32 {
	if x != nil {
		return x.Privacy
	}
	return 0
}

type ChangePrivacyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *ChangePrivacyResp) Reset() {
	*x = ChangePrivacyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePrivacyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePrivacyResp) ProtoMessage() {}

func (x *ChangePrivacyResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePrivacyResp.ProtoReflect.Descriptor instead.
func (*ChangePrivacyResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{56}
}

func (x *ChangePrivacyResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type GetNewsCommentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID     string                    `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Pagination      *sdk_ws.RequestPagination `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	OfficialAccount string                    `protobuf:"bytes,3,opt,name=OfficialAccount,proto3" json:"OfficialAccount,omitempty"`
	AccountType     int32                     `protobuf:"varint,4,opt,name=AccountType,proto3" json:"AccountType,omitempty"`
	Ip              string                    `protobuf:"bytes,5,opt,name=Ip,proto3" json:"Ip,omitempty"`
	TimeType        int32                     `protobuf:"varint,6,opt,name=TimeType,proto3" json:"TimeType,omitempty"`
	StartTime       string                    `protobuf:"bytes,7,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime         string                    `protobuf:"bytes,8,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Title           string                    `protobuf:"bytes,9,opt,name=Title,proto3" json:"Title,omitempty"`
	OrderBy         string                    `protobuf:"bytes,10,opt,name=OrderBy,proto3" json:"OrderBy,omitempty"`
	CommentUser     string                    `protobuf:"bytes,11,opt,name=CommentUser,proto3" json:"CommentUser,omitempty"`
	CommentKey      string                    `protobuf:"bytes,12,opt,name=CommentKey,proto3" json:"CommentKey,omitempty"`
	ArticleId       int64                     `protobuf:"varint,13,opt,name=ArticleId,proto3" json:"ArticleId,omitempty"`
}

func (x *GetNewsCommentsReq) Reset() {
	*x = GetNewsCommentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsCommentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsCommentsReq) ProtoMessage() {}

func (x *GetNewsCommentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsCommentsReq.ProtoReflect.Descriptor instead.
func (*GetNewsCommentsReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{57}
}

func (x *GetNewsCommentsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetNewsCommentsReq) GetPagination() *sdk_ws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetNewsCommentsReq) GetOfficialAccount() string {
	if x != nil {
		return x.OfficialAccount
	}
	return ""
}

func (x *GetNewsCommentsReq) GetAccountType() int32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *GetNewsCommentsReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GetNewsCommentsReq) GetTimeType() int32 {
	if x != nil {
		return x.TimeType
	}
	return 0
}

func (x *GetNewsCommentsReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetNewsCommentsReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetNewsCommentsReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetNewsCommentsReq) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetNewsCommentsReq) GetCommentUser() string {
	if x != nil {
		return x.CommentUser
	}
	return ""
}

func (x *GetNewsCommentsReq) GetCommentKey() string {
	if x != nil {
		return x.CommentKey
	}
	return ""
}

func (x *GetNewsCommentsReq) GetArticleId() int64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

type GetNewsCommentsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp   *CommonResponse            `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Comments     []*ArticleComment          `protobuf:"bytes,2,rep,name=Comments,proto3" json:"Comments,omitempty"`
	Pagination   *sdk_ws.ResponsePagination `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	CommentsNums int32                      `protobuf:"varint,4,opt,name=CommentsNums,proto3" json:"CommentsNums,omitempty"`
}

func (x *GetNewsCommentsResp) Reset() {
	*x = GetNewsCommentsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsCommentsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsCommentsResp) ProtoMessage() {}

func (x *GetNewsCommentsResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsCommentsResp.ProtoReflect.Descriptor instead.
func (*GetNewsCommentsResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{58}
}

func (x *GetNewsCommentsResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetNewsCommentsResp) GetComments() []*ArticleComment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *GetNewsCommentsResp) GetPagination() *sdk_ws.ResponsePagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetNewsCommentsResp) GetCommentsNums() int32 {
	if x != nil {
		return x.CommentsNums
	}
	return 0
}

type RemoveNewsCommentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpUserId    string   `protobuf:"bytes,1,opt,name=OpUserId,proto3" json:"OpUserId,omitempty"`
	OperationID string   `protobuf:"bytes,2,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Comments    []int64  `protobuf:"varint,3,rep,packed,name=Comments,proto3" json:"Comments,omitempty"`
	Parents     []string `protobuf:"bytes,4,rep,name=Parents,proto3" json:"Parents,omitempty"`
	Articles    []int64  `protobuf:"varint,5,rep,packed,name=Articles,proto3" json:"Articles,omitempty"`
}

func (x *RemoveNewsCommentsReq) Reset() {
	*x = RemoveNewsCommentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNewsCommentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNewsCommentsReq) ProtoMessage() {}

func (x *RemoveNewsCommentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNewsCommentsReq.ProtoReflect.Descriptor instead.
func (*RemoveNewsCommentsReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{59}
}

func (x *RemoveNewsCommentsReq) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *RemoveNewsCommentsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *RemoveNewsCommentsReq) GetComments() []int64 {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *RemoveNewsCommentsReq) GetParents() []string {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *RemoveNewsCommentsReq) GetArticles() []int64 {
	if x != nil {
		return x.Articles
	}
	return nil
}

type RemoveNewsCommentsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *RemoveNewsCommentsResp) Reset() {
	*x = RemoveNewsCommentsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNewsCommentsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNewsCommentsResp) ProtoMessage() {}

func (x *RemoveNewsCommentsResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNewsCommentsResp.ProtoReflect.Descriptor instead.
func (*RemoveNewsCommentsResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{60}
}

func (x *RemoveNewsCommentsResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type AlterNewsCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpUserId    string `protobuf:"bytes,1,opt,name=OpUserId,proto3" json:"OpUserId,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	CommentId   string `protobuf:"bytes,4,opt,name=CommentId,proto3" json:"CommentId,omitempty"`
	Content     string `protobuf:"bytes,5,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *AlterNewsCommentReq) Reset() {
	*x = AlterNewsCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterNewsCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterNewsCommentReq) ProtoMessage() {}

func (x *AlterNewsCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterNewsCommentReq.ProtoReflect.Descriptor instead.
func (*AlterNewsCommentReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{61}
}

func (x *AlterNewsCommentReq) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *AlterNewsCommentReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *AlterNewsCommentReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AlterNewsCommentReq) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *AlterNewsCommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type AlterNewsCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *AlterNewsCommentResp) Reset() {
	*x = AlterNewsCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterNewsCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterNewsCommentResp) ProtoMessage() {}

func (x *AlterNewsCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterNewsCommentResp.ProtoReflect.Descriptor instead.
func (*AlterNewsCommentResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{62}
}

func (x *AlterNewsCommentResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type ChangeNewsCommentStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpUserId    string `protobuf:"bytes,1,opt,name=OpUserId,proto3" json:"OpUserId,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	CommentId   int64  `protobuf:"varint,3,opt,name=CommentId,proto3" json:"CommentId,omitempty"`
	Status      int32  `protobuf:"varint,4,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ChangeNewsCommentStatusReq) Reset() {
	*x = ChangeNewsCommentStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeNewsCommentStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeNewsCommentStatusReq) ProtoMessage() {}

func (x *ChangeNewsCommentStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeNewsCommentStatusReq.ProtoReflect.Descriptor instead.
func (*ChangeNewsCommentStatusReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{63}
}

func (x *ChangeNewsCommentStatusReq) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *ChangeNewsCommentStatusReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ChangeNewsCommentStatusReq) GetCommentId() int64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *ChangeNewsCommentStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ChangeNewsCommentStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *ChangeNewsCommentStatusResp) Reset() {
	*x = ChangeNewsCommentStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeNewsCommentStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeNewsCommentStatusResp) ProtoMessage() {}

func (x *ChangeNewsCommentStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeNewsCommentStatusResp.ProtoReflect.Descriptor instead.
func (*ChangeNewsCommentStatusResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{64}
}

func (x *ChangeNewsCommentStatusResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type GetNewsLikesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID     string                    `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Pagination      *sdk_ws.RequestPagination `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	OfficialAccount string                    `protobuf:"bytes,3,opt,name=OfficialAccount,proto3" json:"OfficialAccount,omitempty"`
	AccountType     int32                     `protobuf:"varint,4,opt,name=AccountType,proto3" json:"AccountType,omitempty"`
	Ip              string                    `protobuf:"bytes,5,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Title           string                    `protobuf:"bytes,6,opt,name=Title,proto3" json:"Title,omitempty"`
	TimeType        int32                     `protobuf:"varint,7,opt,name=TimeType,proto3" json:"TimeType,omitempty"`
	StartTime       string                    `protobuf:"bytes,8,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime         string                    `protobuf:"bytes,9,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	LikeUser        string                    `protobuf:"bytes,10,opt,name=LikeUser,proto3" json:"LikeUser,omitempty"`
	OrderBy         string                    `protobuf:"bytes,11,opt,name=OrderBy,proto3" json:"OrderBy,omitempty"`
	ArticleId       int64                     `protobuf:"varint,12,opt,name=ArticleId,proto3" json:"ArticleId,omitempty"`
}

func (x *GetNewsLikesReq) Reset() {
	*x = GetNewsLikesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsLikesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsLikesReq) ProtoMessage() {}

func (x *GetNewsLikesReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsLikesReq.ProtoReflect.Descriptor instead.
func (*GetNewsLikesReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{65}
}

func (x *GetNewsLikesReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetNewsLikesReq) GetPagination() *sdk_ws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetNewsLikesReq) GetOfficialAccount() string {
	if x != nil {
		return x.OfficialAccount
	}
	return ""
}

func (x *GetNewsLikesReq) GetAccountType() int32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *GetNewsLikesReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GetNewsLikesReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetNewsLikesReq) GetTimeType() int32 {
	if x != nil {
		return x.TimeType
	}
	return 0
}

func (x *GetNewsLikesReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetNewsLikesReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetNewsLikesReq) GetLikeUser() string {
	if x != nil {
		return x.LikeUser
	}
	return ""
}

func (x *GetNewsLikesReq) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetNewsLikesReq) GetArticleId() int64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

type GetNewsLikesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse            `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Likes      []*ArticleLike             `protobuf:"bytes,2,rep,name=Likes,proto3" json:"Likes,omitempty"`
	Pagination *sdk_ws.ResponsePagination `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	LikeNums   int32                      `protobuf:"varint,4,opt,name=LikeNums,proto3" json:"LikeNums,omitempty"`
}

func (x *GetNewsLikesResp) Reset() {
	*x = GetNewsLikesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsLikesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsLikesResp) ProtoMessage() {}

func (x *GetNewsLikesResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsLikesResp.ProtoReflect.Descriptor instead.
func (*GetNewsLikesResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{66}
}

func (x *GetNewsLikesResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetNewsLikesResp) GetLikes() []*ArticleLike {
	if x != nil {
		return x.Likes
	}
	return nil
}

func (x *GetNewsLikesResp) GetPagination() *sdk_ws.ResponsePagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetNewsLikesResp) GetLikeNums() int32 {
	if x != nil {
		return x.LikeNums
	}
	return 0
}

type RemoveNewsLikesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpUserId    string   `protobuf:"bytes,1,opt,name=OpUserId,proto3" json:"OpUserId,omitempty"`
	OperationID string   `protobuf:"bytes,2,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Articles    []int64  `protobuf:"varint,3,rep,packed,name=Articles,proto3" json:"Articles,omitempty"`
	UserIds     []string `protobuf:"bytes,4,rep,name=UserIds,proto3" json:"UserIds,omitempty"`
}

func (x *RemoveNewsLikesReq) Reset() {
	*x = RemoveNewsLikesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNewsLikesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNewsLikesReq) ProtoMessage() {}

func (x *RemoveNewsLikesReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNewsLikesReq.ProtoReflect.Descriptor instead.
func (*RemoveNewsLikesReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{67}
}

func (x *RemoveNewsLikesReq) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *RemoveNewsLikesReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *RemoveNewsLikesReq) GetArticles() []int64 {
	if x != nil {
		return x.Articles
	}
	return nil
}

func (x *RemoveNewsLikesReq) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type RemoveNewsLikesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *RemoveNewsLikesResp) Reset() {
	*x = RemoveNewsLikesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNewsLikesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNewsLikesResp) ProtoMessage() {}

func (x *RemoveNewsLikesResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNewsLikesResp.ProtoReflect.Descriptor instead.
func (*RemoveNewsLikesResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{68}
}

func (x *RemoveNewsLikesResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type ChangeNewsLikeStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	ArticleId   int64  `protobuf:"varint,2,opt,name=ArticleId,proto3" json:"ArticleId,omitempty"`
	UserId      string `protobuf:"bytes,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Status      int32  `protobuf:"varint,4,opt,name=Status,proto3" json:"Status,omitempty"`
	OpUserId    string `protobuf:"bytes,5,opt,name=OpUserId,proto3" json:"OpUserId,omitempty"`
}

func (x *ChangeNewsLikeStatusReq) Reset() {
	*x = ChangeNewsLikeStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeNewsLikeStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeNewsLikeStatusReq) ProtoMessage() {}

func (x *ChangeNewsLikeStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeNewsLikeStatusReq.ProtoReflect.Descriptor instead.
func (*ChangeNewsLikeStatusReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{69}
}

func (x *ChangeNewsLikeStatusReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ChangeNewsLikeStatusReq) GetArticleId() int64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

func (x *ChangeNewsLikeStatusReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ChangeNewsLikeStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChangeNewsLikeStatusReq) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

type ChangeNewsLikeStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
}

func (x *ChangeNewsLikeStatusResp) Reset() {
	*x = ChangeNewsLikeStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeNewsLikeStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeNewsLikeStatusResp) ProtoMessage() {}

func (x *ChangeNewsLikeStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeNewsLikeStatusResp.ProtoReflect.Descriptor instead.
func (*ChangeNewsLikeStatusResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{70}
}

func (x *ChangeNewsLikeStatusResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

type GetRepostArticlesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID  string                    `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Pagination   *sdk_ws.RequestPagination `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	RepostUser   string                    `protobuf:"bytes,3,opt,name=RepostUser,proto3" json:"RepostUser,omitempty"`
	AccountType  int32                     `protobuf:"varint,4,opt,name=AccountType,proto3" json:"AccountType,omitempty"`
	Ip           string                    `protobuf:"bytes,5,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Title        string                    `protobuf:"bytes,6,opt,name=Title,proto3" json:"Title,omitempty"`
	TimeType     int32                     `protobuf:"varint,7,opt,name=TimeType,proto3" json:"TimeType,omitempty"`
	StartTime    string                    `protobuf:"bytes,8,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime      string                    `protobuf:"bytes,9,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	OrderBy      string                    `protobuf:"bytes,10,opt,name=OrderBy,proto3" json:"OrderBy,omitempty"`
	OriginalUser string                    `protobuf:"bytes,11,opt,name=OriginalUser,proto3" json:"OriginalUser,omitempty"`
	ArticleId    int64                     `protobuf:"varint,12,opt,name=ArticleId,proto3" json:"ArticleId,omitempty"`
}

func (x *GetRepostArticlesReq) Reset() {
	*x = GetRepostArticlesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepostArticlesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepostArticlesReq) ProtoMessage() {}

func (x *GetRepostArticlesReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepostArticlesReq.ProtoReflect.Descriptor instead.
func (*GetRepostArticlesReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{71}
}

func (x *GetRepostArticlesReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetRepostArticlesReq) GetPagination() *sdk_ws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetRepostArticlesReq) GetRepostUser() string {
	if x != nil {
		return x.RepostUser
	}
	return ""
}

func (x *GetRepostArticlesReq) GetAccountType() int32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *GetRepostArticlesReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GetRepostArticlesReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetRepostArticlesReq) GetTimeType() int32 {
	if x != nil {
		return x.TimeType
	}
	return 0
}

func (x *GetRepostArticlesReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetRepostArticlesReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetRepostArticlesReq) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetRepostArticlesReq) GetOriginalUser() string {
	if x != nil {
		return x.OriginalUser
	}
	return ""
}

func (x *GetRepostArticlesReq) GetArticleId() int64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

type GetRepostArticlesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse            `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Reposts    []*ArticleRepost           `protobuf:"bytes,2,rep,name=reposts,proto3" json:"reposts,omitempty"`
	Pagination *sdk_ws.ResponsePagination `protobuf:"bytes,3,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	RepostNums int32                      `protobuf:"varint,4,opt,name=RepostNums,proto3" json:"RepostNums,omitempty"`
}

func (x *GetRepostArticlesResp) Reset() {
	*x = GetRepostArticlesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepostArticlesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepostArticlesResp) ProtoMessage() {}

func (x *GetRepostArticlesResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepostArticlesResp.ProtoReflect.Descriptor instead.
func (*GetRepostArticlesResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{72}
}

func (x *GetRepostArticlesResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetRepostArticlesResp) GetReposts() []*ArticleRepost {
	if x != nil {
		return x.Reposts
	}
	return nil
}

func (x *GetRepostArticlesResp) GetPagination() *sdk_ws.ResponsePagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetRepostArticlesResp) GetRepostNums() int32 {
	if x != nil {
		return x.RepostNums
	}
	return 0
}

type CreateArticleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	CoverPhoto  string `protobuf:"bytes,3,opt,name=coverPhoto,proto3" json:"coverPhoto,omitempty"`
	Title       string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	TextContent string `protobuf:"bytes,5,opt,name=TextContent,proto3" json:"TextContent,omitempty"`
	Content     string `protobuf:"bytes,6,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *CreateArticleReq) Reset() {
	*x = CreateArticleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateArticleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArticleReq) ProtoMessage() {}

func (x *CreateArticleReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArticleReq.ProtoReflect.Descriptor instead.
func (*CreateArticleReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{73}
}

func (x *CreateArticleReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *CreateArticleReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateArticleReq) GetCoverPhoto() string {
	if x != nil {
		return x.CoverPhoto
	}
	return ""
}

func (x *CreateArticleReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateArticleReq) GetTextContent() string {
	if x != nil {
		return x.TextContent
	}
	return ""
}

func (x *CreateArticleReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type UpdateArticleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	ArticleID   int64  `protobuf:"varint,2,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	CoverPhoto  string `protobuf:"bytes,4,opt,name=coverPhoto,proto3" json:"coverPhoto,omitempty"`
	Title       string `protobuf:"bytes,5,opt,name=Title,proto3" json:"Title,omitempty"`
	TextContent string `protobuf:"bytes,6,opt,name=TextContent,proto3" json:"TextContent,omitempty"`
	Content     string `protobuf:"bytes,7,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *UpdateArticleReq) Reset() {
	*x = UpdateArticleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateArticleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArticleReq) ProtoMessage() {}

func (x *UpdateArticleReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArticleReq.ProtoReflect.Descriptor instead.
func (*UpdateArticleReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{74}
}

func (x *UpdateArticleReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *UpdateArticleReq) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *UpdateArticleReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateArticleReq) GetCoverPhoto() string {
	if x != nil {
		return x.CoverPhoto
	}
	return ""
}

func (x *UpdateArticleReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateArticleReq) GetTextContent() string {
	if x != nil {
		return x.TextContent
	}
	return ""
}

func (x *UpdateArticleReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type DeleteArticleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	ArticleID   int64  `protobuf:"varint,2,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *DeleteArticleReq) Reset() {
	*x = DeleteArticleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArticleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArticleReq) ProtoMessage() {}

func (x *DeleteArticleReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArticleReq.ProtoReflect.Descriptor instead.
func (*DeleteArticleReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{75}
}

func (x *DeleteArticleReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *DeleteArticleReq) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *DeleteArticleReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type ListOfficialArticlesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID   string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserID        string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	MinCreateTime int64  `protobuf:"varint,3,opt,name=MinCreateTime,proto3" json:"MinCreateTime,omitempty"`
	Offset        int32  `protobuf:"varint,4,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit         int32  `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *ListOfficialArticlesReq) Reset() {
	*x = ListOfficialArticlesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfficialArticlesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfficialArticlesReq) ProtoMessage() {}

func (x *ListOfficialArticlesReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfficialArticlesReq.ProtoReflect.Descriptor instead.
func (*ListOfficialArticlesReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{76}
}

func (x *ListOfficialArticlesReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ListOfficialArticlesReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ListOfficialArticlesReq) GetMinCreateTime() int64 {
	if x != nil {
		return x.MinCreateTime
	}
	return 0
}

func (x *ListOfficialArticlesReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListOfficialArticlesReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ArticleSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleID        int64  `protobuf:"varint,1,opt,name=articleID,proto3" json:"articleID,omitempty"`
	Title            string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	CoverPhoto       string `protobuf:"bytes,3,opt,name=coverPhoto,proto3" json:"coverPhoto,omitempty"`
	TextContent      string `protobuf:"bytes,4,opt,name=textContent,proto3" json:"textContent,omitempty"`
	ReadCounts       int64  `protobuf:"varint,5,opt,name=readCounts,proto3" json:"readCounts,omitempty"`
	UniqueReadCounts int64  `protobuf:"varint,6,opt,name=uniqueReadCounts,proto3" json:"uniqueReadCounts,omitempty"`
	LikeCounts       int64  `protobuf:"varint,7,opt,name=likeCounts,proto3" json:"likeCounts,omitempty"`
	CommentCounts    int64  `protobuf:"varint,8,opt,name=commentCounts,proto3" json:"commentCounts,omitempty"`
	RepostCounts     int64  `protobuf:"varint,9,opt,name=repostCounts,proto3" json:"repostCounts,omitempty"`
	CreateTime       int64  `protobuf:"varint,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ArticleSummary) Reset() {
	*x = ArticleSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleSummary) ProtoMessage() {}

func (x *ArticleSummary) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleSummary.ProtoReflect.Descriptor instead.
func (*ArticleSummary) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{77}
}

func (x *ArticleSummary) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *ArticleSummary) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ArticleSummary) GetCoverPhoto() string {
	if x != nil {
		return x.CoverPhoto
	}
	return ""
}

func (x *ArticleSummary) GetTextContent() string {
	if x != nil {
		return x.TextContent
	}
	return ""
}

func (x *ArticleSummary) GetReadCounts() int64 {
	if x != nil {
		return x.ReadCounts
	}
	return 0
}

func (x *ArticleSummary) GetUniqueReadCounts() int64 {
	if x != nil {
		return x.UniqueReadCounts
	}
	return 0
}

func (x *ArticleSummary) GetLikeCounts() int64 {
	if x != nil {
		return x.LikeCounts
	}
	return 0
}

func (x *ArticleSummary) GetCommentCounts() int64 {
	if x != nil {
		return x.CommentCounts
	}
	return 0
}

func (x *ArticleSummary) GetRepostCounts() int64 {
	if x != nil {
		return x.RepostCounts
	}
	return 0
}

func (x *ArticleSummary) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListOfficialArticlesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse   `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
	Count      int64             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Articles   []*ArticleSummary `protobuf:"bytes,3,rep,name=articles,proto3" json:"articles,omitempty"`
}

func (x *ListOfficialArticlesResp) Reset() {
	*x = ListOfficialArticlesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfficialArticlesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfficialArticlesResp) ProtoMessage() {}

func (x *ListOfficialArticlesResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfficialArticlesResp.ProtoReflect.Descriptor instead.
func (*ListOfficialArticlesResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{78}
}

func (x *ListOfficialArticlesResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *ListOfficialArticlesResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListOfficialArticlesResp) GetArticles() []*ArticleSummary {
	if x != nil {
		return x.Articles
	}
	return nil
}

type GetOfficialArticleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	ArticleID   int64  `protobuf:"varint,2,opt,name=ArticleID,proto3" json:"ArticleID,omitempty"`
}

func (x *GetOfficialArticleReq) Reset() {
	*x = GetOfficialArticleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfficialArticleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfficialArticleReq) ProtoMessage() {}

func (x *GetOfficialArticleReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfficialArticleReq.ProtoReflect.Descriptor instead.
func (*GetOfficialArticleReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{79}
}

func (x *GetOfficialArticleReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetOfficialArticleReq) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

type GetOfficialArticleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Article    *Article        `protobuf:"bytes,2,opt,name=article,proto3" json:"article,omitempty"`
}

func (x *GetOfficialArticleResp) Reset() {
	*x = GetOfficialArticleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfficialArticleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfficialArticleResp) ProtoMessage() {}

func (x *GetOfficialArticleResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfficialArticleResp.ProtoReflect.Descriptor instead.
func (*GetOfficialArticleResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{80}
}

func (x *GetOfficialArticleResp) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetOfficialArticleResp) GetArticle() *Article {
	if x != nil {
		return x.Article
	}
	return nil
}

type ListSelfOfficialFollowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID   string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserID        string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	MinFollowTime int64  `protobuf:"varint,3,opt,name=MinFollowTime,proto3" json:"MinFollowTime,omitempty"`
	MinBlockTime  int64  `protobuf:"varint,4,opt,name=MinBlockTime,proto3" json:"MinBlockTime,omitempty"`
	BlockFilter   *bool  `protobuf:"varint,5,opt,name=blockFilter,proto3,oneof" json:"blockFilter,omitempty"`
	OrderBy       int32  `protobuf:"varint,6,opt,name=OrderBy,proto3" json:"OrderBy,omitempty"`
	Offset        int32  `protobuf:"varint,7,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit         int32  `protobuf:"varint,8,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *ListSelfOfficialFollowsRequest) Reset() {
	*x = ListSelfOfficialFollowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfOfficialFollowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfOfficialFollowsRequest) ProtoMessage() {}

func (x *ListSelfOfficialFollowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfOfficialFollowsRequest.ProtoReflect.Descriptor instead.
func (*ListSelfOfficialFollowsRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{81}
}

func (x *ListSelfOfficialFollowsRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ListSelfOfficialFollowsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ListSelfOfficialFollowsRequest) GetMinFollowTime() int64 {
	if x != nil {
		return x.MinFollowTime
	}
	return 0
}

func (x *ListSelfOfficialFollowsRequest) GetMinBlockTime() int64 {
	if x != nil {
		return x.MinBlockTime
	}
	return 0
}

func (x *ListSelfOfficialFollowsRequest) GetBlockFilter() bool {
	if x != nil && x.BlockFilter != nil {
		return *x.BlockFilter
	}
	return false
}

func (x *ListSelfOfficialFollowsRequest) GetOrderBy() int32 {
	if x != nil {
		return x.OrderBy
	}
	return 0
}

func (x *ListSelfOfficialFollowsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListSelfOfficialFollowsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type OfficialFollowEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	FaceURL    string `protobuf:"bytes,2,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	Nickname   string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Gender     int32  `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
	FollowTime int64  `protobuf:"varint,5,opt,name=followTime,proto3" json:"followTime,omitempty"`
	BlockTime  int64  `protobuf:"varint,6,opt,name=blockTime,proto3" json:"blockTime,omitempty"`
}

func (x *OfficialFollowEntry) Reset() {
	*x = OfficialFollowEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialFollowEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialFollowEntry) ProtoMessage() {}

func (x *OfficialFollowEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialFollowEntry.ProtoReflect.Descriptor instead.
func (*OfficialFollowEntry) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{82}
}

func (x *OfficialFollowEntry) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *OfficialFollowEntry) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *OfficialFollowEntry) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *OfficialFollowEntry) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *OfficialFollowEntry) GetFollowTime() int64 {
	if x != nil {
		return x.FollowTime
	}
	return 0
}

func (x *OfficialFollowEntry) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

type ListSelfOfficialFollowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse        `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Count      int64                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Follows    []*OfficialFollowEntry `protobuf:"bytes,3,rep,name=follows,proto3" json:"follows,omitempty"`
}

func (x *ListSelfOfficialFollowsResponse) Reset() {
	*x = ListSelfOfficialFollowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfOfficialFollowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfOfficialFollowsResponse) ProtoMessage() {}

func (x *ListSelfOfficialFollowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfOfficialFollowsResponse.ProtoReflect.Descriptor instead.
func (*ListSelfOfficialFollowsResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{83}
}

func (x *ListSelfOfficialFollowsResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *ListSelfOfficialFollowsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListSelfOfficialFollowsResponse) GetFollows() []*OfficialFollowEntry {
	if x != nil {
		return x.Follows
	}
	return nil
}

type ListArticleLikesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID   string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	ArticleID     int64  `protobuf:"varint,2,opt,name=articleID,proto3" json:"articleID,omitempty"`
	Keyword       string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	MinCreateTime int64  `protobuf:"varint,4,opt,name=minCreateTime,proto3" json:"minCreateTime,omitempty"`
	Offset        int32  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int32  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListArticleLikesRequest) Reset() {
	*x = ListArticleLikesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArticleLikesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArticleLikesRequest) ProtoMessage() {}

func (x *ListArticleLikesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArticleLikesRequest.ProtoReflect.Descriptor instead.
func (*ListArticleLikesRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{84}
}

func (x *ListArticleLikesRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ListArticleLikesRequest) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *ListArticleLikesRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListArticleLikesRequest) GetMinCreateTime() int64 {
	if x != nil {
		return x.MinCreateTime
	}
	return 0
}

func (x *ListArticleLikesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListArticleLikesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ArticleLikeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Nickname   string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FaceURL    string `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	Gender     int32  `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ArticleLikeEntry) Reset() {
	*x = ArticleLikeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleLikeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleLikeEntry) ProtoMessage() {}

func (x *ArticleLikeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleLikeEntry.ProtoReflect.Descriptor instead.
func (*ArticleLikeEntry) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{85}
}

func (x *ArticleLikeEntry) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ArticleLikeEntry) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ArticleLikeEntry) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *ArticleLikeEntry) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *ArticleLikeEntry) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListArticleLikesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse     `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Count      int64               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Likes      []*ArticleLikeEntry `protobuf:"bytes,3,rep,name=likes,proto3" json:"likes,omitempty"`
}

func (x *ListArticleLikesResponse) Reset() {
	*x = ListArticleLikesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArticleLikesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArticleLikesResponse) ProtoMessage() {}

func (x *ListArticleLikesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArticleLikesResponse.ProtoReflect.Descriptor instead.
func (*ListArticleLikesResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{86}
}

func (x *ListArticleLikesResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *ListArticleLikesResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListArticleLikesResponse) GetLikes() []*ArticleLikeEntry {
	if x != nil {
		return x.Likes
	}
	return nil
}

type ListArticleCommentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	ArticleID   int64  `protobuf:"varint,2,opt,name=articleID,proto3" json:"articleID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Offset      int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	ReplyLimit  int32  `protobuf:"varint,6,opt,name=replyLimit,proto3" json:"replyLimit,omitempty"`
}

func (x *ListArticleCommentsRequest) Reset() {
	*x = ListArticleCommentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArticleCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArticleCommentsRequest) ProtoMessage() {}

func (x *ListArticleCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArticleCommentsRequest.ProtoReflect.Descriptor instead.
func (*ListArticleCommentsRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{87}
}

func (x *ListArticleCommentsRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ListArticleCommentsRequest) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *ListArticleCommentsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ListArticleCommentsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListArticleCommentsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListArticleCommentsRequest) GetReplyLimit() int32 {
	if x != nil {
		return x.ReplyLimit
	}
	return 0
}

type CommentEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID             int64  `protobuf:"varint,1,opt,name=CommentID,proto3" json:"CommentID,omitempty"`
	ParentCommentID       int64  `protobuf:"varint,2,opt,name=ParentCommentID,proto3" json:"ParentCommentID,omitempty"`
	UserID                string `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserNickname          string `protobuf:"bytes,4,opt,name=UserNickname,proto3" json:"UserNickname,omitempty"`
	UserFaceURL           string `protobuf:"bytes,5,opt,name=UserFaceURL,proto3" json:"UserFaceURL,omitempty"`
	OfficialID            int64  `protobuf:"varint,6,opt,name=OfficialID,proto3" json:"OfficialID,omitempty"`
	OfficialNickname      string `protobuf:"bytes,7,opt,name=OfficialNickname,proto3" json:"OfficialNickname,omitempty"`
	OfficialFaceURL       string `protobuf:"bytes,8,opt,name=OfficialFaceURL,proto3" json:"OfficialFaceURL,omitempty"`
	ReplyCommentID        int64  `protobuf:"varint,9,opt,name=ReplyCommentID,proto3" json:"ReplyCommentID,omitempty"`
	ReplyUserID           string `protobuf:"bytes,10,opt,name=ReplyUserID,proto3" json:"ReplyUserID,omitempty"`
	ReplyUserNickname     string `protobuf:"bytes,11,opt,name=ReplyUserNickname,proto3" json:"ReplyUserNickname,omitempty"`
	ReplyUserFaceURL      string `protobuf:"bytes,12,opt,name=ReplyUserFaceURL,proto3" json:"ReplyUserFaceURL,omitempty"`
	ReplyOfficialID       int64  `protobuf:"varint,13,opt,name=ReplyOfficialID,proto3" json:"ReplyOfficialID,omitempty"`
	ReplyOfficialNickname string `protobuf:"bytes,14,opt,name=ReplyOfficialNickname,proto3" json:"ReplyOfficialNickname,omitempty"`
	ReplyOfficialFaceURL  string `protobuf:"bytes,15,opt,name=ReplyOfficialFaceURL,proto3" json:"ReplyOfficialFaceURL,omitempty"`
	ReplyCounts           int64  `protobuf:"varint,16,opt,name=ReplyCounts,proto3" json:"ReplyCounts,omitempty"`
	LikeCounts            int64  `protobuf:"varint,17,opt,name=LikeCounts,proto3" json:"LikeCounts,omitempty"`
	Content               string `protobuf:"bytes,18,opt,name=Content,proto3" json:"Content,omitempty"`
	CreateTime            int64  `protobuf:"varint,19,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	LikeTime              int64  `protobuf:"varint,20,opt,name=LikeTime,proto3" json:"LikeTime,omitempty"`
	Status                int32  `protobuf:"varint,21,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *CommentEntry) Reset() {
	*x = CommentEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentEntry) ProtoMessage() {}

func (x *CommentEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentEntry.ProtoReflect.Descriptor instead.
func (*CommentEntry) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{88}
}

func (x *CommentEntry) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *CommentEntry) GetParentCommentID() int64 {
	if x != nil {
		return x.ParentCommentID
	}
	return 0
}

func (x *CommentEntry) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CommentEntry) GetUserNickname() string {
	if x != nil {
		return x.UserNickname
	}
	return ""
}

func (x *CommentEntry) GetUserFaceURL() string {
	if x != nil {
		return x.UserFaceURL
	}
	return ""
}

func (x *CommentEntry) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *CommentEntry) GetOfficialNickname() string {
	if x != nil {
		return x.OfficialNickname
	}
	return ""
}

func (x *CommentEntry) GetOfficialFaceURL() string {
	if x != nil {
		return x.OfficialFaceURL
	}
	return ""
}

func (x *CommentEntry) GetReplyCommentID() int64 {
	if x != nil {
		return x.ReplyCommentID
	}
	return 0
}

func (x *CommentEntry) GetReplyUserID() string {
	if x != nil {
		return x.ReplyUserID
	}
	return ""
}

func (x *CommentEntry) GetReplyUserNickname() string {
	if x != nil {
		return x.ReplyUserNickname
	}
	return ""
}

func (x *CommentEntry) GetReplyUserFaceURL() string {
	if x != nil {
		return x.ReplyUserFaceURL
	}
	return ""
}

func (x *CommentEntry) GetReplyOfficialID() int64 {
	if x != nil {
		return x.ReplyOfficialID
	}
	return 0
}

func (x *CommentEntry) GetReplyOfficialNickname() string {
	if x != nil {
		return x.ReplyOfficialNickname
	}
	return ""
}

func (x *CommentEntry) GetReplyOfficialFaceURL() string {
	if x != nil {
		return x.ReplyOfficialFaceURL
	}
	return ""
}

func (x *CommentEntry) GetReplyCounts() int64 {
	if x != nil {
		return x.ReplyCounts
	}
	return 0
}

func (x *CommentEntry) GetLikeCounts() int64 {
	if x != nil {
		return x.LikeCounts
	}
	return 0
}

func (x *CommentEntry) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentEntry) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CommentEntry) GetLikeTime() int64 {
	if x != nil {
		return x.LikeTime
	}
	return 0
}

func (x *CommentEntry) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ListArticleCommentRepliesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Replies    []*CommentEntry `protobuf:"bytes,2,rep,name=replies,proto3" json:"replies,omitempty"`
	Count      int64           `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ListArticleCommentRepliesResponse) Reset() {
	*x = ListArticleCommentRepliesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArticleCommentRepliesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArticleCommentRepliesResponse) ProtoMessage() {}

func (x *ListArticleCommentRepliesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArticleCommentRepliesResponse.ProtoReflect.Descriptor instead.
func (*ListArticleCommentRepliesResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{89}
}

func (x *ListArticleCommentRepliesResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *ListArticleCommentRepliesResponse) GetReplies() []*CommentEntry {
	if x != nil {
		return x.Replies
	}
	return nil
}

func (x *ListArticleCommentRepliesResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ArticleCommentEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment *CommentEntry                      `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	Replies *ListArticleCommentRepliesResponse `protobuf:"bytes,2,opt,name=replies,proto3" json:"replies,omitempty"`
}

func (x *ArticleCommentEntry) Reset() {
	*x = ArticleCommentEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleCommentEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleCommentEntry) ProtoMessage() {}

func (x *ArticleCommentEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleCommentEntry.ProtoReflect.Descriptor instead.
func (*ArticleCommentEntry) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{90}
}

func (x *ArticleCommentEntry) GetComment() *CommentEntry {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ArticleCommentEntry) GetReplies() *ListArticleCommentRepliesResponse {
	if x != nil {
		return x.Replies
	}
	return nil
}

type ListArticleCommentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse        `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Count      int64                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Comments   []*ArticleCommentEntry `protobuf:"bytes,3,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *ListArticleCommentsResponse) Reset() {
	*x = ListArticleCommentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArticleCommentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArticleCommentsResponse) ProtoMessage() {}

func (x *ListArticleCommentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArticleCommentsResponse.ProtoReflect.Descriptor instead.
func (*ListArticleCommentsResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{91}
}

func (x *ListArticleCommentsResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *ListArticleCommentsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListArticleCommentsResponse) GetComments() []*ArticleCommentEntry {
	if x != nil {
		return x.Comments
	}
	return nil
}

type ListArticleCommentRepliesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID     string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	ParentCommentID int64  `protobuf:"varint,2,opt,name=parentCommentID,proto3" json:"parentCommentID,omitempty"`
	UserID          string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Offset          int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit           int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListArticleCommentRepliesRequest) Reset() {
	*x = ListArticleCommentRepliesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArticleCommentRepliesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArticleCommentRepliesRequest) ProtoMessage() {}

func (x *ListArticleCommentRepliesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArticleCommentRepliesRequest.ProtoReflect.Descriptor instead.
func (*ListArticleCommentRepliesRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{92}
}

func (x *ListArticleCommentRepliesRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ListArticleCommentRepliesRequest) GetParentCommentID() int64 {
	if x != nil {
		return x.ParentCommentID
	}
	return 0
}

func (x *ListArticleCommentRepliesRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ListArticleCommentRepliesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListArticleCommentRepliesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListUserArticleCommentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	ArticleID   int64  `protobuf:"varint,2,opt,name=articleID,proto3" json:"articleID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Offset      int64  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int64  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListUserArticleCommentsRequest) Reset() {
	*x = ListUserArticleCommentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserArticleCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserArticleCommentsRequest) ProtoMessage() {}

func (x *ListUserArticleCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserArticleCommentsRequest.ProtoReflect.Descriptor instead.
func (*ListUserArticleCommentsRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{93}
}

func (x *ListUserArticleCommentsRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ListUserArticleCommentsRequest) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *ListUserArticleCommentsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ListUserArticleCommentsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListUserArticleCommentsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type UserArticleCommentEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment  *CommentEntry `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	TopReply *CommentEntry `protobuf:"bytes,2,opt,name=topReply,proto3" json:"topReply,omitempty"`
}

func (x *UserArticleCommentEntry) Reset() {
	*x = UserArticleCommentEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserArticleCommentEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserArticleCommentEntry) ProtoMessage() {}

func (x *UserArticleCommentEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserArticleCommentEntry.ProtoReflect.Descriptor instead.
func (*UserArticleCommentEntry) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{94}
}

func (x *UserArticleCommentEntry) GetComment() *CommentEntry {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *UserArticleCommentEntry) GetTopReply() *CommentEntry {
	if x != nil {
		return x.TopReply
	}
	return nil
}

type ListUserArticleCommentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse            `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Count      int64                      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Comments   []*UserArticleCommentEntry `protobuf:"bytes,3,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *ListUserArticleCommentsResponse) Reset() {
	*x = ListUserArticleCommentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserArticleCommentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserArticleCommentsResponse) ProtoMessage() {}

func (x *ListUserArticleCommentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserArticleCommentsResponse.ProtoReflect.Descriptor instead.
func (*ListUserArticleCommentsResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{95}
}

func (x *ListUserArticleCommentsResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *ListUserArticleCommentsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListUserArticleCommentsResponse) GetComments() []*UserArticleCommentEntry {
	if x != nil {
		return x.Comments
	}
	return nil
}

type ListUserArticleCommentRepliesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	CommentID   int64  `protobuf:"varint,2,opt,name=commentID,proto3" json:"commentID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Offset      int64  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int64  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListUserArticleCommentRepliesRequest) Reset() {
	*x = ListUserArticleCommentRepliesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserArticleCommentRepliesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserArticleCommentRepliesRequest) ProtoMessage() {}

func (x *ListUserArticleCommentRepliesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserArticleCommentRepliesRequest.ProtoReflect.Descriptor instead.
func (*ListUserArticleCommentRepliesRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{96}
}

func (x *ListUserArticleCommentRepliesRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ListUserArticleCommentRepliesRequest) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *ListUserArticleCommentRepliesRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ListUserArticleCommentRepliesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListUserArticleCommentRepliesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListUserArticleCommentRepliesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Count      int64           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Comments   []*CommentEntry `protobuf:"bytes,3,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *ListUserArticleCommentRepliesResponse) Reset() {
	*x = ListUserArticleCommentRepliesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserArticleCommentRepliesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserArticleCommentRepliesResponse) ProtoMessage() {}

func (x *ListUserArticleCommentRepliesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserArticleCommentRepliesResponse.ProtoReflect.Descriptor instead.
func (*ListUserArticleCommentRepliesResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{97}
}

func (x *ListUserArticleCommentRepliesResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *ListUserArticleCommentRepliesResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListUserArticleCommentRepliesResponse) GetComments() []*CommentEntry {
	if x != nil {
		return x.Comments
	}
	return nil
}

type GetUserFollowListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Offset      int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Keyword     string `protobuf:"bytes,5,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *GetUserFollowListRequest) Reset() {
	*x = GetUserFollowListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFollowListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFollowListRequest) ProtoMessage() {}

func (x *GetUserFollowListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFollowListRequest.ProtoReflect.Descriptor instead.
func (*GetUserFollowListRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{98}
}

func (x *GetUserFollowListRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetUserFollowListRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserFollowListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetUserFollowListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetUserFollowListRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type UserFollow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfficialID int64  `protobuf:"varint,1,opt,name=officialID,proto3" json:"officialID,omitempty"`
	Nickname   string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FaceURL    string `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	Bio        string `protobuf:"bytes,4,opt,name=bio,proto3" json:"bio,omitempty"`
	Type       int32  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	FollowTime int64  `protobuf:"varint,6,opt,name=followTime,proto3" json:"followTime,omitempty"`
	Muted      bool   `protobuf:"varint,7,opt,name=muted,proto3" json:"muted,omitempty"`
	Enabled    bool   `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *UserFollow) Reset() {
	*x = UserFollow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFollow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFollow) ProtoMessage() {}

func (x *UserFollow) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFollow.ProtoReflect.Descriptor instead.
func (*UserFollow) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{99}
}

func (x *UserFollow) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *UserFollow) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserFollow) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *UserFollow) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *UserFollow) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UserFollow) GetFollowTime() int64 {
	if x != nil {
		return x.FollowTime
	}
	return 0
}

func (x *UserFollow) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *UserFollow) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type GetUserFollowListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Count      int64           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Follows    []*UserFollow   `protobuf:"bytes,3,rep,name=follows,proto3" json:"follows,omitempty"`
}

func (x *GetUserFollowListResponse) Reset() {
	*x = GetUserFollowListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFollowListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFollowListResponse) ProtoMessage() {}

func (x *GetUserFollowListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFollowListResponse.ProtoReflect.Descriptor instead.
func (*GetUserFollowListResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{100}
}

func (x *GetUserFollowListResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetUserFollowListResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetUserFollowListResponse) GetFollows() []*UserFollow {
	if x != nil {
		return x.Follows
	}
	return nil
}

type GetOfficialProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	OfficialID  int64  `protobuf:"varint,3,opt,name=officialID,proto3" json:"officialID,omitempty"`
}

func (x *GetOfficialProfileRequest) Reset() {
	*x = GetOfficialProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfficialProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfficialProfileRequest) ProtoMessage() {}

func (x *GetOfficialProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfficialProfileRequest.ProtoReflect.Descriptor instead.
func (*GetOfficialProfileRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{101}
}

func (x *GetOfficialProfileRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetOfficialProfileRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetOfficialProfileRequest) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

type GetOfficialProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Follow     *UserFollow     `protobuf:"bytes,2,opt,name=follow,proto3" json:"follow,omitempty"`
}

func (x *GetOfficialProfileResponse) Reset() {
	*x = GetOfficialProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfficialProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfficialProfileResponse) ProtoMessage() {}

func (x *GetOfficialProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfficialProfileResponse.ProtoReflect.Descriptor instead.
func (*GetOfficialProfileResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{102}
}

func (x *GetOfficialProfileResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetOfficialProfileResponse) GetFollow() *UserFollow {
	if x != nil {
		return x.Follow
	}
	return nil
}

type GetOfficialRecentAnalyticsByGenderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	StartTime   int64  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime     int64  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *GetOfficialRecentAnalyticsByGenderRequest) Reset() {
	*x = GetOfficialRecentAnalyticsByGenderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfficialRecentAnalyticsByGenderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfficialRecentAnalyticsByGenderRequest) ProtoMessage() {}

func (x *GetOfficialRecentAnalyticsByGenderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfficialRecentAnalyticsByGenderRequest.ProtoReflect.Descriptor instead.
func (*GetOfficialRecentAnalyticsByGenderRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{103}
}

func (x *GetOfficialRecentAnalyticsByGenderRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetOfficialRecentAnalyticsByGenderRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetOfficialRecentAnalyticsByGenderRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetOfficialRecentAnalyticsByGenderRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type RecentAnalyticsEntryGender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unknown int64 `protobuf:"varint,1,opt,name=unknown,proto3" json:"unknown,omitempty"`
	Male    int64 `protobuf:"varint,2,opt,name=male,proto3" json:"male,omitempty"`
	Female  int64 `protobuf:"varint,3,opt,name=female,proto3" json:"female,omitempty"`
}

func (x *RecentAnalyticsEntryGender) Reset() {
	*x = RecentAnalyticsEntryGender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentAnalyticsEntryGender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentAnalyticsEntryGender) ProtoMessage() {}

func (x *RecentAnalyticsEntryGender) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentAnalyticsEntryGender.ProtoReflect.Descriptor instead.
func (*RecentAnalyticsEntryGender) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{104}
}

func (x *RecentAnalyticsEntryGender) GetUnknown() int64 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

func (x *RecentAnalyticsEntryGender) GetMale() int64 {
	if x != nil {
		return x.Male
	}
	return 0
}

func (x *RecentAnalyticsEntryGender) GetFemale() int64 {
	if x != nil {
		return x.Female
	}
	return 0
}

type RecentAnalyticsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LikesByGender       *RecentAnalyticsEntryGender `protobuf:"bytes,1,opt,name=likesByGender,proto3" json:"likesByGender,omitempty"`
	CommentsByGender    *RecentAnalyticsEntryGender `protobuf:"bytes,2,opt,name=commentsByGender,proto3" json:"commentsByGender,omitempty"`
	FollowsByGender     *RecentAnalyticsEntryGender `protobuf:"bytes,3,opt,name=followsByGender,proto3" json:"followsByGender,omitempty"`
	ReadsByGender       *RecentAnalyticsEntryGender `protobuf:"bytes,4,opt,name=readsByGender,proto3" json:"readsByGender,omitempty"`
	UniqueReadsByGender *RecentAnalyticsEntryGender `protobuf:"bytes,5,opt,name=uniqueReadsByGender,proto3" json:"uniqueReadsByGender,omitempty"`
}

func (x *RecentAnalyticsEntry) Reset() {
	*x = RecentAnalyticsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentAnalyticsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentAnalyticsEntry) ProtoMessage() {}

func (x *RecentAnalyticsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentAnalyticsEntry.ProtoReflect.Descriptor instead.
func (*RecentAnalyticsEntry) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{105}
}

func (x *RecentAnalyticsEntry) GetLikesByGender() *RecentAnalyticsEntryGender {
	if x != nil {
		return x.LikesByGender
	}
	return nil
}

func (x *RecentAnalyticsEntry) GetCommentsByGender() *RecentAnalyticsEntryGender {
	if x != nil {
		return x.CommentsByGender
	}
	return nil
}

func (x *RecentAnalyticsEntry) GetFollowsByGender() *RecentAnalyticsEntryGender {
	if x != nil {
		return x.FollowsByGender
	}
	return nil
}

func (x *RecentAnalyticsEntry) GetReadsByGender() *RecentAnalyticsEntryGender {
	if x != nil {
		return x.ReadsByGender
	}
	return nil
}

func (x *RecentAnalyticsEntry) GetUniqueReadsByGender() *RecentAnalyticsEntryGender {
	if x != nil {
		return x.UniqueReadsByGender
	}
	return nil
}

type GetOfficialRecentAnalyticsByGenderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse       `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Current    *RecentAnalyticsEntry `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
	Previous   *RecentAnalyticsEntry `protobuf:"bytes,3,opt,name=previous,proto3" json:"previous,omitempty"`
}

func (x *GetOfficialRecentAnalyticsByGenderResponse) Reset() {
	*x = GetOfficialRecentAnalyticsByGenderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfficialRecentAnalyticsByGenderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfficialRecentAnalyticsByGenderResponse) ProtoMessage() {}

func (x *GetOfficialRecentAnalyticsByGenderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfficialRecentAnalyticsByGenderResponse.ProtoReflect.Descriptor instead.
func (*GetOfficialRecentAnalyticsByGenderResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{106}
}

func (x *GetOfficialRecentAnalyticsByGenderResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetOfficialRecentAnalyticsByGenderResponse) GetCurrent() *RecentAnalyticsEntry {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *GetOfficialRecentAnalyticsByGenderResponse) GetPrevious() *RecentAnalyticsEntry {
	if x != nil {
		return x.Previous
	}
	return nil
}

type GetOfficialAnalyticsByDayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	StartTime   int64  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime     int64  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *GetOfficialAnalyticsByDayRequest) Reset() {
	*x = GetOfficialAnalyticsByDayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfficialAnalyticsByDayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfficialAnalyticsByDayRequest) ProtoMessage() {}

func (x *GetOfficialAnalyticsByDayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfficialAnalyticsByDayRequest.ProtoReflect.Descriptor instead.
func (*GetOfficialAnalyticsByDayRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{107}
}

func (x *GetOfficialAnalyticsByDayRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetOfficialAnalyticsByDayRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetOfficialAnalyticsByDayRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetOfficialAnalyticsByDayRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type AnalyticsByDayEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day         int64 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	Likes       int64 `protobuf:"varint,2,opt,name=likes,proto3" json:"likes,omitempty"`
	Comments    int64 `protobuf:"varint,3,opt,name=comments,proto3" json:"comments,omitempty"`
	Follows     int64 `protobuf:"varint,4,opt,name=follows,proto3" json:"follows,omitempty"`
	Reads       int64 `protobuf:"varint,5,opt,name=reads,proto3" json:"reads,omitempty"`
	UniqueReads int64 `protobuf:"varint,6,opt,name=unique_reads,json=uniqueReads,proto3" json:"unique_reads,omitempty"`
}

func (x *AnalyticsByDayEntry) Reset() {
	*x = AnalyticsByDayEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsByDayEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsByDayEntry) ProtoMessage() {}

func (x *AnalyticsByDayEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsByDayEntry.ProtoReflect.Descriptor instead.
func (*AnalyticsByDayEntry) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{108}
}

func (x *AnalyticsByDayEntry) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *AnalyticsByDayEntry) GetLikes() int64 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *AnalyticsByDayEntry) GetComments() int64 {
	if x != nil {
		return x.Comments
	}
	return 0
}

func (x *AnalyticsByDayEntry) GetFollows() int64 {
	if x != nil {
		return x.Follows
	}
	return 0
}

func (x *AnalyticsByDayEntry) GetReads() int64 {
	if x != nil {
		return x.Reads
	}
	return 0
}

func (x *AnalyticsByDayEntry) GetUniqueReads() int64 {
	if x != nil {
		return x.UniqueReads
	}
	return 0
}

type GetOfficialAnalyticsByDayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse        `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	Entries    []*AnalyticsByDayEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GetOfficialAnalyticsByDayResponse) Reset() {
	*x = GetOfficialAnalyticsByDayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfficialAnalyticsByDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfficialAnalyticsByDayResponse) ProtoMessage() {}

func (x *GetOfficialAnalyticsByDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfficialAnalyticsByDayResponse.ProtoReflect.Descriptor instead.
func (*GetOfficialAnalyticsByDayResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{109}
}

func (x *GetOfficialAnalyticsByDayResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetOfficialAnalyticsByDayResponse) GetEntries() []*AnalyticsByDayEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type SearchOfficialAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Keyword     string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Offset      int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchOfficialAccountsRequest) Reset() {
	*x = SearchOfficialAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOfficialAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOfficialAccountsRequest) ProtoMessage() {}

func (x *SearchOfficialAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOfficialAccountsRequest.ProtoReflect.Descriptor instead.
func (*SearchOfficialAccountsRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{110}
}

func (x *SearchOfficialAccountsRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *SearchOfficialAccountsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SearchOfficialAccountsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchOfficialAccountsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchOfficialAccountsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchOfficialAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
	Entries    []*UserFollow   `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	Count      int64           `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SearchOfficialAccountsResponse) Reset() {
	*x = SearchOfficialAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOfficialAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOfficialAccountsResponse) ProtoMessage() {}

func (x *SearchOfficialAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOfficialAccountsResponse.ProtoReflect.Descriptor instead.
func (*SearchOfficialAccountsResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{111}
}

func (x *SearchOfficialAccountsResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *SearchOfficialAccountsResponse) GetEntries() []*UserFollow {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *SearchOfficialAccountsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SearchArticlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID   string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	UserID        string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Keyword       string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	OfficialID    int64  `protobuf:"varint,4,opt,name=officialID,proto3" json:"officialID,omitempty"`
	MinReadTime   int64  `protobuf:"varint,5,opt,name=minReadTime,proto3" json:"minReadTime,omitempty"`
	MaxReadTime   int64  `protobuf:"varint,6,opt,name=maxReadTime,proto3" json:"maxReadTime,omitempty"`
	MinCreateTime int64  `protobuf:"varint,7,opt,name=minCreateTime,proto3" json:"minCreateTime,omitempty"`
	MaxCreateTime int64  `protobuf:"varint,8,opt,name=maxCreateTime,proto3" json:"maxCreateTime,omitempty"`
	Sort          int64  `protobuf:"varint,9,opt,name=sort,proto3" json:"sort,omitempty"`
	Offset        int64  `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int64  `protobuf:"varint,11,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchArticlesRequest) Reset() {
	*x = SearchArticlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArticlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArticlesRequest) ProtoMessage() {}

func (x *SearchArticlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArticlesRequest.ProtoReflect.Descriptor instead.
func (*SearchArticlesRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{112}
}

func (x *SearchArticlesRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *SearchArticlesRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SearchArticlesRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchArticlesRequest) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *SearchArticlesRequest) GetMinReadTime() int64 {
	if x != nil {
		return x.MinReadTime
	}
	return 0
}

func (x *SearchArticlesRequest) GetMaxReadTime() int64 {
	if x != nil {
		return x.MaxReadTime
	}
	return 0
}

func (x *SearchArticlesRequest) GetMinCreateTime() int64 {
	if x != nil {
		return x.MinCreateTime
	}
	return 0
}

func (x *SearchArticlesRequest) GetMaxCreateTime() int64 {
	if x != nil {
		return x.MaxCreateTime
	}
	return 0
}

func (x *SearchArticlesRequest) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SearchArticlesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchArticlesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchArticlesEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Article  *UserArticleSummary `protobuf:"bytes,1,opt,name=article,proto3" json:"article,omitempty"`
	Official *UserFollow         `protobuf:"bytes,2,opt,name=official,proto3" json:"official,omitempty"`
	ReadTime int64               `protobuf:"varint,3,opt,name=readTime,proto3" json:"readTime,omitempty"`
}

func (x *SearchArticlesEntry) Reset() {
	*x = SearchArticlesEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArticlesEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArticlesEntry) ProtoMessage() {}

func (x *SearchArticlesEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArticlesEntry.ProtoReflect.Descriptor instead.
func (*SearchArticlesEntry) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{113}
}

func (x *SearchArticlesEntry) GetArticle() *UserArticleSummary {
	if x != nil {
		return x.Article
	}
	return nil
}

func (x *SearchArticlesEntry) GetOfficial() *UserFollow {
	if x != nil {
		return x.Official
	}
	return nil
}

func (x *SearchArticlesEntry) GetReadTime() int64 {
	if x != nil {
		return x.ReadTime
	}
	return 0
}

type SearchArticlesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse        `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
	Entries    []*SearchArticlesEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	Count      int64                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SearchArticlesResponse) Reset() {
	*x = SearchArticlesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArticlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArticlesResponse) ProtoMessage() {}

func (x *SearchArticlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArticlesResponse.ProtoReflect.Descriptor instead.
func (*SearchArticlesResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{114}
}

func (x *SearchArticlesResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *SearchArticlesResponse) GetEntries() []*SearchArticlesEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *SearchArticlesResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetUserArticleByArticleIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string  `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	ArticleID   int64   `protobuf:"varint,2,opt,name=articleID,proto3" json:"articleID,omitempty"`
	UserID      *string `protobuf:"bytes,4,opt,name=userID,proto3,oneof" json:"userID,omitempty"`
}

func (x *GetUserArticleByArticleIDRequest) Reset() {
	*x = GetUserArticleByArticleIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserArticleByArticleIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserArticleByArticleIDRequest) ProtoMessage() {}

func (x *GetUserArticleByArticleIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserArticleByArticleIDRequest.ProtoReflect.Descriptor instead.
func (*GetUserArticleByArticleIDRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{115}
}

func (x *GetUserArticleByArticleIDRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetUserArticleByArticleIDRequest) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *GetUserArticleByArticleIDRequest) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

type InsertArticleReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	ArticleID   int64  `protobuf:"varint,2,opt,name=articleID,proto3" json:"articleID,omitempty"`
	UserID      string `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *InsertArticleReadRequest) Reset() {
	*x = InsertArticleReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertArticleReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertArticleReadRequest) ProtoMessage() {}

func (x *InsertArticleReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertArticleReadRequest.ProtoReflect.Descriptor instead.
func (*InsertArticleReadRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{116}
}

func (x *InsertArticleReadRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *InsertArticleReadRequest) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *InsertArticleReadRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type UserArticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleID        int64  `protobuf:"varint,1,opt,name=articleID,proto3" json:"articleID,omitempty"`
	Title            string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	CoverPhoto       string `protobuf:"bytes,3,opt,name=coverPhoto,proto3" json:"coverPhoto,omitempty"`
	TextContent      string `protobuf:"bytes,4,opt,name=textContent,proto3" json:"textContent,omitempty"`
	Content          string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ReadCounts       int64  `protobuf:"varint,6,opt,name=readCounts,proto3" json:"readCounts,omitempty"`
	UniqueReadCounts int64  `protobuf:"varint,7,opt,name=uniqueReadCounts,proto3" json:"uniqueReadCounts,omitempty"`
	CommentCounts    int64  `protobuf:"varint,8,opt,name=commentCounts,proto3" json:"commentCounts,omitempty"`
	RepostCounts     int64  `protobuf:"varint,9,opt,name=repostCounts,proto3" json:"repostCounts,omitempty"`
	CreateTime       int64  `protobuf:"varint,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	LikeTime         int64  `protobuf:"varint,11,opt,name=likeTime,proto3" json:"likeTime,omitempty"`
	FavoriteTime     int64  `protobuf:"varint,12,opt,name=favoriteTime,proto3" json:"favoriteTime,omitempty"`
	FavoriteID       string `protobuf:"bytes,13,opt,name=favoriteID,proto3" json:"favoriteID,omitempty"`
}

func (x *UserArticle) Reset() {
	*x = UserArticle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserArticle) ProtoMessage() {}

func (x *UserArticle) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserArticle.ProtoReflect.Descriptor instead.
func (*UserArticle) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{117}
}

func (x *UserArticle) GetArticleID() int64 {
	if x != nil {
		return x.ArticleID
	}
	return 0
}

func (x *UserArticle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UserArticle) GetCoverPhoto() string {
	if x != nil {
		return x.CoverPhoto
	}
	return ""
}

func (x *UserArticle) GetTextContent() string {
	if x != nil {
		return x.TextContent
	}
	return ""
}

func (x *UserArticle) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UserArticle) GetReadCounts() int64 {
	if x != nil {
		return x.ReadCounts
	}
	return 0
}

func (x *UserArticle) GetUniqueReadCounts() int64 {
	if x != nil {
		return x.UniqueReadCounts
	}
	return 0
}

func (x *UserArticle) GetCommentCounts() int64 {
	if x != nil {
		return x.CommentCounts
	}
	return 0
}

func (x *UserArticle) GetRepostCounts() int64 {
	if x != nil {
		return x.RepostCounts
	}
	return 0
}

func (x *UserArticle) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserArticle) GetLikeTime() int64 {
	if x != nil {
		return x.LikeTime
	}
	return 0
}

func (x *UserArticle) GetFavoriteTime() int64 {
	if x != nil {
		return x.FavoriteTime
	}
	return 0
}

func (x *UserArticle) GetFavoriteID() string {
	if x != nil {
		return x.FavoriteID
	}
	return ""
}

type GetUserArticleByArticleIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
	Article    *UserArticle    `protobuf:"bytes,2,opt,name=article,proto3" json:"article,omitempty"`
	Official   *UserFollow     `protobuf:"bytes,3,opt,name=official,proto3" json:"official,omitempty"`
}

func (x *GetUserArticleByArticleIDResponse) Reset() {
	*x = GetUserArticleByArticleIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserArticleByArticleIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserArticleByArticleIDResponse) ProtoMessage() {}

func (x *GetUserArticleByArticleIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserArticleByArticleIDResponse.ProtoReflect.Descriptor instead.
func (*GetUserArticleByArticleIDResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{118}
}

func (x *GetUserArticleByArticleIDResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetUserArticleByArticleIDResponse) GetArticle() *UserArticle {
	if x != nil {
		return x.Article
	}
	return nil
}

func (x *GetUserArticleByArticleIDResponse) GetOfficial() *UserFollow {
	if x != nil {
		return x.Official
	}
	return nil
}

type ListUserArticleReadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID   string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserID        string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	MinCreateTime int64  `protobuf:"varint,3,opt,name=MinCreateTime,proto3" json:"MinCreateTime,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit         int64  `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *ListUserArticleReadsRequest) Reset() {
	*x = ListUserArticleReadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserArticleReadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserArticleReadsRequest) ProtoMessage() {}

func (x *ListUserArticleReadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserArticleReadsRequest.ProtoReflect.Descriptor instead.
func (*ListUserArticleReadsRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{119}
}

func (x *ListUserArticleReadsRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ListUserArticleReadsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ListUserArticleReadsRequest) GetMinCreateTime() int64 {
	if x != nil {
		return x.MinCreateTime
	}
	return 0
}

func (x *ListUserArticleReadsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListUserArticleReadsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListUserArticleReadsResponseEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Article  *UserArticleSummary `protobuf:"bytes,1,opt,name=article,proto3" json:"article,omitempty"`
	Official *UserFollow         `protobuf:"bytes,2,opt,name=official,proto3" json:"official,omitempty"`
	ReadTime int64               `protobuf:"varint,3,opt,name=readTime,proto3" json:"readTime,omitempty"`
}

func (x *ListUserArticleReadsResponseEntry) Reset() {
	*x = ListUserArticleReadsResponseEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserArticleReadsResponseEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserArticleReadsResponseEntry) ProtoMessage() {}

func (x *ListUserArticleReadsResponseEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserArticleReadsResponseEntry.ProtoReflect.Descriptor instead.
func (*ListUserArticleReadsResponseEntry) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{120}
}

func (x *ListUserArticleReadsResponseEntry) GetArticle() *UserArticleSummary {
	if x != nil {
		return x.Article
	}
	return nil
}

func (x *ListUserArticleReadsResponseEntry) GetOfficial() *UserFollow {
	if x != nil {
		return x.Official
	}
	return nil
}

func (x *ListUserArticleReadsResponseEntry) GetReadTime() int64 {
	if x != nil {
		return x.ReadTime
	}
	return 0
}

type ListUserArticleReadsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp *CommonResponse                      `protobuf:"bytes,1,opt,name=commonResp,proto3" json:"commonResp,omitempty"`
	Entries    []*ListUserArticleReadsResponseEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	Count      int64                                `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ListUserArticleReadsResponse) Reset() {
	*x = ListUserArticleReadsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserArticleReadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserArticleReadsResponse) ProtoMessage() {}

func (x *ListUserArticleReadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserArticleReadsResponse.ProtoReflect.Descriptor instead.
func (*ListUserArticleReadsResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{121}
}

func (x *ListUserArticleReadsResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *ListUserArticleReadsResponse) GetEntries() []*ListUserArticleReadsResponseEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *ListUserArticleReadsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ClearUserArticleReadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *ClearUserArticleReadsRequest) Reset() {
	*x = ClearUserArticleReadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearUserArticleReadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearUserArticleReadsRequest) ProtoMessage() {}

func (x *ClearUserArticleReadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearUserArticleReadsRequest.ProtoReflect.Descriptor instead.
func (*ClearUserArticleReadsRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{122}
}

func (x *ClearUserArticleReadsRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *ClearUserArticleReadsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type DeleteArticleCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=operationID,proto3" json:"operationID,omitempty"`
	CommentID   int64  `protobuf:"varint,2,opt,name=CommentID,proto3" json:"CommentID,omitempty"`
	ReqUserID   string `protobuf:"bytes,3,opt,name=ReqUserID,proto3" json:"ReqUserID,omitempty"`
}

func (x *DeleteArticleCommentRequest) Reset() {
	*x = DeleteArticleCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArticleCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArticleCommentRequest) ProtoMessage() {}

func (x *DeleteArticleCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArticleCommentRequest.ProtoReflect.Descriptor instead.
func (*DeleteArticleCommentRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{123}
}

func (x *DeleteArticleCommentRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *DeleteArticleCommentRequest) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *DeleteArticleCommentRequest) GetReqUserID() string {
	if x != nil {
		return x.ReqUserID
	}
	return ""
}

type FollowedOfficialConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	ReqUserID   string `protobuf:"bytes,2,opt,name=ReqUserID,proto3" json:"ReqUserID,omitempty"`
}

func (x *FollowedOfficialConversationRequest) Reset() {
	*x = FollowedOfficialConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowedOfficialConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowedOfficialConversationRequest) ProtoMessage() {}

func (x *FollowedOfficialConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowedOfficialConversationRequest.ProtoReflect.Descriptor instead.
func (*FollowedOfficialConversationRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{124}
}

func (x *FollowedOfficialConversationRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *FollowedOfficialConversationRequest) GetReqUserID() string {
	if x != nil {
		return x.ReqUserID
	}
	return ""
}

type FollowedOfficialConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string     `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Articles    []*Article `protobuf:"bytes,2,rep,name=articles,proto3" json:"articles,omitempty"`
}

func (x *FollowedOfficialConversationResponse) Reset() {
	*x = FollowedOfficialConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowedOfficialConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowedOfficialConversationResponse) ProtoMessage() {}

func (x *FollowedOfficialConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowedOfficialConversationResponse.ProtoReflect.Descriptor instead.
func (*FollowedOfficialConversationResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{125}
}

func (x *FollowedOfficialConversationResponse) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *FollowedOfficialConversationResponse) GetArticles() []*Article {
	if x != nil {
		return x.Articles
	}
	return nil
}

type GetOfficialIDNumberAvailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	IDNumber    string `protobuf:"bytes,2,opt,name=IDNumber,proto3" json:"IDNumber,omitempty"`
	IDType      int32  `protobuf:"varint,3,opt,name=IDType,proto3" json:"IDType,omitempty"`
}

func (x *GetOfficialIDNumberAvailabilityRequest) Reset() {
	*x = GetOfficialIDNumberAvailabilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfficialIDNumberAvailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfficialIDNumberAvailabilityRequest) ProtoMessage() {}

func (x *GetOfficialIDNumberAvailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfficialIDNumberAvailabilityRequest.ProtoReflect.Descriptor instead.
func (*GetOfficialIDNumberAvailabilityRequest) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{126}
}

func (x *GetOfficialIDNumberAvailabilityRequest) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetOfficialIDNumberAvailabilityRequest) GetIDNumber() string {
	if x != nil {
		return x.IDNumber
	}
	return ""
}

func (x *GetOfficialIDNumberAvailabilityRequest) GetIDType() int32 {
	if x != nil {
		return x.IDType
	}
	return 0
}

type GetOfficialIDNumberAvailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResp  *CommonResponse `protobuf:"bytes,1,opt,name=CommonResp,proto3" json:"CommonResp,omitempty"`
	IDNumber    string          `protobuf:"bytes,2,opt,name=IDNumber,proto3" json:"IDNumber,omitempty"`
	IsAvailable bool            `protobuf:"varint,3,opt,name=IsAvailable,proto3" json:"IsAvailable,omitempty"`
}

func (x *GetOfficialIDNumberAvailabilityResponse) Reset() {
	*x = GetOfficialIDNumberAvailabilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfficialIDNumberAvailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfficialIDNumberAvailabilityResponse) ProtoMessage() {}

func (x *GetOfficialIDNumberAvailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfficialIDNumberAvailabilityResponse.ProtoReflect.Descriptor instead.
func (*GetOfficialIDNumberAvailabilityResponse) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{127}
}

func (x *GetOfficialIDNumberAvailabilityResponse) GetCommonResp() *CommonResponse {
	if x != nil {
		return x.CommonResp
	}
	return nil
}

func (x *GetOfficialIDNumberAvailabilityResponse) GetIDNumber() string {
	if x != nil {
		return x.IDNumber
	}
	return ""
}

func (x *GetOfficialIDNumberAvailabilityResponse) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

type OfficialFollowers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfficialID   int64  `protobuf:"varint,1,opt,name=OfficialID,proto3" json:"OfficialID,omitempty"`
	OfficialName string `protobuf:"bytes,2,opt,name=OfficialName,proto3" json:"OfficialName,omitempty"`
	UserID       string `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Username     string `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`
	FollowTime   int64  `protobuf:"varint,5,opt,name=FollowTime,proto3" json:"FollowTime,omitempty"`
	DeletedBy    string `protobuf:"bytes,6,opt,name=DeletedBy,proto3" json:"DeletedBy,omitempty"`
	BlockTime    int64  `protobuf:"varint,7,opt,name=BlockTime,proto3" json:"BlockTime,omitempty"`
	Muted        bool   `protobuf:"varint,8,opt,name=Muted,proto3" json:"Muted,omitempty"`
	Enabled      bool   `protobuf:"varint,9,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
}

func (x *OfficialFollowers) Reset() {
	*x = OfficialFollowers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficialFollowers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficialFollowers) ProtoMessage() {}

func (x *OfficialFollowers) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficialFollowers.ProtoReflect.Descriptor instead.
func (*OfficialFollowers) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{128}
}

func (x *OfficialFollowers) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *OfficialFollowers) GetOfficialName() string {
	if x != nil {
		return x.OfficialName
	}
	return ""
}

func (x *OfficialFollowers) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *OfficialFollowers) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OfficialFollowers) GetFollowTime() int64 {
	if x != nil {
		return x.FollowTime
	}
	return 0
}

func (x *OfficialFollowers) GetDeletedBy() string {
	if x != nil {
		return x.DeletedBy
	}
	return ""
}

func (x *OfficialFollowers) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *OfficialFollowers) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *OfficialFollowers) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type GetOfficialFollowersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination      *sdk_ws.RequestPagination `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	OperationID     string                    `protobuf:"bytes,2,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	StartTime       string                    `protobuf:"bytes,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime         string                    `protobuf:"bytes,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	OfficialAccount string                    `protobuf:"bytes,5,opt,name=OfficialAccount,proto3" json:"OfficialAccount,omitempty"`
	User            string                    `protobuf:"bytes,6,opt,name=User,proto3" json:"User,omitempty"`
	Muted           int32                     `protobuf:"varint,7,opt,name=Muted,proto3" json:"Muted,omitempty"`
}

func (x *GetOfficialFollowersReq) Reset() {
	*x = GetOfficialFollowersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfficialFollowersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfficialFollowersReq) ProtoMessage() {}

func (x *GetOfficialFollowersReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfficialFollowersReq.ProtoReflect.Descriptor instead.
func (*GetOfficialFollowersReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{129}
}

func (x *GetOfficialFollowersReq) GetPagination() *sdk_ws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetOfficialFollowersReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetOfficialFollowersReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetOfficialFollowersReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetOfficialFollowersReq) GetOfficialAccount() string {
	if x != nil {
		return x.OfficialAccount
	}
	return ""
}

func (x *GetOfficialFollowersReq) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *GetOfficialFollowersReq) GetMuted() int32 {
	if x != nil {
		return x.Muted
	}
	return 0
}

type GetOfficialFollowersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommResp               *CommonResponse            `protobuf:"bytes,1,opt,name=CommResp,proto3" json:"CommResp,omitempty"`
	Pagination             *sdk_ws.ResponsePagination `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	OfficialFollowers      []*OfficialFollowers       `protobuf:"bytes,3,rep,name=OfficialFollowers,proto3" json:"OfficialFollowers,omitempty"`
	OfficialFollowersCount int64                      `protobuf:"varint,4,opt,name=OfficialFollowersCount,proto3" json:"OfficialFollowersCount,omitempty"`
}

func (x *GetOfficialFollowersResp) Reset() {
	*x = GetOfficialFollowersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfficialFollowersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfficialFollowersResp) ProtoMessage() {}

func (x *GetOfficialFollowersResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfficialFollowersResp.ProtoReflect.Descriptor instead.
func (*GetOfficialFollowersResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{130}
}

func (x *GetOfficialFollowersResp) GetCommResp() *CommonResponse {
	if x != nil {
		return x.CommResp
	}
	return nil
}

func (x *GetOfficialFollowersResp) GetPagination() *sdk_ws.ResponsePagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetOfficialFollowersResp) GetOfficialFollowers() []*OfficialFollowers {
	if x != nil {
		return x.OfficialFollowers
	}
	return nil
}

func (x *GetOfficialFollowersResp) GetOfficialFollowersCount() int64 {
	if x != nil {
		return x.OfficialFollowersCount
	}
	return 0
}

type BlockFollowerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Block       int32  `protobuf:"varint,2,opt,name=Block,proto3" json:"Block,omitempty"`
	OfficialID  int64  `protobuf:"varint,3,opt,name=OfficialID,proto3" json:"OfficialID,omitempty"`
	UserID      string `protobuf:"bytes,4,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OpUserID    string `protobuf:"bytes,5,opt,name=OpUserID,proto3" json:"OpUserID,omitempty"`
}

func (x *BlockFollowerReq) Reset() {
	*x = BlockFollowerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockFollowerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockFollowerReq) ProtoMessage() {}

func (x *BlockFollowerReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockFollowerReq.ProtoReflect.Descriptor instead.
func (*BlockFollowerReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{131}
}

func (x *BlockFollowerReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *BlockFollowerReq) GetBlock() int32 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *BlockFollowerReq) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *BlockFollowerReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *BlockFollowerReq) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

type BlockFollowerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommResp *CommonResponse `protobuf:"bytes,1,opt,name=CommResp,proto3" json:"CommResp,omitempty"`
}

func (x *BlockFollowerResp) Reset() {
	*x = BlockFollowerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockFollowerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockFollowerResp) ProtoMessage() {}

func (x *BlockFollowerResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockFollowerResp.ProtoReflect.Descriptor instead.
func (*BlockFollowerResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{132}
}

func (x *BlockFollowerResp) GetCommResp() *CommonResponse {
	if x != nil {
		return x.CommResp
	}
	return nil
}

type MuteFollowerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Mute        int32  `protobuf:"varint,2,opt,name=Mute,proto3" json:"Mute,omitempty"`
	OfficialID  int64  `protobuf:"varint,3,opt,name=OfficialID,proto3" json:"OfficialID,omitempty"`
	UserID      string `protobuf:"bytes,4,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OpUserID    string `protobuf:"bytes,5,opt,name=OpUserID,proto3" json:"OpUserID,omitempty"`
}

func (x *MuteFollowerReq) Reset() {
	*x = MuteFollowerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteFollowerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteFollowerReq) ProtoMessage() {}

func (x *MuteFollowerReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteFollowerReq.ProtoReflect.Descriptor instead.
func (*MuteFollowerReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{133}
}

func (x *MuteFollowerReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *MuteFollowerReq) GetMute() int32 {
	if x != nil {
		return x.Mute
	}
	return 0
}

func (x *MuteFollowerReq) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *MuteFollowerReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *MuteFollowerReq) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

type MuteFollowerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommResp *CommonResponse `protobuf:"bytes,1,opt,name=CommResp,proto3" json:"CommResp,omitempty"`
}

func (x *MuteFollowerResp) Reset() {
	*x = MuteFollowerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteFollowerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteFollowerResp) ProtoMessage() {}

func (x *MuteFollowerResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteFollowerResp.ProtoReflect.Descriptor instead.
func (*MuteFollowerResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{134}
}

func (x *MuteFollowerResp) GetCommResp() *CommonResponse {
	if x != nil {
		return x.CommResp
	}
	return nil
}

type UsersAutoGenerate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfficialID int64  `protobuf:"varint,1,opt,name=OfficialID,proto3" json:"OfficialID,omitempty"`
	UserID     string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *UsersAutoGenerate) Reset() {
	*x = UsersAutoGenerate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersAutoGenerate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersAutoGenerate) ProtoMessage() {}

func (x *UsersAutoGenerate) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersAutoGenerate.ProtoReflect.Descriptor instead.
func (*UsersAutoGenerate) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{135}
}

func (x *UsersAutoGenerate) GetOfficialID() int64 {
	if x != nil {
		return x.OfficialID
	}
	return 0
}

func (x *UsersAutoGenerate) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type RemoveFollowersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string               `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Users       []*UsersAutoGenerate `protobuf:"bytes,2,rep,name=Users,proto3" json:"Users,omitempty"`
	OpUserID    string               `protobuf:"bytes,3,opt,name=OpUserID,proto3" json:"OpUserID,omitempty"`
}

func (x *RemoveFollowersReq) Reset() {
	*x = RemoveFollowersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFollowersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFollowersReq) ProtoMessage() {}

func (x *RemoveFollowersReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFollowersReq.ProtoReflect.Descriptor instead.
func (*RemoveFollowersReq) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{136}
}

func (x *RemoveFollowersReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *RemoveFollowersReq) GetUsers() []*UsersAutoGenerate {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *RemoveFollowersReq) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

type RemoveFollowersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommResp *CommonResponse `protobuf:"bytes,1,opt,name=CommResp,proto3" json:"CommResp,omitempty"`
}

func (x *RemoveFollowersResp) Reset() {
	*x = RemoveFollowersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFollowersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFollowersResp) ProtoMessage() {}

func (x *RemoveFollowersResp) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFollowersResp.ProtoReflect.Descriptor instead.
func (*RemoveFollowersResp) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{137}
}

func (x *RemoveFollowersResp) GetCommResp() *CommonResponse {
	if x != nil {
		return x.CommResp
	}
	return nil
}

type GetSelfOfficialInfoResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo     *SelfUserInfo     `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	OfficialInfo *SelfOfficialInfo `protobuf:"bytes,2,opt,name=officialInfo,proto3,oneof" json:"officialInfo,omitempty"`
}

func (x *GetSelfOfficialInfoResponse_Data) Reset() {
	*x = GetSelfOfficialInfoResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_news_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSelfOfficialInfoResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfOfficialInfoResponse_Data) ProtoMessage() {}

func (x *GetSelfOfficialInfoResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_news_news_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfOfficialInfoResponse_Data.ProtoReflect.Descriptor instead.
func (*GetSelfOfficialInfoResponse_Data) Descriptor() ([]byte, []int) {
	return file_news_news_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetSelfOfficialInfoResponse_Data) GetUserInfo() *SelfUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *GetSelfOfficialInfoResponse_Data) GetOfficialInfo() *SelfOfficialInfo {
	if x != nil {
		return x.OfficialInfo
	}
	return nil
}

var File_news_news_proto protoreflect.FileDescriptor

var file_news_news_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x1a, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x64, 0x6b, 0x5f, 0x77, 0x73,
	0x2f, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x63, 0x6d, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xf2, 0x03, 0x0a, 0x08, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x42, 0x69, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x7c,
	0x0a, 0x17, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x22, 0xdb, 0x02, 0x0a,
	0x17, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x22, 0x56, 0x0a, 0x1a, 0x67, 0x65,
	0x74, 0x53, 0x65, 0x6c, 0x66, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x7c, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c,
	0x22, 0x8e, 0x03, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x66, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x22, 0xa4, 0x02, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x1a, 0x88, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a,
	0x0c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x73, 0x65, 0x6c, 0x66, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbc, 0x01, 0x0a, 0x1a, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x6c, 0x66, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x22, 0xda, 0x03, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x67, 0x73, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x54, 0x61, 0x67, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x69, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x42, 0x69, 0x6f, 0x22, 0xa5, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0x77, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x52, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x08, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x50, 0x0a,
	0x18, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x83, 0x03, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x42, 0x69, 0x6f, 0x22, 0x4e, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xba, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x22, 0x43, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x78, 0x0a, 0x1c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x7a, 0x0a, 0x1e, 0x75, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xaf, 0x01,
	0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x8b, 0x01, 0x0a, 0x29, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x94, 0x01,
	0x0a, 0x2a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x87, 0x01, 0x0a, 0x1b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x89,
	0x01, 0x0a, 0x1d, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x1c, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x12, 0x6c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x6e, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x19, 0x6c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x75, 0x0a, 0x1b, 0x75, 0x6e, 0x6c, 0x69,
	0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x7b, 0x0a, 0x21, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7d, 0x0a, 0x23,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7d, 0x0a, 0x23, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7b, 0x0a, 0x21, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x69, 0x64, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7b, 0x0a, 0x21, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x9e, 0x02, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x22, 0x6f, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xe0, 0x02, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x1b, 0x6c,
	0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x21, 0x6c,
	0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x32, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x22, 0xad, 0x01, 0x0a, 0x1c, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xdf, 0x02, 0x0a, 0x13, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69,
	0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x6d, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xce, 0x03, 0x0a, 0x12, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x6d, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc3, 0x06, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa0, 0x06, 0x0a, 0x0e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x6d, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x22, 0xc9,
	0x04, 0x0a, 0x0b, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd1, 0x03, 0x0a, 0x0d, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x69,
	0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xd4,
	0x02, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x44, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xd9, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x08, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x08, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x4e, 0x75, 0x6d,
	0x73, 0x22, 0x69, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34,
	0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x65,
	0x77, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x0d, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x22, 0x49, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0xbc, 0x03, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0xe8, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a,
	0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x45, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65,
	0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34,
	0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x65,
	0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x14, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x90, 0x01, 0x0a, 0x1a, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x53, 0x0a, 0x1b, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x93, 0x03, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6b, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x27, 0x0a, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c,
	0x69, 0x6b, 0x65, 0x52, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x6b, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x6b, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0x88, 0x01,
	0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6b, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a,
	0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x96, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0xbe,
	0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0xdc, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x6a,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xdc, 0x02, 0x0a, 0x0e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c,
	0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x57,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x22, 0x77, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x22, 0xa3, 0x02, 0x0a, 0x1e, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x0d, 0x4d, 0x69, 0x6e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x69, 0x6e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4d, 0x69, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x18,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x13, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x1f, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x6b,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a,
	0x18, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x69,
	0x6b, 0x65, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x1a, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x92, 0x06, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12,
	0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x10, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x61,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a,
	0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x6b,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x69, 0x6b,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9d, 0x01,
	0x0a, 0x21, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x86, 0x01,
	0x0a, 0x13, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x1b, 0x6c, 0x69, 0x73, 0x74, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xa6, 0x01, 0x0a, 0x1e, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x77, 0x0a, 0x17, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0xa8, 0x01, 0x0a, 0x1f, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xac, 0x01,
	0x0a, 0x24, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa3, 0x01, 0x0a,
	0x25, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0xd8, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x75, 0x74,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x93, 0x01, 0x0a,
	0x19, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x07, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x22, 0x75, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x22, 0x7c, 0x0a, 0x1a, 0x67, 0x65, 0x74,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a,
	0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x9d, 0x01, 0x0a, 0x29, 0x67, 0x65, 0x74, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d,
	0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x22, 0x94, 0x03, 0x0a, 0x14,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x0d, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x42, 0x79, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x6c,
	0x69, 0x6b, 0x65, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0f, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x42, 0x79,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x73, 0x42,
	0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x0d, 0x72, 0x65, 0x61, 0x64, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x52,
	0x0a, 0x13, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x42, 0x79, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x13, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x22, 0xd0, 0x01, 0x0a, 0x2a, 0x67, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79,
	0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a,
	0x13, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x44, 0x61, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x21,
	0x67, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x44, 0x61, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa1, 0x01, 0x0a,
	0x1d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x98, 0x01, 0x0a, 0x1e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x02, 0x0a, 0x15,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x13,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x99, 0x01, 0x0a, 0x16, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8a, 0x01,
	0x0a, 0x20, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x44, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x72, 0x0a, 0x18, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xb3,
	0x03, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x49, 0x44, 0x22, 0xb4, 0x01, 0x0a, 0x21, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2b, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x2c, 0x0a,
	0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x22, 0xab, 0x01, 0x0a, 0x1b,
	0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x69,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x21, 0x6c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x32, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xad, 0x01,
	0x0a, 0x1c, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x58, 0x0a,
	0x1c, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7b, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x71, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x65, 0x0a, 0x23, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x24, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x22, 0x7e, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49,
	0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x44, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x9d, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x97, 0x02, 0x0a, 0x11, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x75,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x4d, 0x75, 0x74, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x44, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x22, 0x92, 0x02, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x11, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x52, 0x11, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x9e, 0x01, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x45, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x43,
	0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x4d, 0x75, 0x74, 0x65,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x4d, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x4d, 0x75, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x10, 0x4d, 0x75, 0x74, 0x65, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x08, 0x43, 0x6f, 0x6d,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4b, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x2d, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x75, 0x74,
	0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x13,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x6d,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x32, 0xd6, 0x2c, 0x0a, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x12, 0x47,
	0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x53, 0x65,
	0x6c, 0x66, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x17, 0x75, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x75, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x1c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01,
	0x0a, 0x25, 0x67, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x2f, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x16, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x23, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x12,
	0x22, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6c, 0x69, 0x6b,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x6c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x69,
	0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x75, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65,
	0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x61, 0x64, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x61, 0x64, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x14,
	0x6c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c,
	0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x6c,
	0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x75, 0x6e, 0x6c, 0x69,
	0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x75, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x1a, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x1c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x1c, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x1a, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x48, 0x69, 0x64, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x69, 0x64, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x1a, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x12, 0x41,
	0x64, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x10, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x13, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x09, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x65,
	0x77, 0x73, 0x12, 0x12, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4e,
	0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x16, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e,
	0x65, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x10, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4e,
	0x65, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x4e, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5e, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6b, 0x65,
	0x73, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73,
	0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x46, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69,
	0x6b, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x4c,
	0x69, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x65,
	0x77, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x65, 0x77,
	0x73, 0x4c, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x16,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x16, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x66, 0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x24, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x6c, 0x66, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x6c, 0x69,
	0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1d,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x4c, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a,
	0x13, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69,
	0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x19, 0x6c, 0x69, 0x73,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69,
	0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x87, 0x01, 0x0a, 0x22, 0x67, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x42,
	0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x67,
	0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x67, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x19, 0x67, 0x65,
	0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x42, 0x79, 0x44, 0x61, 0x79, 0x12, 0x26, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x67,
	0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x42, 0x79, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x42, 0x79, 0x44, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x16, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12,
	0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x19, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x79, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x26, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x79, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x21, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x22, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x24, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a,
	0x1d, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x2a,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x1c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x2c, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x4d, 0x75, 0x74, 0x65, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x4d,
	0x75, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x42, 0x0d,
	0x5a, 0x0b, 0x2e, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x3b, 0x6e, 0x65, 0x77, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_news_news_proto_rawDescOnce sync.Once
	file_news_news_proto_rawDescData = file_news_news_proto_rawDesc
)

func file_news_news_proto_rawDescGZIP() []byte {
	file_news_news_proto_rawDescOnce.Do(func() {
		file_news_news_proto_rawDescData = protoimpl.X.CompressGZIP(file_news_news_proto_rawDescData)
	})
	return file_news_news_proto_rawDescData
}

var file_news_news_proto_msgTypes = make([]protoimpl.MessageInfo, 139)
var file_news_news_proto_goTypes = []interface{}{
	(*CommonResponse)(nil),                             // 0: news.commonResponse
	(*Official)(nil),                                   // 1: news.Official
	(*OfficialAccountResponse)(nil),                    // 2: news.OfficialAccountResponse
	(*RegisterOfficialRequest)(nil),                    // 3: news.registerOfficialRequest
	(*GetSelfOfficialInfoRequest)(nil),                 // 4: news.getSelfOfficialInfoRequest
	(*SelfUserInfo)(nil),                               // 5: news.selfUserInfo
	(*SelfOfficialInfo)(nil),                           // 6: news.selfOfficialInfo
	(*GetSelfOfficialInfoResponse)(nil),                // 7: news.getSelfOfficialInfoResponse
	(*SetSelfOfficialInfoRequest)(nil),                 // 8: news.setSelfOfficialInfoRequest
	(*GetOfficialAccountsReq)(nil),                     // 9: news.GetOfficialAccountsReq
	(*GetOfficialAccountsResp)(nil),                    // 10: news.GetOfficialAccountsResp
	(*DeleteOfficialAccountsReq)(nil),                  // 11: news.DeleteOfficialAccountsReq
	(*DeleteOfficialAccountsResp)(nil),                 // 12: news.DeleteOfficialAccountsResp
	(*AlterOfficialAccountReq)(nil),                    // 13: news.AlterOfficialAccountReq
	(*AlterOfficialAccountResp)(nil),                   // 14: news.AlterOfficialAccountResp
	(*AddOfficialAccountReq)(nil),                      // 15: news.AddOfficialAccountReq
	(*AddOfficialAccountResp)(nil),                     // 16: news.AddOfficialAccountResp
	(*ProcessReq)(nil),                                 // 17: news.ProcessReq
	(*ProcessResp)(nil),                                // 18: news.ProcessResp
	(*FollowOfficialAccountRequest)(nil),               // 19: news.followOfficialAccountRequest
	(*UnfollowOfficialAccountRequest)(nil),             // 20: news.unfollowOfficialAccountRequest
	(*UpdateOfficialFollowSettingsRequest)(nil),        // 21: news.UpdateOfficialFollowSettingsRequest
	(*OfficialFollowSettingsByOfficialIDRequest)(nil),  // 22: news.OfficialFollowSettingsByOfficialIDRequest
	(*OfficialFollowSettingsByOfficialIDResponse)(nil), // 23: news.OfficialFollowSettingsByOfficialIDResponse
	(*BlockOfficialFollowsRequest)(nil),                // 24: news.blockOfficialFollowsRequest
	(*UnblockOfficialFollowsRequest)(nil),              // 25: news.unblockOfficialFollowsRequest
	(*DeleteOfficialFollowsRequest)(nil),               // 26: news.deleteOfficialFollowsRequest
	(*LikeArticleRequest)(nil),                         // 27: news.likeArticleRequest
	(*UnlikeArticleRequest)(nil),                       // 28: news.unlikeArticleRequest
	(*LikeArticleCommentRequest)(nil),                  // 29: news.likeArticleCommentRequest
	(*UnlikeArticleCommentRequest)(nil),                // 30: news.unlikeArticleCommentRequest
	(*OfficialLikeArticleCommentRequest)(nil),          // 31: news.officialLikeArticleCommentRequest
	(*OfficialUnlikeArticleCommentRequest)(nil),        // 32: news.officialUnlikeArticleCommentRequest
	(*OfficialDeleteArticleCommentRequest)(nil),        // 33: news.officialDeleteArticleCommentRequest
	(*OfficialHideArticleCommentRequest)(nil),          // 34: news.officialHideArticleCommentRequest
	(*OfficialShowArticleCommentRequest)(nil),          // 35: news.officialShowArticleCommentRequest
	(*DeleteArticleLikeRequest)(nil),                   // 36: news.deleteArticleLikeRequest
	(*AddArticleCommentRequest)(nil),                   // 37: news.addArticleCommentRequest
	(*AddArticleCommentResponse)(nil),                  // 38: news.addArticleCommentResponse
	(*UserArticleSummary)(nil),                         // 39: news.userArticleSummary
	(*ListArticlesTimeLineRequest)(nil),                // 40: news.listArticlesTimeLineRequest
	(*ListArticlesTimeLineResponseEntry)(nil),          // 41: news.listArticlesTimeLineResponseEntry
	(*ListArticlesTimeLineResponse)(nil),               // 42: news.listArticlesTimeLineResponse
	(*ArticleLikeResponse)(nil),                        // 43: news.ArticleLikeResponse
	(*ArticleCommentResp)(nil),                         // 44: news.ArticleCommentResp
	(*Article)(nil),                                    // 45: news.Article
	(*ArticleComment)(nil),                             // 46: news.ArticleComment
	(*ArticleLike)(nil),                                // 47: news.ArticleLike
	(*ArticleRepost)(nil),                              // 48: news.ArticleRepost
	(*GetNewsReq)(nil),                                 // 49: news.GetNewsReq
	(*GetNewsResp)(nil),                                // 50: news.GetNewsResp
	(*DeleteNewsReq)(nil),                              // 51: news.DeleteNewsReq
	(*DeleteNewsResp)(nil),                             // 52: news.DeleteNewsResp
	(*AlterNewsReq)(nil),                               // 53: news.AlterNewsReq
	(*AlterNewsResp)(nil),                              // 54: news.AlterNewsResp
	(*ChangePrivacyReq)(nil),                           // 55: news.ChangePrivacyReq
	(*ChangePrivacyResp)(nil),                          // 56: news.ChangePrivacyResp
	(*GetNewsCommentsReq)(nil),                         // 57: news.GetNewsCommentsReq
	(*GetNewsCommentsResp)(nil),                        // 58: news.GetNewsCommentsResp
	(*RemoveNewsCommentsReq)(nil),                      // 59: news.RemoveNewsCommentsReq
	(*RemoveNewsCommentsResp)(nil),                     // 60: news.RemoveNewsCommentsResp
	(*AlterNewsCommentReq)(nil),                        // 61: news.AlterNewsCommentReq
	(*AlterNewsCommentResp)(nil),                       // 62: news.AlterNewsCommentResp
	(*ChangeNewsCommentStatusReq)(nil),                 // 63: news.ChangeNewsCommentStatusReq
	(*ChangeNewsCommentStatusResp)(nil),                // 64: news.ChangeNewsCommentStatusResp
	(*GetNewsLikesReq)(nil),                            // 65: news.GetNewsLikesReq
	(*GetNewsLikesResp)(nil),                           // 66: news.GetNewsLikesResp
	(*RemoveNewsLikesReq)(nil),                         // 67: news.RemoveNewsLikesReq
	(*RemoveNewsLikesResp)(nil),                        // 68: news.RemoveNewsLikesResp
	(*ChangeNewsLikeStatusReq)(nil),                    // 69: news.ChangeNewsLikeStatusReq
	(*ChangeNewsLikeStatusResp)(nil),                   // 70: news.ChangeNewsLikeStatusResp
	(*GetRepostArticlesReq)(nil),                       // 71: news.GetRepostArticlesReq
	(*GetRepostArticlesResp)(nil),                      // 72: news.GetRepostArticlesResp
	(*CreateArticleReq)(nil),                           // 73: news.CreateArticleReq
	(*UpdateArticleReq)(nil),                           // 74: news.UpdateArticleReq
	(*DeleteArticleReq)(nil),                           // 75: news.DeleteArticleReq
	(*ListOfficialArticlesReq)(nil),                    // 76: news.ListOfficialArticlesReq
	(*ArticleSummary)(nil),                             // 77: news.articleSummary
	(*ListOfficialArticlesResp)(nil),                   // 78: news.ListOfficialArticlesResp
	(*GetOfficialArticleReq)(nil),                      // 79: news.GetOfficialArticleReq
	(*GetOfficialArticleResp)(nil),                     // 80: news.GetOfficialArticleResp
	(*ListSelfOfficialFollowsRequest)(nil),             // 81: news.listSelfOfficialFollowsRequest
	(*OfficialFollowEntry)(nil),                        // 82: news.officialFollowEntry
	(*ListSelfOfficialFollowsResponse)(nil),            // 83: news.listSelfOfficialFollowsResponse
	(*ListArticleLikesRequest)(nil),                    // 84: news.listArticleLikesRequest
	(*ArticleLikeEntry)(nil),                           // 85: news.articleLikeEntry
	(*ListArticleLikesResponse)(nil),                   // 86: news.listArticleLikesResponse
	(*ListArticleCommentsRequest)(nil),                 // 87: news.listArticleCommentsRequest
	(*CommentEntry)(nil),                               // 88: news.commentEntry
	(*ListArticleCommentRepliesResponse)(nil),          // 89: news.listArticleCommentRepliesResponse
	(*ArticleCommentEntry)(nil),                        // 90: news.articleCommentEntry
	(*ListArticleCommentsResponse)(nil),                // 91: news.listArticleCommentsResponse
	(*ListArticleCommentRepliesRequest)(nil),           // 92: news.listArticleCommentRepliesRequest
	(*ListUserArticleCommentsRequest)(nil),             // 93: news.listUserArticleCommentsRequest
	(*UserArticleCommentEntry)(nil),                    // 94: news.userArticleCommentEntry
	(*ListUserArticleCommentsResponse)(nil),            // 95: news.listUserArticleCommentsResponse
	(*ListUserArticleCommentRepliesRequest)(nil),       // 96: news.listUserArticleCommentRepliesRequest
	(*ListUserArticleCommentRepliesResponse)(nil),      // 97: news.listUserArticleCommentRepliesResponse
	(*GetUserFollowListRequest)(nil),                   // 98: news.getUserFollowListRequest
	(*UserFollow)(nil),                                 // 99: news.UserFollow
	(*GetUserFollowListResponse)(nil),                  // 100: news.getUserFollowListResponse
	(*GetOfficialProfileRequest)(nil),                  // 101: news.getOfficialProfileRequest
	(*GetOfficialProfileResponse)(nil),                 // 102: news.getOfficialProfileResponse
	(*GetOfficialRecentAnalyticsByGenderRequest)(nil),  // 103: news.getOfficialRecentAnalyticsByGenderRequest
	(*RecentAnalyticsEntryGender)(nil),                 // 104: news.recentAnalyticsEntryGender
	(*RecentAnalyticsEntry)(nil),                       // 105: news.recentAnalyticsEntry
	(*GetOfficialRecentAnalyticsByGenderResponse)(nil), // 106: news.getOfficialRecentAnalyticsByGenderResponse
	(*GetOfficialAnalyticsByDayRequest)(nil),           // 107: news.getOfficialAnalyticsByDayRequest
	(*AnalyticsByDayEntry)(nil),                        // 108: news.analyticsByDayEntry
	(*GetOfficialAnalyticsByDayResponse)(nil),          // 109: news.getOfficialAnalyticsByDayResponse
	(*SearchOfficialAccountsRequest)(nil),              // 110: news.searchOfficialAccountsRequest
	(*SearchOfficialAccountsResponse)(nil),             // 111: news.searchOfficialAccountsResponse
	(*SearchArticlesRequest)(nil),                      // 112: news.searchArticlesRequest
	(*SearchArticlesEntry)(nil),                        // 113: news.searchArticlesEntry
	(*SearchArticlesResponse)(nil),                     // 114: news.searchArticlesResponse
	(*GetUserArticleByArticleIDRequest)(nil),           // 115: news.getUserArticleByArticleIDRequest
	(*InsertArticleReadRequest)(nil),                   // 116: news.insertArticleReadRequest
	(*UserArticle)(nil),                                // 117: news.UserArticle
	(*GetUserArticleByArticleIDResponse)(nil),          // 118: news.getUserArticleByArticleIDResponse
	(*ListUserArticleReadsRequest)(nil),                // 119: news.listUserArticleReadsRequest
	(*ListUserArticleReadsResponseEntry)(nil),          // 120: news.listUserArticleReadsResponseEntry
	(*ListUserArticleReadsResponse)(nil),               // 121: news.listUserArticleReadsResponse
	(*ClearUserArticleReadsRequest)(nil),               // 122: news.clearUserArticleReadsRequest
	(*DeleteArticleCommentRequest)(nil),                // 123: news.DeleteArticleCommentRequest
	(*FollowedOfficialConversationRequest)(nil),        // 124: news.FollowedOfficialConversationRequest
	(*FollowedOfficialConversationResponse)(nil),       // 125: news.FollowedOfficialConversationResponse
	(*GetOfficialIDNumberAvailabilityRequest)(nil),     // 126: news.GetOfficialIDNumberAvailabilityRequest
	(*GetOfficialIDNumberAvailabilityResponse)(nil),    // 127: news.GetOfficialIDNumberAvailabilityResponse
	(*OfficialFollowers)(nil),                          // 128: news.OfficialFollowers
	(*GetOfficialFollowersReq)(nil),                    // 129: news.GetOfficialFollowersReq
	(*GetOfficialFollowersResp)(nil),                   // 130: news.GetOfficialFollowersResp
	(*BlockFollowerReq)(nil),                           // 131: news.BlockFollowerReq
	(*BlockFollowerResp)(nil),                          // 132: news.BlockFollowerResp
	(*MuteFollowerReq)(nil),                            // 133: news.MuteFollowerReq
	(*MuteFollowerResp)(nil),                           // 134: news.MuteFollowerResp
	(*UsersAutoGenerate)(nil),                          // 135: news.UsersAutoGenerate
	(*RemoveFollowersReq)(nil),                         // 136: news.RemoveFollowersReq
	(*RemoveFollowersResp)(nil),                        // 137: news.RemoveFollowersResp
	(*GetSelfOfficialInfoResponse_Data)(nil),           // 138: news.getSelfOfficialInfoResponse.Data
	(*admin_cms.InterestResp)(nil),                     // 139: admin_cms.InterestResp
	(*sdk_ws.RequestPagination)(nil),                   // 140: server_api_params.RequestPagination
	(*sdk_ws.ResponsePagination)(nil),                  // 141: server_api_params.ResponsePagination
}
var file_news_news_proto_depIdxs = []int32{
	1,   // 0: news.OfficialAccountResponse.official:type_name -> news.Official
	139, // 1: news.OfficialAccountResponse.Interests:type_name -> admin_cms.InterestResp
	138, // 2: news.getSelfOfficialInfoResponse.data:type_name -> news.getSelfOfficialInfoResponse.Data
	140, // 3: news.GetOfficialAccountsReq.Pagination:type_name -> server_api_params.RequestPagination
	0,   // 4: news.GetOfficialAccountsResp.CommonResp:type_name -> news.commonResponse
	2,   // 5: news.GetOfficialAccountsResp.OfficialAccount:type_name -> news.OfficialAccountResponse
	141, // 6: news.GetOfficialAccountsResp.Pagination:type_name -> server_api_params.ResponsePagination
	0,   // 7: news.DeleteOfficialAccountsResp.CommonResp:type_name -> news.commonResponse
	1,   // 8: news.AlterOfficialAccountReq.Official:type_name -> news.Official
	0,   // 9: news.AlterOfficialAccountResp.CommonResp:type_name -> news.commonResponse
	0,   // 10: news.AddOfficialAccountResp.CommonResp:type_name -> news.commonResponse
	0,   // 11: news.ProcessResp.CommonResp:type_name -> news.commonResponse
	0,   // 12: news.OfficialFollowSettingsByOfficialIDResponse.CommonResp:type_name -> news.commonResponse
	99,  // 13: news.OfficialFollowSettingsByOfficialIDResponse.UserFollow:type_name -> news.UserFollow
	0,   // 14: news.addArticleCommentResponse.commonResp:type_name -> news.commonResponse
	39,  // 15: news.listArticlesTimeLineResponseEntry.article:type_name -> news.userArticleSummary
	99,  // 16: news.listArticlesTimeLineResponseEntry.official:type_name -> news.UserFollow
	0,   // 17: news.listArticlesTimeLineResponse.commonResp:type_name -> news.commonResponse
	41,  // 18: news.listArticlesTimeLineResponse.entries:type_name -> news.listArticlesTimeLineResponseEntry
	140, // 19: news.GetNewsReq.Pagination:type_name -> server_api_params.RequestPagination
	0,   // 20: news.GetNewsResp.CommonResp:type_name -> news.commonResponse
	45,  // 21: news.GetNewsResp.Articles:type_name -> news.Article
	141, // 22: news.GetNewsResp.Pagination:type_name -> server_api_params.ResponsePagination
	0,   // 23: news.DeleteNewsResp.CommonResp:type_name -> news.commonResponse
	0,   // 24: news.AlterNewsResp.CommonResp:type_name -> news.commonResponse
	0,   // 25: news.ChangePrivacyResp.CommonResp:type_name -> news.commonResponse
	140, // 26: news.GetNewsCommentsReq.Pagination:type_name -> server_api_params.RequestPagination
	0,   // 27: news.GetNewsCommentsResp.CommonResp:type_name -> news.commonResponse
	46,  // 28: news.GetNewsCommentsResp.Comments:type_name -> news.ArticleComment
	141, // 29: news.GetNewsCommentsResp.Pagination:type_name -> server_api_params.ResponsePagination
	0,   // 30: news.RemoveNewsCommentsResp.CommonResp:type_name -> news.commonResponse
	0,   // 31: news.AlterNewsCommentResp.CommonResp:type_name -> news.commonResponse
	0,   // 32: news.ChangeNewsCommentStatusResp.CommonResp:type_name -> news.commonResponse
	140, // 33: news.GetNewsLikesReq.Pagination:type_name -> server_api_params.RequestPagination
	0,   // 34: news.GetNewsLikesResp.CommonResp:type_name -> news.commonResponse
	47,  // 35: news.GetNewsLikesResp.Likes:type_name -> news.ArticleLike
	141, // 36: news.GetNewsLikesResp.Pagination:type_name -> server_api_params.ResponsePagination
	0,   // 37: news.RemoveNewsLikesResp.CommonResp:type_name -> news.commonResponse
	0,   // 38: news.ChangeNewsLikeStatusResp.CommonResp:type_name -> news.commonResponse
	140, // 39: news.GetRepostArticlesReq.Pagination:type_name -> server_api_params.RequestPagination
	0,   // 40: news.GetRepostArticlesResp.CommonResp:type_name -> news.commonResponse
	48,  // 41: news.GetRepostArticlesResp.reposts:type_name -> news.ArticleRepost
	141, // 42: news.GetRepostArticlesResp.Pagination:type_name -> server_api_params.ResponsePagination
	0,   // 43: news.ListOfficialArticlesResp.commonResp:type_name -> news.commonResponse
	77,  // 44: news.ListOfficialArticlesResp.articles:type_name -> news.articleSummary
	0,   // 45: news.GetOfficialArticleResp.CommonResp:type_name -> news.commonResponse
	45,  // 46: news.GetOfficialArticleResp.article:type_name -> news.Article
	0,   // 47: news.listSelfOfficialFollowsResponse.CommonResp:type_name -> news.commonResponse
	82,  // 48: news.listSelfOfficialFollowsResponse.follows:type_name -> news.officialFollowEntry
	0,   // 49: news.listArticleLikesResponse.CommonResp:type_name -> news.commonResponse
	85,  // 50: news.listArticleLikesResponse.likes:type_name -> news.articleLikeEntry
	0,   // 51: news.listArticleCommentRepliesResponse.CommonResp:type_name -> news.commonResponse
	88,  // 52: news.listArticleCommentRepliesResponse.replies:type_name -> news.commentEntry
	88,  // 53: news.articleCommentEntry.comment:type_name -> news.commentEntry
	89,  // 54: news.articleCommentEntry.replies:type_name -> news.listArticleCommentRepliesResponse
	0,   // 55: news.listArticleCommentsResponse.CommonResp:type_name -> news.commonResponse
	90,  // 56: news.listArticleCommentsResponse.comments:type_name -> news.articleCommentEntry
	88,  // 57: news.userArticleCommentEntry.comment:type_name -> news.commentEntry
	88,  // 58: news.userArticleCommentEntry.topReply:type_name -> news.commentEntry
	0,   // 59: news.listUserArticleCommentsResponse.CommonResp:type_name -> news.commonResponse
	94,  // 60: news.listUserArticleCommentsResponse.comments:type_name -> news.userArticleCommentEntry
	0,   // 61: news.listUserArticleCommentRepliesResponse.CommonResp:type_name -> news.commonResponse
	88,  // 62: news.listUserArticleCommentRepliesResponse.comments:type_name -> news.commentEntry
	0,   // 63: news.getUserFollowListResponse.CommonResp:type_name -> news.commonResponse
	99,  // 64: news.getUserFollowListResponse.follows:type_name -> news.UserFollow
	0,   // 65: news.getOfficialProfileResponse.CommonResp:type_name -> news.commonResponse
	99,  // 66: news.getOfficialProfileResponse.follow:type_name -> news.UserFollow
	104, // 67: news.recentAnalyticsEntry.likesByGender:type_name -> news.recentAnalyticsEntryGender
	104, // 68: news.recentAnalyticsEntry.commentsByGender:type_name -> news.recentAnalyticsEntryGender
	104, // 69: news.recentAnalyticsEntry.followsByGender:type_name -> news.recentAnalyticsEntryGender
	104, // 70: news.recentAnalyticsEntry.readsByGender:type_name -> news.recentAnalyticsEntryGender
	104, // 71: news.recentAnalyticsEntry.uniqueReadsByGender:type_name -> news.recentAnalyticsEntryGender
	0,   // 72: news.getOfficialRecentAnalyticsByGenderResponse.CommonResp:type_name -> news.commonResponse
	105, // 73: news.getOfficialRecentAnalyticsByGenderResponse.current:type_name -> news.recentAnalyticsEntry
	105, // 74: news.getOfficialRecentAnalyticsByGenderResponse.previous:type_name -> news.recentAnalyticsEntry
	0,   // 75: news.getOfficialAnalyticsByDayResponse.CommonResp:type_name -> news.commonResponse
	108, // 76: news.getOfficialAnalyticsByDayResponse.entries:type_name -> news.analyticsByDayEntry
	0,   // 77: news.searchOfficialAccountsResponse.commonResp:type_name -> news.commonResponse
	99,  // 78: news.searchOfficialAccountsResponse.entries:type_name -> news.UserFollow
	39,  // 79: news.searchArticlesEntry.article:type_name -> news.userArticleSummary
	99,  // 80: news.searchArticlesEntry.official:type_name -> news.UserFollow
	0,   // 81: news.searchArticlesResponse.commonResp:type_name -> news.commonResponse
	113, // 82: news.searchArticlesResponse.entries:type_name -> news.searchArticlesEntry
	0,   // 83: news.getUserArticleByArticleIDResponse.commonResp:type_name -> news.commonResponse
	117, // 84: news.getUserArticleByArticleIDResponse.article:type_name -> news.UserArticle
	99,  // 85: news.getUserArticleByArticleIDResponse.official:type_name -> news.UserFollow
	39,  // 86: news.listUserArticleReadsResponseEntry.article:type_name -> news.userArticleSummary
	99,  // 87: news.listUserArticleReadsResponseEntry.official:type_name -> news.UserFollow
	0,   // 88: news.listUserArticleReadsResponse.commonResp:type_name -> news.commonResponse
	120, // 89: news.listUserArticleReadsResponse.entries:type_name -> news.listUserArticleReadsResponseEntry
	45,  // 90: news.FollowedOfficialConversationResponse.articles:type_name -> news.Article
	0,   // 91: news.GetOfficialIDNumberAvailabilityResponse.CommonResp:type_name -> news.commonResponse
	140, // 92: news.GetOfficialFollowersReq.Pagination:type_name -> server_api_params.RequestPagination
	0,   // 93: news.GetOfficialFollowersResp.CommResp:type_name -> news.commonResponse
	141, // 94: news.GetOfficialFollowersResp.Pagination:type_name -> server_api_params.ResponsePagination
	128, // 95: news.GetOfficialFollowersResp.OfficialFollowers:type_name -> news.OfficialFollowers
	0,   // 96: news.BlockFollowerResp.CommResp:type_name -> news.commonResponse
	0,   // 97: news.MuteFollowerResp.CommResp:type_name -> news.commonResponse
	135, // 98: news.RemoveFollowersReq.Users:type_name -> news.UsersAutoGenerate
	0,   // 99: news.RemoveFollowersResp.CommResp:type_name -> news.commonResponse
	5,   // 100: news.getSelfOfficialInfoResponse.Data.userInfo:type_name -> news.selfUserInfo
	6,   // 101: news.getSelfOfficialInfoResponse.Data.officialInfo:type_name -> news.selfOfficialInfo
	3,   // 102: news.news.registerOfficial:input_type -> news.registerOfficialRequest
	4,   // 103: news.news.getSelfOfficialInfo:input_type -> news.getSelfOfficialInfoRequest
	8,   // 104: news.news.setSelfOfficialInfo:input_type -> news.setSelfOfficialInfoRequest
	19,  // 105: news.news.followOfficialAccount:input_type -> news.followOfficialAccountRequest
	20,  // 106: news.news.unfollowOfficialAccount:input_type -> news.unfollowOfficialAccountRequest
	21,  // 107: news.news.updateOfficialFollowSettings:input_type -> news.UpdateOfficialFollowSettingsRequest
	22,  // 108: news.news.getOfficialFollowSettingsByOfficialID:input_type -> news.OfficialFollowSettingsByOfficialIDRequest
	98,  // 109: news.news.getUserFollowList:input_type -> news.getUserFollowListRequest
	24,  // 110: news.news.blockOfficialFollows:input_type -> news.blockOfficialFollowsRequest
	25,  // 111: news.news.unblockOfficialFollows:input_type -> news.unblockOfficialFollowsRequest
	26,  // 112: news.news.deleteOfficialFollows:input_type -> news.deleteOfficialFollowsRequest
	27,  // 113: news.news.likeArticle:input_type -> news.likeArticleRequest
	28,  // 114: news.news.unlikeArticle:input_type -> news.unlikeArticleRequest
	36,  // 115: news.news.deleteArticleLike:input_type -> news.deleteArticleLikeRequest
	37,  // 116: news.news.addArticleComment:input_type -> news.addArticleCommentRequest
	40,  // 117: news.news.listArticlesTimeLine:input_type -> news.listArticlesTimeLineRequest
	29,  // 118: news.news.likeArticleComment:input_type -> news.likeArticleCommentRequest
	30,  // 119: news.news.unlikeArticleComment:input_type -> news.unlikeArticleCommentRequest
	31,  // 120: news.news.officialLikeArticleComment:input_type -> news.officialLikeArticleCommentRequest
	32,  // 121: news.news.officialUnlikeArticleComment:input_type -> news.officialUnlikeArticleCommentRequest
	33,  // 122: news.news.officialDeleteArticleComment:input_type -> news.officialDeleteArticleCommentRequest
	34,  // 123: news.news.officialHideArticleComment:input_type -> news.officialHideArticleCommentRequest
	35,  // 124: news.news.officialShowArticleComment:input_type -> news.officialShowArticleCommentRequest
	123, // 125: news.news.DeleteArticleComment:input_type -> news.DeleteArticleCommentRequest
	9,   // 126: news.news.GetOfficialAccounts:input_type -> news.GetOfficialAccountsReq
	11,  // 127: news.news.DeleteOfficialAccounts:input_type -> news.DeleteOfficialAccountsReq
	13,  // 128: news.news.AlterOfficialAccount:input_type -> news.AlterOfficialAccountReq
	15,  // 129: news.news.AddOfficialAccount:input_type -> news.AddOfficialAccountReq
	17,  // 130: news.news.Process:input_type -> news.ProcessReq
	49,  // 131: news.news.GetNews:input_type -> news.GetNewsReq
	51,  // 132: news.news.DeleteNews:input_type -> news.DeleteNewsReq
	53,  // 133: news.news.AlterNews:input_type -> news.AlterNewsReq
	55,  // 134: news.news.ChangePrivacy:input_type -> news.ChangePrivacyReq
	57,  // 135: news.news.GetNewsComments:input_type -> news.GetNewsCommentsReq
	59,  // 136: news.news.RemoveNewsComments:input_type -> news.RemoveNewsCommentsReq
	61,  // 137: news.news.AlterNewsComment:input_type -> news.AlterNewsCommentReq
	63,  // 138: news.news.ChangeNewsCommentStatus:input_type -> news.ChangeNewsCommentStatusReq
	65,  // 139: news.news.GetNewsLikes:input_type -> news.GetNewsLikesReq
	67,  // 140: news.news.RemoveNewsLikes:input_type -> news.RemoveNewsLikesReq
	69,  // 141: news.news.ChangeNewsLikeStatus:input_type -> news.ChangeNewsLikeStatusReq
	71,  // 142: news.news.GetRepostArticles:input_type -> news.GetRepostArticlesReq
	73,  // 143: news.news.CreateArticle:input_type -> news.CreateArticleReq
	74,  // 144: news.news.UpdateArticle:input_type -> news.UpdateArticleReq
	75,  // 145: news.news.DeleteArticle:input_type -> news.DeleteArticleReq
	76,  // 146: news.news.ListOfficialArticles:input_type -> news.ListOfficialArticlesReq
	79,  // 147: news.news.GetOfficialArticle:input_type -> news.GetOfficialArticleReq
	81,  // 148: news.news.listSelfOfficialFollows:input_type -> news.listSelfOfficialFollowsRequest
	84,  // 149: news.news.listArticleLikes:input_type -> news.listArticleLikesRequest
	87,  // 150: news.news.listArticleComments:input_type -> news.listArticleCommentsRequest
	92,  // 151: news.news.listArticleCommentReplies:input_type -> news.listArticleCommentRepliesRequest
	101, // 152: news.news.getOfficialProfile:input_type -> news.getOfficialProfileRequest
	103, // 153: news.news.getOfficialRecentAnalyticsByGender:input_type -> news.getOfficialRecentAnalyticsByGenderRequest
	107, // 154: news.news.getOfficialAnalyticsByDay:input_type -> news.getOfficialAnalyticsByDayRequest
	110, // 155: news.news.searchOfficialAccounts:input_type -> news.searchOfficialAccountsRequest
	112, // 156: news.news.searchArticles:input_type -> news.searchArticlesRequest
	115, // 157: news.news.getUserArticleByArticleID:input_type -> news.getUserArticleByArticleIDRequest
	116, // 158: news.news.insertArticleRead:input_type -> news.insertArticleReadRequest
	119, // 159: news.news.listUserArticleReads:input_type -> news.listUserArticleReadsRequest
	122, // 160: news.news.clearUserArticleReads:input_type -> news.clearUserArticleReadsRequest
	93,  // 161: news.news.listUserArticleComments:input_type -> news.listUserArticleCommentsRequest
	96,  // 162: news.news.listUserArticleCommentReplies:input_type -> news.listUserArticleCommentRepliesRequest
	124, // 163: news.news.FollowedOfficialConversation:input_type -> news.FollowedOfficialConversationRequest
	126, // 164: news.news.GetOfficialIDNumberAvailability:input_type -> news.GetOfficialIDNumberAvailabilityRequest
	129, // 165: news.news.GetOfficialFollowers:input_type -> news.GetOfficialFollowersReq
	131, // 166: news.news.BlockFollower:input_type -> news.BlockFollowerReq
	133, // 167: news.news.MuteFollower:input_type -> news.MuteFollowerReq
	136, // 168: news.news.RemoveFollowers:input_type -> news.RemoveFollowersReq
	0,   // 169: news.news.registerOfficial:output_type -> news.commonResponse
	7,   // 170: news.news.getSelfOfficialInfo:output_type -> news.getSelfOfficialInfoResponse
	0,   // 171: news.news.setSelfOfficialInfo:output_type -> news.commonResponse
	0,   // 172: news.news.followOfficialAccount:output_type -> news.commonResponse
	0,   // 173: news.news.unfollowOfficialAccount:output_type -> news.commonResponse
	0,   // 174: news.news.updateOfficialFollowSettings:output_type -> news.commonResponse
	23,  // 175: news.news.getOfficialFollowSettingsByOfficialID:output_type -> news.OfficialFollowSettingsByOfficialIDResponse
	100, // 176: news.news.getUserFollowList:output_type -> news.getUserFollowListResponse
	0,   // 177: news.news.blockOfficialFollows:output_type -> news.commonResponse
	0,   // 178: news.news.unblockOfficialFollows:output_type -> news.commonResponse
	0,   // 179: news.news.deleteOfficialFollows:output_type -> news.commonResponse
	0,   // 180: news.news.likeArticle:output_type -> news.commonResponse
	0,   // 181: news.news.unlikeArticle:output_type -> news.commonResponse
	0,   // 182: news.news.deleteArticleLike:output_type -> news.commonResponse
	38,  // 183: news.news.addArticleComment:output_type -> news.addArticleCommentResponse
	42,  // 184: news.news.listArticlesTimeLine:output_type -> news.listArticlesTimeLineResponse
	0,   // 185: news.news.likeArticleComment:output_type -> news.commonResponse
	0,   // 186: news.news.unlikeArticleComment:output_type -> news.commonResponse
	0,   // 187: news.news.officialLikeArticleComment:output_type -> news.commonResponse
	0,   // 188: news.news.officialUnlikeArticleComment:output_type -> news.commonResponse
	0,   // 189: news.news.officialDeleteArticleComment:output_type -> news.commonResponse
	0,   // 190: news.news.officialHideArticleComment:output_type -> news.commonResponse
	0,   // 191: news.news.officialShowArticleComment:output_type -> news.commonResponse
	0,   // 192: news.news.DeleteArticleComment:output_type -> news.commonResponse
	10,  // 193: news.news.GetOfficialAccounts:output_type -> news.GetOfficialAccountsResp
	12,  // 194: news.news.DeleteOfficialAccounts:output_type -> news.DeleteOfficialAccountsResp
	14,  // 195: news.news.AlterOfficialAccount:output_type -> news.AlterOfficialAccountResp
	16,  // 196: news.news.AddOfficialAccount:output_type -> news.AddOfficialAccountResp
	18,  // 197: news.news.Process:output_type -> news.ProcessResp
	50,  // 198: news.news.GetNews:output_type -> news.GetNewsResp
	52,  // 199: news.news.DeleteNews:output_type -> news.DeleteNewsResp
	54,  // 200: news.news.AlterNews:output_type -> news.AlterNewsResp
	56,  // 201: news.news.ChangePrivacy:output_type -> news.ChangePrivacyResp
	58,  // 202: news.news.GetNewsComments:output_type -> news.GetNewsCommentsResp
	60,  // 203: news.news.RemoveNewsComments:output_type -> news.RemoveNewsCommentsResp
	62,  // 204: news.news.AlterNewsComment:output_type -> news.AlterNewsCommentResp
	64,  // 205: news.news.ChangeNewsCommentStatus:output_type -> news.ChangeNewsCommentStatusResp
	66,  // 206: news.news.GetNewsLikes:output_type -> news.GetNewsLikesResp
	68,  // 207: news.news.RemoveNewsLikes:output_type -> news.RemoveNewsLikesResp
	70,  // 208: news.news.ChangeNewsLikeStatus:output_type -> news.ChangeNewsLikeStatusResp
	72,  // 209: news.news.GetRepostArticles:output_type -> news.GetRepostArticlesResp
	0,   // 210: news.news.CreateArticle:output_type -> news.commonResponse
	0,   // 211: news.news.UpdateArticle:output_type -> news.commonResponse
	0,   // 212: news.news.DeleteArticle:output_type -> news.commonResponse
	78,  // 213: news.news.ListOfficialArticles:output_type -> news.ListOfficialArticlesResp
	80,  // 214: news.news.GetOfficialArticle:output_type -> news.GetOfficialArticleResp
	83,  // 215: news.news.listSelfOfficialFollows:output_type -> news.listSelfOfficialFollowsResponse
	86,  // 216: news.news.listArticleLikes:output_type -> news.listArticleLikesResponse
	91,  // 217: news.news.listArticleComments:output_type -> news.listArticleCommentsResponse
	89,  // 218: news.news.listArticleCommentReplies:output_type -> news.listArticleCommentRepliesResponse
	102, // 219: news.news.getOfficialProfile:output_type -> news.getOfficialProfileResponse
	106, // 220: news.news.getOfficialRecentAnalyticsByGender:output_type -> news.getOfficialRecentAnalyticsByGenderResponse
	109, // 221: news.news.getOfficialAnalyticsByDay:output_type -> news.getOfficialAnalyticsByDayResponse
	111, // 222: news.news.searchOfficialAccounts:output_type -> news.searchOfficialAccountsResponse
	114, // 223: news.news.searchArticles:output_type -> news.searchArticlesResponse
	118, // 224: news.news.getUserArticleByArticleID:output_type -> news.getUserArticleByArticleIDResponse
	0,   // 225: news.news.insertArticleRead:output_type -> news.commonResponse
	121, // 226: news.news.listUserArticleReads:output_type -> news.listUserArticleReadsResponse
	0,   // 227: news.news.clearUserArticleReads:output_type -> news.commonResponse
	95,  // 228: news.news.listUserArticleComments:output_type -> news.listUserArticleCommentsResponse
	97,  // 229: news.news.listUserArticleCommentReplies:output_type -> news.listUserArticleCommentRepliesResponse
	125, // 230: news.news.FollowedOfficialConversation:output_type -> news.FollowedOfficialConversationResponse
	127, // 231: news.news.GetOfficialIDNumberAvailability:output_type -> news.GetOfficialIDNumberAvailabilityResponse
	130, // 232: news.news.GetOfficialFollowers:output_type -> news.GetOfficialFollowersResp
	132, // 233: news.news.BlockFollower:output_type -> news.BlockFollowerResp
	134, // 234: news.news.MuteFollower:output_type -> news.MuteFollowerResp
	137, // 235: news.news.RemoveFollowers:output_type -> news.RemoveFollowersResp
	169, // [169:236] is the sub-list for method output_type
	102, // [102:169] is the sub-list for method input_type
	102, // [102:102] is the sub-list for extension type_name
	102, // [102:102] is the sub-list for extension extendee
	0,   // [0:102] is the sub-list for field type_name
}

func init() { file_news_news_proto_init() }
func file_news_news_proto_init() {
	if File_news_news_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_news_news_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Official); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficialAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterOfficialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSelfOfficialInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfOfficialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSelfOfficialInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSelfOfficialInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfficialAccountsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfficialAccountsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOfficialAccountsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOfficialAccountsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterOfficialAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterOfficialAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOfficialAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOfficialAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowOfficialAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnfollowOfficialAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOfficialFollowSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficialFollowSettingsByOfficialIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficialFollowSettingsByOfficialIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockOfficialFollowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockOfficialFollowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOfficialFollowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlikeArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeArticleCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlikeArticleCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficialLikeArticleCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficialUnlikeArticleCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficialDeleteArticleCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficialHideArticleCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficialShowArticleCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteArticleLikeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddArticleCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddArticleCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserArticleSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArticlesTimeLineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArticlesTimeLineResponseEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArticlesTimeLineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleLikeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleLike); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleRepost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNewsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNewsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterNewsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterNewsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePrivacyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePrivacyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsCommentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsCommentsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNewsCommentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNewsCommentsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterNewsCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterNewsCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeNewsCommentStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeNewsCommentStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsLikesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsLikesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNewsLikesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNewsLikesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeNewsLikeStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeNewsLikeStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepostArticlesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepostArticlesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateArticleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateArticleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteArticleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfficialArticlesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfficialArticlesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfficialArticleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfficialArticleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfOfficialFollowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficialFollowEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfOfficialFollowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArticleLikesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleLikeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArticleLikesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArticleCommentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArticleCommentRepliesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleCommentEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArticleCommentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArticleCommentRepliesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserArticleCommentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserArticleCommentEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserArticleCommentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserArticleCommentRepliesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserArticleCommentRepliesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFollowListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFollow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFollowListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfficialProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfficialProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfficialRecentAnalyticsByGenderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentAnalyticsEntryGender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentAnalyticsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfficialRecentAnalyticsByGenderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfficialAnalyticsByDayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsByDayEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfficialAnalyticsByDayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOfficialAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOfficialAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArticlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArticlesEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArticlesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserArticleByArticleIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertArticleReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserArticle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserArticleByArticleIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserArticleReadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserArticleReadsResponseEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserArticleReadsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearUserArticleReadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteArticleCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowedOfficialConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowedOfficialConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfficialIDNumberAvailabilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfficialIDNumberAvailabilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficialFollowers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfficialFollowersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOfficialFollowersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockFollowerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockFollowerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteFollowerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteFollowerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersAutoGenerate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFollowersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFollowersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_news_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSelfOfficialInfoResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_news_news_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_news_news_proto_msgTypes[81].OneofWrappers = []interface{}{}
	file_news_news_proto_msgTypes[115].OneofWrappers = []interface{}{}
	file_news_news_proto_msgTypes[138].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_news_news_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   139,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_news_news_proto_goTypes,
		DependencyIndexes: file_news_news_proto_depIdxs,
		MessageInfos:      file_news_news_proto_msgTypes,
	}.Build()
	File_news_news_proto = out.File
	file_news_news_proto_rawDesc = nil
	file_news_news_proto_goTypes = nil
	file_news_news_proto_depIdxs = nil
}
