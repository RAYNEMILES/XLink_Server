// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: news/news.proto

package news

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NewsClient is the client API for News service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsClient interface {
	RegisterOfficial(ctx context.Context, in *RegisterOfficialRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	GetSelfOfficialInfo(ctx context.Context, in *GetSelfOfficialInfoRequest, opts ...grpc.CallOption) (*GetSelfOfficialInfoResponse, error)
	SetSelfOfficialInfo(ctx context.Context, in *SetSelfOfficialInfoRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	FollowOfficialAccount(ctx context.Context, in *FollowOfficialAccountRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	UnfollowOfficialAccount(ctx context.Context, in *UnfollowOfficialAccountRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	UpdateOfficialFollowSettings(ctx context.Context, in *UpdateOfficialFollowSettingsRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	GetOfficialFollowSettingsByOfficialID(ctx context.Context, in *OfficialFollowSettingsByOfficialIDRequest, opts ...grpc.CallOption) (*OfficialFollowSettingsByOfficialIDResponse, error)
	GetUserFollowList(ctx context.Context, in *GetUserFollowListRequest, opts ...grpc.CallOption) (*GetUserFollowListResponse, error)
	BlockOfficialFollows(ctx context.Context, in *BlockOfficialFollowsRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	UnblockOfficialFollows(ctx context.Context, in *UnblockOfficialFollowsRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	DeleteOfficialFollows(ctx context.Context, in *DeleteOfficialFollowsRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	LikeArticle(ctx context.Context, in *LikeArticleRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	UnlikeArticle(ctx context.Context, in *UnlikeArticleRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	DeleteArticleLike(ctx context.Context, in *DeleteArticleLikeRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	AddArticleComment(ctx context.Context, in *AddArticleCommentRequest, opts ...grpc.CallOption) (*AddArticleCommentResponse, error)
	ListArticlesTimeLine(ctx context.Context, in *ListArticlesTimeLineRequest, opts ...grpc.CallOption) (*ListArticlesTimeLineResponse, error)
	LikeArticleComment(ctx context.Context, in *LikeArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	UnlikeArticleComment(ctx context.Context, in *UnlikeArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	OfficialLikeArticleComment(ctx context.Context, in *OfficialLikeArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	OfficialUnlikeArticleComment(ctx context.Context, in *OfficialUnlikeArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	OfficialDeleteArticleComment(ctx context.Context, in *OfficialDeleteArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	OfficialHideArticleComment(ctx context.Context, in *OfficialHideArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	OfficialShowArticleComment(ctx context.Context, in *OfficialShowArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	DeleteArticleComment(ctx context.Context, in *DeleteArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	GetOfficialAccounts(ctx context.Context, in *GetOfficialAccountsReq, opts ...grpc.CallOption) (*GetOfficialAccountsResp, error)
	DeleteOfficialAccounts(ctx context.Context, in *DeleteOfficialAccountsReq, opts ...grpc.CallOption) (*DeleteOfficialAccountsResp, error)
	AlterOfficialAccount(ctx context.Context, in *AlterOfficialAccountReq, opts ...grpc.CallOption) (*AlterOfficialAccountResp, error)
	AddOfficialAccount(ctx context.Context, in *AddOfficialAccountReq, opts ...grpc.CallOption) (*AddOfficialAccountResp, error)
	Process(ctx context.Context, in *ProcessReq, opts ...grpc.CallOption) (*ProcessResp, error)
	GetNews(ctx context.Context, in *GetNewsReq, opts ...grpc.CallOption) (*GetNewsResp, error)
	DeleteNews(ctx context.Context, in *DeleteNewsReq, opts ...grpc.CallOption) (*DeleteNewsResp, error)
	AlterNews(ctx context.Context, in *AlterNewsReq, opts ...grpc.CallOption) (*AlterNewsResp, error)
	ChangePrivacy(ctx context.Context, in *ChangePrivacyReq, opts ...grpc.CallOption) (*ChangePrivacyResp, error)
	GetNewsComments(ctx context.Context, in *GetNewsCommentsReq, opts ...grpc.CallOption) (*GetNewsCommentsResp, error)
	RemoveNewsComments(ctx context.Context, in *RemoveNewsCommentsReq, opts ...grpc.CallOption) (*RemoveNewsCommentsResp, error)
	AlterNewsComment(ctx context.Context, in *AlterNewsCommentReq, opts ...grpc.CallOption) (*AlterNewsCommentResp, error)
	ChangeNewsCommentStatus(ctx context.Context, in *ChangeNewsCommentStatusReq, opts ...grpc.CallOption) (*ChangeNewsCommentStatusResp, error)
	GetNewsLikes(ctx context.Context, in *GetNewsLikesReq, opts ...grpc.CallOption) (*GetNewsLikesResp, error)
	RemoveNewsLikes(ctx context.Context, in *RemoveNewsLikesReq, opts ...grpc.CallOption) (*RemoveNewsLikesResp, error)
	ChangeNewsLikeStatus(ctx context.Context, in *ChangeNewsLikeStatusReq, opts ...grpc.CallOption) (*ChangeNewsLikeStatusResp, error)
	GetRepostArticles(ctx context.Context, in *GetRepostArticlesReq, opts ...grpc.CallOption) (*GetRepostArticlesResp, error)
	CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CommonResponse, error)
	UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*CommonResponse, error)
	DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*CommonResponse, error)
	ListOfficialArticles(ctx context.Context, in *ListOfficialArticlesReq, opts ...grpc.CallOption) (*ListOfficialArticlesResp, error)
	GetOfficialArticle(ctx context.Context, in *GetOfficialArticleReq, opts ...grpc.CallOption) (*GetOfficialArticleResp, error)
	ListSelfOfficialFollows(ctx context.Context, in *ListSelfOfficialFollowsRequest, opts ...grpc.CallOption) (*ListSelfOfficialFollowsResponse, error)
	ListArticleLikes(ctx context.Context, in *ListArticleLikesRequest, opts ...grpc.CallOption) (*ListArticleLikesResponse, error)
	ListArticleComments(ctx context.Context, in *ListArticleCommentsRequest, opts ...grpc.CallOption) (*ListArticleCommentsResponse, error)
	ListArticleCommentReplies(ctx context.Context, in *ListArticleCommentRepliesRequest, opts ...grpc.CallOption) (*ListArticleCommentRepliesResponse, error)
	GetOfficialProfile(ctx context.Context, in *GetOfficialProfileRequest, opts ...grpc.CallOption) (*GetOfficialProfileResponse, error)
	GetOfficialRecentAnalyticsByGender(ctx context.Context, in *GetOfficialRecentAnalyticsByGenderRequest, opts ...grpc.CallOption) (*GetOfficialRecentAnalyticsByGenderResponse, error)
	GetOfficialAnalyticsByDay(ctx context.Context, in *GetOfficialAnalyticsByDayRequest, opts ...grpc.CallOption) (*GetOfficialAnalyticsByDayResponse, error)
	SearchOfficialAccounts(ctx context.Context, in *SearchOfficialAccountsRequest, opts ...grpc.CallOption) (*SearchOfficialAccountsResponse, error)
	SearchArticles(ctx context.Context, in *SearchArticlesRequest, opts ...grpc.CallOption) (*SearchArticlesResponse, error)
	GetUserArticleByArticleID(ctx context.Context, in *GetUserArticleByArticleIDRequest, opts ...grpc.CallOption) (*GetUserArticleByArticleIDResponse, error)
	InsertArticleRead(ctx context.Context, in *InsertArticleReadRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	ListUserArticleReads(ctx context.Context, in *ListUserArticleReadsRequest, opts ...grpc.CallOption) (*ListUserArticleReadsResponse, error)
	ClearUserArticleReads(ctx context.Context, in *ClearUserArticleReadsRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	ListUserArticleComments(ctx context.Context, in *ListUserArticleCommentsRequest, opts ...grpc.CallOption) (*ListUserArticleCommentsResponse, error)
	ListUserArticleCommentReplies(ctx context.Context, in *ListUserArticleCommentRepliesRequest, opts ...grpc.CallOption) (*ListUserArticleCommentRepliesResponse, error)
	FollowedOfficialConversation(ctx context.Context, in *FollowedOfficialConversationRequest, opts ...grpc.CallOption) (*FollowedOfficialConversationResponse, error)
	GetOfficialIDNumberAvailability(ctx context.Context, in *GetOfficialIDNumberAvailabilityRequest, opts ...grpc.CallOption) (*GetOfficialIDNumberAvailabilityResponse, error)
	GetOfficialFollowers(ctx context.Context, in *GetOfficialFollowersReq, opts ...grpc.CallOption) (*GetOfficialFollowersResp, error)
	BlockFollower(ctx context.Context, in *BlockFollowerReq, opts ...grpc.CallOption) (*BlockFollowerResp, error)
	MuteFollower(ctx context.Context, in *MuteFollowerReq, opts ...grpc.CallOption) (*MuteFollowerResp, error)
	RemoveFollowers(ctx context.Context, in *RemoveFollowersReq, opts ...grpc.CallOption) (*RemoveFollowersResp, error)
}

type newsClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsClient(cc grpc.ClientConnInterface) NewsClient {
	return &newsClient{cc}
}

func (c *newsClient) RegisterOfficial(ctx context.Context, in *RegisterOfficialRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/registerOfficial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetSelfOfficialInfo(ctx context.Context, in *GetSelfOfficialInfoRequest, opts ...grpc.CallOption) (*GetSelfOfficialInfoResponse, error) {
	out := new(GetSelfOfficialInfoResponse)
	err := c.cc.Invoke(ctx, "/news.news/getSelfOfficialInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) SetSelfOfficialInfo(ctx context.Context, in *SetSelfOfficialInfoRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/setSelfOfficialInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) FollowOfficialAccount(ctx context.Context, in *FollowOfficialAccountRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/followOfficialAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) UnfollowOfficialAccount(ctx context.Context, in *UnfollowOfficialAccountRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/unfollowOfficialAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) UpdateOfficialFollowSettings(ctx context.Context, in *UpdateOfficialFollowSettingsRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/updateOfficialFollowSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetOfficialFollowSettingsByOfficialID(ctx context.Context, in *OfficialFollowSettingsByOfficialIDRequest, opts ...grpc.CallOption) (*OfficialFollowSettingsByOfficialIDResponse, error) {
	out := new(OfficialFollowSettingsByOfficialIDResponse)
	err := c.cc.Invoke(ctx, "/news.news/getOfficialFollowSettingsByOfficialID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetUserFollowList(ctx context.Context, in *GetUserFollowListRequest, opts ...grpc.CallOption) (*GetUserFollowListResponse, error) {
	out := new(GetUserFollowListResponse)
	err := c.cc.Invoke(ctx, "/news.news/getUserFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) BlockOfficialFollows(ctx context.Context, in *BlockOfficialFollowsRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/blockOfficialFollows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) UnblockOfficialFollows(ctx context.Context, in *UnblockOfficialFollowsRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/unblockOfficialFollows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) DeleteOfficialFollows(ctx context.Context, in *DeleteOfficialFollowsRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/deleteOfficialFollows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) LikeArticle(ctx context.Context, in *LikeArticleRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/likeArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) UnlikeArticle(ctx context.Context, in *UnlikeArticleRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/unlikeArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) DeleteArticleLike(ctx context.Context, in *DeleteArticleLikeRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/deleteArticleLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) AddArticleComment(ctx context.Context, in *AddArticleCommentRequest, opts ...grpc.CallOption) (*AddArticleCommentResponse, error) {
	out := new(AddArticleCommentResponse)
	err := c.cc.Invoke(ctx, "/news.news/addArticleComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) ListArticlesTimeLine(ctx context.Context, in *ListArticlesTimeLineRequest, opts ...grpc.CallOption) (*ListArticlesTimeLineResponse, error) {
	out := new(ListArticlesTimeLineResponse)
	err := c.cc.Invoke(ctx, "/news.news/listArticlesTimeLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) LikeArticleComment(ctx context.Context, in *LikeArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/likeArticleComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) UnlikeArticleComment(ctx context.Context, in *UnlikeArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/unlikeArticleComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) OfficialLikeArticleComment(ctx context.Context, in *OfficialLikeArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/officialLikeArticleComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) OfficialUnlikeArticleComment(ctx context.Context, in *OfficialUnlikeArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/officialUnlikeArticleComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) OfficialDeleteArticleComment(ctx context.Context, in *OfficialDeleteArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/officialDeleteArticleComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) OfficialHideArticleComment(ctx context.Context, in *OfficialHideArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/officialHideArticleComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) OfficialShowArticleComment(ctx context.Context, in *OfficialShowArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/officialShowArticleComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) DeleteArticleComment(ctx context.Context, in *DeleteArticleCommentRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/DeleteArticleComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetOfficialAccounts(ctx context.Context, in *GetOfficialAccountsReq, opts ...grpc.CallOption) (*GetOfficialAccountsResp, error) {
	out := new(GetOfficialAccountsResp)
	err := c.cc.Invoke(ctx, "/news.news/GetOfficialAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) DeleteOfficialAccounts(ctx context.Context, in *DeleteOfficialAccountsReq, opts ...grpc.CallOption) (*DeleteOfficialAccountsResp, error) {
	out := new(DeleteOfficialAccountsResp)
	err := c.cc.Invoke(ctx, "/news.news/DeleteOfficialAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) AlterOfficialAccount(ctx context.Context, in *AlterOfficialAccountReq, opts ...grpc.CallOption) (*AlterOfficialAccountResp, error) {
	out := new(AlterOfficialAccountResp)
	err := c.cc.Invoke(ctx, "/news.news/AlterOfficialAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) AddOfficialAccount(ctx context.Context, in *AddOfficialAccountReq, opts ...grpc.CallOption) (*AddOfficialAccountResp, error) {
	out := new(AddOfficialAccountResp)
	err := c.cc.Invoke(ctx, "/news.news/AddOfficialAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) Process(ctx context.Context, in *ProcessReq, opts ...grpc.CallOption) (*ProcessResp, error) {
	out := new(ProcessResp)
	err := c.cc.Invoke(ctx, "/news.news/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetNews(ctx context.Context, in *GetNewsReq, opts ...grpc.CallOption) (*GetNewsResp, error) {
	out := new(GetNewsResp)
	err := c.cc.Invoke(ctx, "/news.news/GetNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) DeleteNews(ctx context.Context, in *DeleteNewsReq, opts ...grpc.CallOption) (*DeleteNewsResp, error) {
	out := new(DeleteNewsResp)
	err := c.cc.Invoke(ctx, "/news.news/DeleteNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) AlterNews(ctx context.Context, in *AlterNewsReq, opts ...grpc.CallOption) (*AlterNewsResp, error) {
	out := new(AlterNewsResp)
	err := c.cc.Invoke(ctx, "/news.news/AlterNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) ChangePrivacy(ctx context.Context, in *ChangePrivacyReq, opts ...grpc.CallOption) (*ChangePrivacyResp, error) {
	out := new(ChangePrivacyResp)
	err := c.cc.Invoke(ctx, "/news.news/ChangePrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetNewsComments(ctx context.Context, in *GetNewsCommentsReq, opts ...grpc.CallOption) (*GetNewsCommentsResp, error) {
	out := new(GetNewsCommentsResp)
	err := c.cc.Invoke(ctx, "/news.news/GetNewsComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) RemoveNewsComments(ctx context.Context, in *RemoveNewsCommentsReq, opts ...grpc.CallOption) (*RemoveNewsCommentsResp, error) {
	out := new(RemoveNewsCommentsResp)
	err := c.cc.Invoke(ctx, "/news.news/RemoveNewsComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) AlterNewsComment(ctx context.Context, in *AlterNewsCommentReq, opts ...grpc.CallOption) (*AlterNewsCommentResp, error) {
	out := new(AlterNewsCommentResp)
	err := c.cc.Invoke(ctx, "/news.news/AlterNewsComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) ChangeNewsCommentStatus(ctx context.Context, in *ChangeNewsCommentStatusReq, opts ...grpc.CallOption) (*ChangeNewsCommentStatusResp, error) {
	out := new(ChangeNewsCommentStatusResp)
	err := c.cc.Invoke(ctx, "/news.news/ChangeNewsCommentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetNewsLikes(ctx context.Context, in *GetNewsLikesReq, opts ...grpc.CallOption) (*GetNewsLikesResp, error) {
	out := new(GetNewsLikesResp)
	err := c.cc.Invoke(ctx, "/news.news/GetNewsLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) RemoveNewsLikes(ctx context.Context, in *RemoveNewsLikesReq, opts ...grpc.CallOption) (*RemoveNewsLikesResp, error) {
	out := new(RemoveNewsLikesResp)
	err := c.cc.Invoke(ctx, "/news.news/RemoveNewsLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) ChangeNewsLikeStatus(ctx context.Context, in *ChangeNewsLikeStatusReq, opts ...grpc.CallOption) (*ChangeNewsLikeStatusResp, error) {
	out := new(ChangeNewsLikeStatusResp)
	err := c.cc.Invoke(ctx, "/news.news/ChangeNewsLikeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetRepostArticles(ctx context.Context, in *GetRepostArticlesReq, opts ...grpc.CallOption) (*GetRepostArticlesResp, error) {
	out := new(GetRepostArticlesResp)
	err := c.cc.Invoke(ctx, "/news.news/GetRepostArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/CreateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/UpdateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/DeleteArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) ListOfficialArticles(ctx context.Context, in *ListOfficialArticlesReq, opts ...grpc.CallOption) (*ListOfficialArticlesResp, error) {
	out := new(ListOfficialArticlesResp)
	err := c.cc.Invoke(ctx, "/news.news/ListOfficialArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetOfficialArticle(ctx context.Context, in *GetOfficialArticleReq, opts ...grpc.CallOption) (*GetOfficialArticleResp, error) {
	out := new(GetOfficialArticleResp)
	err := c.cc.Invoke(ctx, "/news.news/GetOfficialArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) ListSelfOfficialFollows(ctx context.Context, in *ListSelfOfficialFollowsRequest, opts ...grpc.CallOption) (*ListSelfOfficialFollowsResponse, error) {
	out := new(ListSelfOfficialFollowsResponse)
	err := c.cc.Invoke(ctx, "/news.news/listSelfOfficialFollows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) ListArticleLikes(ctx context.Context, in *ListArticleLikesRequest, opts ...grpc.CallOption) (*ListArticleLikesResponse, error) {
	out := new(ListArticleLikesResponse)
	err := c.cc.Invoke(ctx, "/news.news/listArticleLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) ListArticleComments(ctx context.Context, in *ListArticleCommentsRequest, opts ...grpc.CallOption) (*ListArticleCommentsResponse, error) {
	out := new(ListArticleCommentsResponse)
	err := c.cc.Invoke(ctx, "/news.news/listArticleComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) ListArticleCommentReplies(ctx context.Context, in *ListArticleCommentRepliesRequest, opts ...grpc.CallOption) (*ListArticleCommentRepliesResponse, error) {
	out := new(ListArticleCommentRepliesResponse)
	err := c.cc.Invoke(ctx, "/news.news/listArticleCommentReplies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetOfficialProfile(ctx context.Context, in *GetOfficialProfileRequest, opts ...grpc.CallOption) (*GetOfficialProfileResponse, error) {
	out := new(GetOfficialProfileResponse)
	err := c.cc.Invoke(ctx, "/news.news/getOfficialProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetOfficialRecentAnalyticsByGender(ctx context.Context, in *GetOfficialRecentAnalyticsByGenderRequest, opts ...grpc.CallOption) (*GetOfficialRecentAnalyticsByGenderResponse, error) {
	out := new(GetOfficialRecentAnalyticsByGenderResponse)
	err := c.cc.Invoke(ctx, "/news.news/getOfficialRecentAnalyticsByGender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetOfficialAnalyticsByDay(ctx context.Context, in *GetOfficialAnalyticsByDayRequest, opts ...grpc.CallOption) (*GetOfficialAnalyticsByDayResponse, error) {
	out := new(GetOfficialAnalyticsByDayResponse)
	err := c.cc.Invoke(ctx, "/news.news/getOfficialAnalyticsByDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) SearchOfficialAccounts(ctx context.Context, in *SearchOfficialAccountsRequest, opts ...grpc.CallOption) (*SearchOfficialAccountsResponse, error) {
	out := new(SearchOfficialAccountsResponse)
	err := c.cc.Invoke(ctx, "/news.news/searchOfficialAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) SearchArticles(ctx context.Context, in *SearchArticlesRequest, opts ...grpc.CallOption) (*SearchArticlesResponse, error) {
	out := new(SearchArticlesResponse)
	err := c.cc.Invoke(ctx, "/news.news/searchArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetUserArticleByArticleID(ctx context.Context, in *GetUserArticleByArticleIDRequest, opts ...grpc.CallOption) (*GetUserArticleByArticleIDResponse, error) {
	out := new(GetUserArticleByArticleIDResponse)
	err := c.cc.Invoke(ctx, "/news.news/getUserArticleByArticleID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) InsertArticleRead(ctx context.Context, in *InsertArticleReadRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/insertArticleRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) ListUserArticleReads(ctx context.Context, in *ListUserArticleReadsRequest, opts ...grpc.CallOption) (*ListUserArticleReadsResponse, error) {
	out := new(ListUserArticleReadsResponse)
	err := c.cc.Invoke(ctx, "/news.news/listUserArticleReads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) ClearUserArticleReads(ctx context.Context, in *ClearUserArticleReadsRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/news.news/clearUserArticleReads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) ListUserArticleComments(ctx context.Context, in *ListUserArticleCommentsRequest, opts ...grpc.CallOption) (*ListUserArticleCommentsResponse, error) {
	out := new(ListUserArticleCommentsResponse)
	err := c.cc.Invoke(ctx, "/news.news/listUserArticleComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) ListUserArticleCommentReplies(ctx context.Context, in *ListUserArticleCommentRepliesRequest, opts ...grpc.CallOption) (*ListUserArticleCommentRepliesResponse, error) {
	out := new(ListUserArticleCommentRepliesResponse)
	err := c.cc.Invoke(ctx, "/news.news/listUserArticleCommentReplies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) FollowedOfficialConversation(ctx context.Context, in *FollowedOfficialConversationRequest, opts ...grpc.CallOption) (*FollowedOfficialConversationResponse, error) {
	out := new(FollowedOfficialConversationResponse)
	err := c.cc.Invoke(ctx, "/news.news/FollowedOfficialConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetOfficialIDNumberAvailability(ctx context.Context, in *GetOfficialIDNumberAvailabilityRequest, opts ...grpc.CallOption) (*GetOfficialIDNumberAvailabilityResponse, error) {
	out := new(GetOfficialIDNumberAvailabilityResponse)
	err := c.cc.Invoke(ctx, "/news.news/GetOfficialIDNumberAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) GetOfficialFollowers(ctx context.Context, in *GetOfficialFollowersReq, opts ...grpc.CallOption) (*GetOfficialFollowersResp, error) {
	out := new(GetOfficialFollowersResp)
	err := c.cc.Invoke(ctx, "/news.news/GetOfficialFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) BlockFollower(ctx context.Context, in *BlockFollowerReq, opts ...grpc.CallOption) (*BlockFollowerResp, error) {
	out := new(BlockFollowerResp)
	err := c.cc.Invoke(ctx, "/news.news/BlockFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) MuteFollower(ctx context.Context, in *MuteFollowerReq, opts ...grpc.CallOption) (*MuteFollowerResp, error) {
	out := new(MuteFollowerResp)
	err := c.cc.Invoke(ctx, "/news.news/MuteFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) RemoveFollowers(ctx context.Context, in *RemoveFollowersReq, opts ...grpc.CallOption) (*RemoveFollowersResp, error) {
	out := new(RemoveFollowersResp)
	err := c.cc.Invoke(ctx, "/news.news/RemoveFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsServer is the server API for News service.
// All implementations should embed UnimplementedNewsServer
// for forward compatibility
type NewsServer interface {
	RegisterOfficial(context.Context, *RegisterOfficialRequest) (*CommonResponse, error)
	GetSelfOfficialInfo(context.Context, *GetSelfOfficialInfoRequest) (*GetSelfOfficialInfoResponse, error)
	SetSelfOfficialInfo(context.Context, *SetSelfOfficialInfoRequest) (*CommonResponse, error)
	FollowOfficialAccount(context.Context, *FollowOfficialAccountRequest) (*CommonResponse, error)
	UnfollowOfficialAccount(context.Context, *UnfollowOfficialAccountRequest) (*CommonResponse, error)
	UpdateOfficialFollowSettings(context.Context, *UpdateOfficialFollowSettingsRequest) (*CommonResponse, error)
	GetOfficialFollowSettingsByOfficialID(context.Context, *OfficialFollowSettingsByOfficialIDRequest) (*OfficialFollowSettingsByOfficialIDResponse, error)
	GetUserFollowList(context.Context, *GetUserFollowListRequest) (*GetUserFollowListResponse, error)
	BlockOfficialFollows(context.Context, *BlockOfficialFollowsRequest) (*CommonResponse, error)
	UnblockOfficialFollows(context.Context, *UnblockOfficialFollowsRequest) (*CommonResponse, error)
	DeleteOfficialFollows(context.Context, *DeleteOfficialFollowsRequest) (*CommonResponse, error)
	LikeArticle(context.Context, *LikeArticleRequest) (*CommonResponse, error)
	UnlikeArticle(context.Context, *UnlikeArticleRequest) (*CommonResponse, error)
	DeleteArticleLike(context.Context, *DeleteArticleLikeRequest) (*CommonResponse, error)
	AddArticleComment(context.Context, *AddArticleCommentRequest) (*AddArticleCommentResponse, error)
	ListArticlesTimeLine(context.Context, *ListArticlesTimeLineRequest) (*ListArticlesTimeLineResponse, error)
	LikeArticleComment(context.Context, *LikeArticleCommentRequest) (*CommonResponse, error)
	UnlikeArticleComment(context.Context, *UnlikeArticleCommentRequest) (*CommonResponse, error)
	OfficialLikeArticleComment(context.Context, *OfficialLikeArticleCommentRequest) (*CommonResponse, error)
	OfficialUnlikeArticleComment(context.Context, *OfficialUnlikeArticleCommentRequest) (*CommonResponse, error)
	OfficialDeleteArticleComment(context.Context, *OfficialDeleteArticleCommentRequest) (*CommonResponse, error)
	OfficialHideArticleComment(context.Context, *OfficialHideArticleCommentRequest) (*CommonResponse, error)
	OfficialShowArticleComment(context.Context, *OfficialShowArticleCommentRequest) (*CommonResponse, error)
	DeleteArticleComment(context.Context, *DeleteArticleCommentRequest) (*CommonResponse, error)
	GetOfficialAccounts(context.Context, *GetOfficialAccountsReq) (*GetOfficialAccountsResp, error)
	DeleteOfficialAccounts(context.Context, *DeleteOfficialAccountsReq) (*DeleteOfficialAccountsResp, error)
	AlterOfficialAccount(context.Context, *AlterOfficialAccountReq) (*AlterOfficialAccountResp, error)
	AddOfficialAccount(context.Context, *AddOfficialAccountReq) (*AddOfficialAccountResp, error)
	Process(context.Context, *ProcessReq) (*ProcessResp, error)
	GetNews(context.Context, *GetNewsReq) (*GetNewsResp, error)
	DeleteNews(context.Context, *DeleteNewsReq) (*DeleteNewsResp, error)
	AlterNews(context.Context, *AlterNewsReq) (*AlterNewsResp, error)
	ChangePrivacy(context.Context, *ChangePrivacyReq) (*ChangePrivacyResp, error)
	GetNewsComments(context.Context, *GetNewsCommentsReq) (*GetNewsCommentsResp, error)
	RemoveNewsComments(context.Context, *RemoveNewsCommentsReq) (*RemoveNewsCommentsResp, error)
	AlterNewsComment(context.Context, *AlterNewsCommentReq) (*AlterNewsCommentResp, error)
	ChangeNewsCommentStatus(context.Context, *ChangeNewsCommentStatusReq) (*ChangeNewsCommentStatusResp, error)
	GetNewsLikes(context.Context, *GetNewsLikesReq) (*GetNewsLikesResp, error)
	RemoveNewsLikes(context.Context, *RemoveNewsLikesReq) (*RemoveNewsLikesResp, error)
	ChangeNewsLikeStatus(context.Context, *ChangeNewsLikeStatusReq) (*ChangeNewsLikeStatusResp, error)
	GetRepostArticles(context.Context, *GetRepostArticlesReq) (*GetRepostArticlesResp, error)
	CreateArticle(context.Context, *CreateArticleReq) (*CommonResponse, error)
	UpdateArticle(context.Context, *UpdateArticleReq) (*CommonResponse, error)
	DeleteArticle(context.Context, *DeleteArticleReq) (*CommonResponse, error)
	ListOfficialArticles(context.Context, *ListOfficialArticlesReq) (*ListOfficialArticlesResp, error)
	GetOfficialArticle(context.Context, *GetOfficialArticleReq) (*GetOfficialArticleResp, error)
	ListSelfOfficialFollows(context.Context, *ListSelfOfficialFollowsRequest) (*ListSelfOfficialFollowsResponse, error)
	ListArticleLikes(context.Context, *ListArticleLikesRequest) (*ListArticleLikesResponse, error)
	ListArticleComments(context.Context, *ListArticleCommentsRequest) (*ListArticleCommentsResponse, error)
	ListArticleCommentReplies(context.Context, *ListArticleCommentRepliesRequest) (*ListArticleCommentRepliesResponse, error)
	GetOfficialProfile(context.Context, *GetOfficialProfileRequest) (*GetOfficialProfileResponse, error)
	GetOfficialRecentAnalyticsByGender(context.Context, *GetOfficialRecentAnalyticsByGenderRequest) (*GetOfficialRecentAnalyticsByGenderResponse, error)
	GetOfficialAnalyticsByDay(context.Context, *GetOfficialAnalyticsByDayRequest) (*GetOfficialAnalyticsByDayResponse, error)
	SearchOfficialAccounts(context.Context, *SearchOfficialAccountsRequest) (*SearchOfficialAccountsResponse, error)
	SearchArticles(context.Context, *SearchArticlesRequest) (*SearchArticlesResponse, error)
	GetUserArticleByArticleID(context.Context, *GetUserArticleByArticleIDRequest) (*GetUserArticleByArticleIDResponse, error)
	InsertArticleRead(context.Context, *InsertArticleReadRequest) (*CommonResponse, error)
	ListUserArticleReads(context.Context, *ListUserArticleReadsRequest) (*ListUserArticleReadsResponse, error)
	ClearUserArticleReads(context.Context, *ClearUserArticleReadsRequest) (*CommonResponse, error)
	ListUserArticleComments(context.Context, *ListUserArticleCommentsRequest) (*ListUserArticleCommentsResponse, error)
	ListUserArticleCommentReplies(context.Context, *ListUserArticleCommentRepliesRequest) (*ListUserArticleCommentRepliesResponse, error)
	FollowedOfficialConversation(context.Context, *FollowedOfficialConversationRequest) (*FollowedOfficialConversationResponse, error)
	GetOfficialIDNumberAvailability(context.Context, *GetOfficialIDNumberAvailabilityRequest) (*GetOfficialIDNumberAvailabilityResponse, error)
	GetOfficialFollowers(context.Context, *GetOfficialFollowersReq) (*GetOfficialFollowersResp, error)
	BlockFollower(context.Context, *BlockFollowerReq) (*BlockFollowerResp, error)
	MuteFollower(context.Context, *MuteFollowerReq) (*MuteFollowerResp, error)
	RemoveFollowers(context.Context, *RemoveFollowersReq) (*RemoveFollowersResp, error)
}

// UnimplementedNewsServer should be embedded to have forward compatible implementations.
type UnimplementedNewsServer struct {
}

func (UnimplementedNewsServer) RegisterOfficial(context.Context, *RegisterOfficialRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOfficial not implemented")
}
func (UnimplementedNewsServer) GetSelfOfficialInfo(context.Context, *GetSelfOfficialInfoRequest) (*GetSelfOfficialInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelfOfficialInfo not implemented")
}
func (UnimplementedNewsServer) SetSelfOfficialInfo(context.Context, *SetSelfOfficialInfoRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSelfOfficialInfo not implemented")
}
func (UnimplementedNewsServer) FollowOfficialAccount(context.Context, *FollowOfficialAccountRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowOfficialAccount not implemented")
}
func (UnimplementedNewsServer) UnfollowOfficialAccount(context.Context, *UnfollowOfficialAccountRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowOfficialAccount not implemented")
}
func (UnimplementedNewsServer) UpdateOfficialFollowSettings(context.Context, *UpdateOfficialFollowSettingsRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOfficialFollowSettings not implemented")
}
func (UnimplementedNewsServer) GetOfficialFollowSettingsByOfficialID(context.Context, *OfficialFollowSettingsByOfficialIDRequest) (*OfficialFollowSettingsByOfficialIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfficialFollowSettingsByOfficialID not implemented")
}
func (UnimplementedNewsServer) GetUserFollowList(context.Context, *GetUserFollowListRequest) (*GetUserFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollowList not implemented")
}
func (UnimplementedNewsServer) BlockOfficialFollows(context.Context, *BlockOfficialFollowsRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockOfficialFollows not implemented")
}
func (UnimplementedNewsServer) UnblockOfficialFollows(context.Context, *UnblockOfficialFollowsRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockOfficialFollows not implemented")
}
func (UnimplementedNewsServer) DeleteOfficialFollows(context.Context, *DeleteOfficialFollowsRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOfficialFollows not implemented")
}
func (UnimplementedNewsServer) LikeArticle(context.Context, *LikeArticleRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeArticle not implemented")
}
func (UnimplementedNewsServer) UnlikeArticle(context.Context, *UnlikeArticleRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeArticle not implemented")
}
func (UnimplementedNewsServer) DeleteArticleLike(context.Context, *DeleteArticleLikeRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticleLike not implemented")
}
func (UnimplementedNewsServer) AddArticleComment(context.Context, *AddArticleCommentRequest) (*AddArticleCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticleComment not implemented")
}
func (UnimplementedNewsServer) ListArticlesTimeLine(context.Context, *ListArticlesTimeLineRequest) (*ListArticlesTimeLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticlesTimeLine not implemented")
}
func (UnimplementedNewsServer) LikeArticleComment(context.Context, *LikeArticleCommentRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeArticleComment not implemented")
}
func (UnimplementedNewsServer) UnlikeArticleComment(context.Context, *UnlikeArticleCommentRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeArticleComment not implemented")
}
func (UnimplementedNewsServer) OfficialLikeArticleComment(context.Context, *OfficialLikeArticleCommentRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficialLikeArticleComment not implemented")
}
func (UnimplementedNewsServer) OfficialUnlikeArticleComment(context.Context, *OfficialUnlikeArticleCommentRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficialUnlikeArticleComment not implemented")
}
func (UnimplementedNewsServer) OfficialDeleteArticleComment(context.Context, *OfficialDeleteArticleCommentRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficialDeleteArticleComment not implemented")
}
func (UnimplementedNewsServer) OfficialHideArticleComment(context.Context, *OfficialHideArticleCommentRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficialHideArticleComment not implemented")
}
func (UnimplementedNewsServer) OfficialShowArticleComment(context.Context, *OfficialShowArticleCommentRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficialShowArticleComment not implemented")
}
func (UnimplementedNewsServer) DeleteArticleComment(context.Context, *DeleteArticleCommentRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticleComment not implemented")
}
func (UnimplementedNewsServer) GetOfficialAccounts(context.Context, *GetOfficialAccountsReq) (*GetOfficialAccountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfficialAccounts not implemented")
}
func (UnimplementedNewsServer) DeleteOfficialAccounts(context.Context, *DeleteOfficialAccountsReq) (*DeleteOfficialAccountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOfficialAccounts not implemented")
}
func (UnimplementedNewsServer) AlterOfficialAccount(context.Context, *AlterOfficialAccountReq) (*AlterOfficialAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterOfficialAccount not implemented")
}
func (UnimplementedNewsServer) AddOfficialAccount(context.Context, *AddOfficialAccountReq) (*AddOfficialAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOfficialAccount not implemented")
}
func (UnimplementedNewsServer) Process(context.Context, *ProcessReq) (*ProcessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedNewsServer) GetNews(context.Context, *GetNewsReq) (*GetNewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNews not implemented")
}
func (UnimplementedNewsServer) DeleteNews(context.Context, *DeleteNewsReq) (*DeleteNewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNews not implemented")
}
func (UnimplementedNewsServer) AlterNews(context.Context, *AlterNewsReq) (*AlterNewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterNews not implemented")
}
func (UnimplementedNewsServer) ChangePrivacy(context.Context, *ChangePrivacyReq) (*ChangePrivacyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePrivacy not implemented")
}
func (UnimplementedNewsServer) GetNewsComments(context.Context, *GetNewsCommentsReq) (*GetNewsCommentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsComments not implemented")
}
func (UnimplementedNewsServer) RemoveNewsComments(context.Context, *RemoveNewsCommentsReq) (*RemoveNewsCommentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNewsComments not implemented")
}
func (UnimplementedNewsServer) AlterNewsComment(context.Context, *AlterNewsCommentReq) (*AlterNewsCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterNewsComment not implemented")
}
func (UnimplementedNewsServer) ChangeNewsCommentStatus(context.Context, *ChangeNewsCommentStatusReq) (*ChangeNewsCommentStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNewsCommentStatus not implemented")
}
func (UnimplementedNewsServer) GetNewsLikes(context.Context, *GetNewsLikesReq) (*GetNewsLikesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsLikes not implemented")
}
func (UnimplementedNewsServer) RemoveNewsLikes(context.Context, *RemoveNewsLikesReq) (*RemoveNewsLikesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNewsLikes not implemented")
}
func (UnimplementedNewsServer) ChangeNewsLikeStatus(context.Context, *ChangeNewsLikeStatusReq) (*ChangeNewsLikeStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNewsLikeStatus not implemented")
}
func (UnimplementedNewsServer) GetRepostArticles(context.Context, *GetRepostArticlesReq) (*GetRepostArticlesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepostArticles not implemented")
}
func (UnimplementedNewsServer) CreateArticle(context.Context, *CreateArticleReq) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedNewsServer) UpdateArticle(context.Context, *UpdateArticleReq) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedNewsServer) DeleteArticle(context.Context, *DeleteArticleReq) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedNewsServer) ListOfficialArticles(context.Context, *ListOfficialArticlesReq) (*ListOfficialArticlesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOfficialArticles not implemented")
}
func (UnimplementedNewsServer) GetOfficialArticle(context.Context, *GetOfficialArticleReq) (*GetOfficialArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfficialArticle not implemented")
}
func (UnimplementedNewsServer) ListSelfOfficialFollows(context.Context, *ListSelfOfficialFollowsRequest) (*ListSelfOfficialFollowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSelfOfficialFollows not implemented")
}
func (UnimplementedNewsServer) ListArticleLikes(context.Context, *ListArticleLikesRequest) (*ListArticleLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticleLikes not implemented")
}
func (UnimplementedNewsServer) ListArticleComments(context.Context, *ListArticleCommentsRequest) (*ListArticleCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticleComments not implemented")
}
func (UnimplementedNewsServer) ListArticleCommentReplies(context.Context, *ListArticleCommentRepliesRequest) (*ListArticleCommentRepliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticleCommentReplies not implemented")
}
func (UnimplementedNewsServer) GetOfficialProfile(context.Context, *GetOfficialProfileRequest) (*GetOfficialProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfficialProfile not implemented")
}
func (UnimplementedNewsServer) GetOfficialRecentAnalyticsByGender(context.Context, *GetOfficialRecentAnalyticsByGenderRequest) (*GetOfficialRecentAnalyticsByGenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfficialRecentAnalyticsByGender not implemented")
}
func (UnimplementedNewsServer) GetOfficialAnalyticsByDay(context.Context, *GetOfficialAnalyticsByDayRequest) (*GetOfficialAnalyticsByDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfficialAnalyticsByDay not implemented")
}
func (UnimplementedNewsServer) SearchOfficialAccounts(context.Context, *SearchOfficialAccountsRequest) (*SearchOfficialAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOfficialAccounts not implemented")
}
func (UnimplementedNewsServer) SearchArticles(context.Context, *SearchArticlesRequest) (*SearchArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArticles not implemented")
}
func (UnimplementedNewsServer) GetUserArticleByArticleID(context.Context, *GetUserArticleByArticleIDRequest) (*GetUserArticleByArticleIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserArticleByArticleID not implemented")
}
func (UnimplementedNewsServer) InsertArticleRead(context.Context, *InsertArticleReadRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertArticleRead not implemented")
}
func (UnimplementedNewsServer) ListUserArticleReads(context.Context, *ListUserArticleReadsRequest) (*ListUserArticleReadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserArticleReads not implemented")
}
func (UnimplementedNewsServer) ClearUserArticleReads(context.Context, *ClearUserArticleReadsRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearUserArticleReads not implemented")
}
func (UnimplementedNewsServer) ListUserArticleComments(context.Context, *ListUserArticleCommentsRequest) (*ListUserArticleCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserArticleComments not implemented")
}
func (UnimplementedNewsServer) ListUserArticleCommentReplies(context.Context, *ListUserArticleCommentRepliesRequest) (*ListUserArticleCommentRepliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserArticleCommentReplies not implemented")
}
func (UnimplementedNewsServer) FollowedOfficialConversation(context.Context, *FollowedOfficialConversationRequest) (*FollowedOfficialConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowedOfficialConversation not implemented")
}
func (UnimplementedNewsServer) GetOfficialIDNumberAvailability(context.Context, *GetOfficialIDNumberAvailabilityRequest) (*GetOfficialIDNumberAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfficialIDNumberAvailability not implemented")
}
func (UnimplementedNewsServer) GetOfficialFollowers(context.Context, *GetOfficialFollowersReq) (*GetOfficialFollowersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfficialFollowers not implemented")
}
func (UnimplementedNewsServer) BlockFollower(context.Context, *BlockFollowerReq) (*BlockFollowerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockFollower not implemented")
}
func (UnimplementedNewsServer) MuteFollower(context.Context, *MuteFollowerReq) (*MuteFollowerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteFollower not implemented")
}
func (UnimplementedNewsServer) RemoveFollowers(context.Context, *RemoveFollowersReq) (*RemoveFollowersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFollowers not implemented")
}

// UnsafeNewsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsServer will
// result in compilation errors.
type UnsafeNewsServer interface {
	mustEmbedUnimplementedNewsServer()
}

func RegisterNewsServer(s grpc.ServiceRegistrar, srv NewsServer) {
	s.RegisterService(&News_ServiceDesc, srv)
}

func _News_RegisterOfficial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOfficialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).RegisterOfficial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/registerOfficial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).RegisterOfficial(ctx, req.(*RegisterOfficialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetSelfOfficialInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelfOfficialInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetSelfOfficialInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/getSelfOfficialInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetSelfOfficialInfo(ctx, req.(*GetSelfOfficialInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_SetSelfOfficialInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSelfOfficialInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).SetSelfOfficialInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/setSelfOfficialInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).SetSelfOfficialInfo(ctx, req.(*SetSelfOfficialInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_FollowOfficialAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowOfficialAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).FollowOfficialAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/followOfficialAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).FollowOfficialAccount(ctx, req.(*FollowOfficialAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_UnfollowOfficialAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowOfficialAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).UnfollowOfficialAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/unfollowOfficialAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).UnfollowOfficialAccount(ctx, req.(*UnfollowOfficialAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_UpdateOfficialFollowSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOfficialFollowSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).UpdateOfficialFollowSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/updateOfficialFollowSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).UpdateOfficialFollowSettings(ctx, req.(*UpdateOfficialFollowSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetOfficialFollowSettingsByOfficialID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialFollowSettingsByOfficialIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetOfficialFollowSettingsByOfficialID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/getOfficialFollowSettingsByOfficialID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetOfficialFollowSettingsByOfficialID(ctx, req.(*OfficialFollowSettingsByOfficialIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetUserFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetUserFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/getUserFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetUserFollowList(ctx, req.(*GetUserFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_BlockOfficialFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockOfficialFollowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).BlockOfficialFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/blockOfficialFollows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).BlockOfficialFollows(ctx, req.(*BlockOfficialFollowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_UnblockOfficialFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockOfficialFollowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).UnblockOfficialFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/unblockOfficialFollows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).UnblockOfficialFollows(ctx, req.(*UnblockOfficialFollowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_DeleteOfficialFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOfficialFollowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).DeleteOfficialFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/deleteOfficialFollows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).DeleteOfficialFollows(ctx, req.(*DeleteOfficialFollowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_LikeArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).LikeArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/likeArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).LikeArticle(ctx, req.(*LikeArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_UnlikeArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).UnlikeArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/unlikeArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).UnlikeArticle(ctx, req.(*UnlikeArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_DeleteArticleLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).DeleteArticleLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/deleteArticleLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).DeleteArticleLike(ctx, req.(*DeleteArticleLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_AddArticleComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddArticleCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).AddArticleComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/addArticleComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).AddArticleComment(ctx, req.(*AddArticleCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_ListArticlesTimeLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticlesTimeLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).ListArticlesTimeLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/listArticlesTimeLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).ListArticlesTimeLine(ctx, req.(*ListArticlesTimeLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_LikeArticleComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeArticleCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).LikeArticleComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/likeArticleComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).LikeArticleComment(ctx, req.(*LikeArticleCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_UnlikeArticleComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeArticleCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).UnlikeArticleComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/unlikeArticleComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).UnlikeArticleComment(ctx, req.(*UnlikeArticleCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_OfficialLikeArticleComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialLikeArticleCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).OfficialLikeArticleComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/officialLikeArticleComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).OfficialLikeArticleComment(ctx, req.(*OfficialLikeArticleCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_OfficialUnlikeArticleComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialUnlikeArticleCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).OfficialUnlikeArticleComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/officialUnlikeArticleComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).OfficialUnlikeArticleComment(ctx, req.(*OfficialUnlikeArticleCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_OfficialDeleteArticleComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialDeleteArticleCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).OfficialDeleteArticleComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/officialDeleteArticleComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).OfficialDeleteArticleComment(ctx, req.(*OfficialDeleteArticleCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_OfficialHideArticleComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialHideArticleCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).OfficialHideArticleComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/officialHideArticleComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).OfficialHideArticleComment(ctx, req.(*OfficialHideArticleCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_OfficialShowArticleComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialShowArticleCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).OfficialShowArticleComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/officialShowArticleComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).OfficialShowArticleComment(ctx, req.(*OfficialShowArticleCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_DeleteArticleComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).DeleteArticleComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/DeleteArticleComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).DeleteArticleComment(ctx, req.(*DeleteArticleCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetOfficialAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfficialAccountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetOfficialAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/GetOfficialAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetOfficialAccounts(ctx, req.(*GetOfficialAccountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_DeleteOfficialAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOfficialAccountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).DeleteOfficialAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/DeleteOfficialAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).DeleteOfficialAccounts(ctx, req.(*DeleteOfficialAccountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_AlterOfficialAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterOfficialAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).AlterOfficialAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/AlterOfficialAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).AlterOfficialAccount(ctx, req.(*AlterOfficialAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_AddOfficialAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOfficialAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).AddOfficialAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/AddOfficialAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).AddOfficialAccount(ctx, req.(*AddOfficialAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).Process(ctx, req.(*ProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/GetNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetNews(ctx, req.(*GetNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_DeleteNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).DeleteNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/DeleteNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).DeleteNews(ctx, req.(*DeleteNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_AlterNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).AlterNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/AlterNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).AlterNews(ctx, req.(*AlterNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_ChangePrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePrivacyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).ChangePrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/ChangePrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).ChangePrivacy(ctx, req.(*ChangePrivacyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetNewsComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsCommentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetNewsComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/GetNewsComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetNewsComments(ctx, req.(*GetNewsCommentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_RemoveNewsComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNewsCommentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).RemoveNewsComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/RemoveNewsComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).RemoveNewsComments(ctx, req.(*RemoveNewsCommentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_AlterNewsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterNewsCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).AlterNewsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/AlterNewsComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).AlterNewsComment(ctx, req.(*AlterNewsCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_ChangeNewsCommentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeNewsCommentStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).ChangeNewsCommentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/ChangeNewsCommentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).ChangeNewsCommentStatus(ctx, req.(*ChangeNewsCommentStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetNewsLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsLikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetNewsLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/GetNewsLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetNewsLikes(ctx, req.(*GetNewsLikesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_RemoveNewsLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNewsLikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).RemoveNewsLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/RemoveNewsLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).RemoveNewsLikes(ctx, req.(*RemoveNewsLikesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_ChangeNewsLikeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeNewsLikeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).ChangeNewsLikeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/ChangeNewsLikeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).ChangeNewsLikeStatus(ctx, req.(*ChangeNewsLikeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetRepostArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepostArticlesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetRepostArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/GetRepostArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetRepostArticles(ctx, req.(*GetRepostArticlesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/CreateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).CreateArticle(ctx, req.(*CreateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).UpdateArticle(ctx, req.(*UpdateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/DeleteArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).DeleteArticle(ctx, req.(*DeleteArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_ListOfficialArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOfficialArticlesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).ListOfficialArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/ListOfficialArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).ListOfficialArticles(ctx, req.(*ListOfficialArticlesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetOfficialArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfficialArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetOfficialArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/GetOfficialArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetOfficialArticle(ctx, req.(*GetOfficialArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_ListSelfOfficialFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSelfOfficialFollowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).ListSelfOfficialFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/listSelfOfficialFollows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).ListSelfOfficialFollows(ctx, req.(*ListSelfOfficialFollowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_ListArticleLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticleLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).ListArticleLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/listArticleLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).ListArticleLikes(ctx, req.(*ListArticleLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_ListArticleComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticleCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).ListArticleComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/listArticleComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).ListArticleComments(ctx, req.(*ListArticleCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_ListArticleCommentReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticleCommentRepliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).ListArticleCommentReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/listArticleCommentReplies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).ListArticleCommentReplies(ctx, req.(*ListArticleCommentRepliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetOfficialProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfficialProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetOfficialProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/getOfficialProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetOfficialProfile(ctx, req.(*GetOfficialProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetOfficialRecentAnalyticsByGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfficialRecentAnalyticsByGenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetOfficialRecentAnalyticsByGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/getOfficialRecentAnalyticsByGender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetOfficialRecentAnalyticsByGender(ctx, req.(*GetOfficialRecentAnalyticsByGenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetOfficialAnalyticsByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfficialAnalyticsByDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetOfficialAnalyticsByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/getOfficialAnalyticsByDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetOfficialAnalyticsByDay(ctx, req.(*GetOfficialAnalyticsByDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_SearchOfficialAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOfficialAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).SearchOfficialAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/searchOfficialAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).SearchOfficialAccounts(ctx, req.(*SearchOfficialAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_SearchArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).SearchArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/searchArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).SearchArticles(ctx, req.(*SearchArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetUserArticleByArticleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserArticleByArticleIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetUserArticleByArticleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/getUserArticleByArticleID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetUserArticleByArticleID(ctx, req.(*GetUserArticleByArticleIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_InsertArticleRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertArticleReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).InsertArticleRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/insertArticleRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).InsertArticleRead(ctx, req.(*InsertArticleReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_ListUserArticleReads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserArticleReadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).ListUserArticleReads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/listUserArticleReads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).ListUserArticleReads(ctx, req.(*ListUserArticleReadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_ClearUserArticleReads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearUserArticleReadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).ClearUserArticleReads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/clearUserArticleReads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).ClearUserArticleReads(ctx, req.(*ClearUserArticleReadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_ListUserArticleComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserArticleCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).ListUserArticleComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/listUserArticleComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).ListUserArticleComments(ctx, req.(*ListUserArticleCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_ListUserArticleCommentReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserArticleCommentRepliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).ListUserArticleCommentReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/listUserArticleCommentReplies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).ListUserArticleCommentReplies(ctx, req.(*ListUserArticleCommentRepliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_FollowedOfficialConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowedOfficialConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).FollowedOfficialConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/FollowedOfficialConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).FollowedOfficialConversation(ctx, req.(*FollowedOfficialConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetOfficialIDNumberAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfficialIDNumberAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetOfficialIDNumberAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/GetOfficialIDNumberAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetOfficialIDNumberAvailability(ctx, req.(*GetOfficialIDNumberAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_GetOfficialFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfficialFollowersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).GetOfficialFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/GetOfficialFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).GetOfficialFollowers(ctx, req.(*GetOfficialFollowersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_BlockFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockFollowerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).BlockFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/BlockFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).BlockFollower(ctx, req.(*BlockFollowerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_MuteFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteFollowerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).MuteFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/MuteFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).MuteFollower(ctx, req.(*MuteFollowerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_RemoveFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFollowersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).RemoveFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/news.news/RemoveFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).RemoveFollowers(ctx, req.(*RemoveFollowersReq))
	}
	return interceptor(ctx, in, info, handler)
}

// News_ServiceDesc is the grpc.ServiceDesc for News service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var News_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "news.news",
	HandlerType: (*NewsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerOfficial",
			Handler:    _News_RegisterOfficial_Handler,
		},
		{
			MethodName: "getSelfOfficialInfo",
			Handler:    _News_GetSelfOfficialInfo_Handler,
		},
		{
			MethodName: "setSelfOfficialInfo",
			Handler:    _News_SetSelfOfficialInfo_Handler,
		},
		{
			MethodName: "followOfficialAccount",
			Handler:    _News_FollowOfficialAccount_Handler,
		},
		{
			MethodName: "unfollowOfficialAccount",
			Handler:    _News_UnfollowOfficialAccount_Handler,
		},
		{
			MethodName: "updateOfficialFollowSettings",
			Handler:    _News_UpdateOfficialFollowSettings_Handler,
		},
		{
			MethodName: "getOfficialFollowSettingsByOfficialID",
			Handler:    _News_GetOfficialFollowSettingsByOfficialID_Handler,
		},
		{
			MethodName: "getUserFollowList",
			Handler:    _News_GetUserFollowList_Handler,
		},
		{
			MethodName: "blockOfficialFollows",
			Handler:    _News_BlockOfficialFollows_Handler,
		},
		{
			MethodName: "unblockOfficialFollows",
			Handler:    _News_UnblockOfficialFollows_Handler,
		},
		{
			MethodName: "deleteOfficialFollows",
			Handler:    _News_DeleteOfficialFollows_Handler,
		},
		{
			MethodName: "likeArticle",
			Handler:    _News_LikeArticle_Handler,
		},
		{
			MethodName: "unlikeArticle",
			Handler:    _News_UnlikeArticle_Handler,
		},
		{
			MethodName: "deleteArticleLike",
			Handler:    _News_DeleteArticleLike_Handler,
		},
		{
			MethodName: "addArticleComment",
			Handler:    _News_AddArticleComment_Handler,
		},
		{
			MethodName: "listArticlesTimeLine",
			Handler:    _News_ListArticlesTimeLine_Handler,
		},
		{
			MethodName: "likeArticleComment",
			Handler:    _News_LikeArticleComment_Handler,
		},
		{
			MethodName: "unlikeArticleComment",
			Handler:    _News_UnlikeArticleComment_Handler,
		},
		{
			MethodName: "officialLikeArticleComment",
			Handler:    _News_OfficialLikeArticleComment_Handler,
		},
		{
			MethodName: "officialUnlikeArticleComment",
			Handler:    _News_OfficialUnlikeArticleComment_Handler,
		},
		{
			MethodName: "officialDeleteArticleComment",
			Handler:    _News_OfficialDeleteArticleComment_Handler,
		},
		{
			MethodName: "officialHideArticleComment",
			Handler:    _News_OfficialHideArticleComment_Handler,
		},
		{
			MethodName: "officialShowArticleComment",
			Handler:    _News_OfficialShowArticleComment_Handler,
		},
		{
			MethodName: "DeleteArticleComment",
			Handler:    _News_DeleteArticleComment_Handler,
		},
		{
			MethodName: "GetOfficialAccounts",
			Handler:    _News_GetOfficialAccounts_Handler,
		},
		{
			MethodName: "DeleteOfficialAccounts",
			Handler:    _News_DeleteOfficialAccounts_Handler,
		},
		{
			MethodName: "AlterOfficialAccount",
			Handler:    _News_AlterOfficialAccount_Handler,
		},
		{
			MethodName: "AddOfficialAccount",
			Handler:    _News_AddOfficialAccount_Handler,
		},
		{
			MethodName: "Process",
			Handler:    _News_Process_Handler,
		},
		{
			MethodName: "GetNews",
			Handler:    _News_GetNews_Handler,
		},
		{
			MethodName: "DeleteNews",
			Handler:    _News_DeleteNews_Handler,
		},
		{
			MethodName: "AlterNews",
			Handler:    _News_AlterNews_Handler,
		},
		{
			MethodName: "ChangePrivacy",
			Handler:    _News_ChangePrivacy_Handler,
		},
		{
			MethodName: "GetNewsComments",
			Handler:    _News_GetNewsComments_Handler,
		},
		{
			MethodName: "RemoveNewsComments",
			Handler:    _News_RemoveNewsComments_Handler,
		},
		{
			MethodName: "AlterNewsComment",
			Handler:    _News_AlterNewsComment_Handler,
		},
		{
			MethodName: "ChangeNewsCommentStatus",
			Handler:    _News_ChangeNewsCommentStatus_Handler,
		},
		{
			MethodName: "GetNewsLikes",
			Handler:    _News_GetNewsLikes_Handler,
		},
		{
			MethodName: "RemoveNewsLikes",
			Handler:    _News_RemoveNewsLikes_Handler,
		},
		{
			MethodName: "ChangeNewsLikeStatus",
			Handler:    _News_ChangeNewsLikeStatus_Handler,
		},
		{
			MethodName: "GetRepostArticles",
			Handler:    _News_GetRepostArticles_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _News_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _News_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _News_DeleteArticle_Handler,
		},
		{
			MethodName: "ListOfficialArticles",
			Handler:    _News_ListOfficialArticles_Handler,
		},
		{
			MethodName: "GetOfficialArticle",
			Handler:    _News_GetOfficialArticle_Handler,
		},
		{
			MethodName: "listSelfOfficialFollows",
			Handler:    _News_ListSelfOfficialFollows_Handler,
		},
		{
			MethodName: "listArticleLikes",
			Handler:    _News_ListArticleLikes_Handler,
		},
		{
			MethodName: "listArticleComments",
			Handler:    _News_ListArticleComments_Handler,
		},
		{
			MethodName: "listArticleCommentReplies",
			Handler:    _News_ListArticleCommentReplies_Handler,
		},
		{
			MethodName: "getOfficialProfile",
			Handler:    _News_GetOfficialProfile_Handler,
		},
		{
			MethodName: "getOfficialRecentAnalyticsByGender",
			Handler:    _News_GetOfficialRecentAnalyticsByGender_Handler,
		},
		{
			MethodName: "getOfficialAnalyticsByDay",
			Handler:    _News_GetOfficialAnalyticsByDay_Handler,
		},
		{
			MethodName: "searchOfficialAccounts",
			Handler:    _News_SearchOfficialAccounts_Handler,
		},
		{
			MethodName: "searchArticles",
			Handler:    _News_SearchArticles_Handler,
		},
		{
			MethodName: "getUserArticleByArticleID",
			Handler:    _News_GetUserArticleByArticleID_Handler,
		},
		{
			MethodName: "insertArticleRead",
			Handler:    _News_InsertArticleRead_Handler,
		},
		{
			MethodName: "listUserArticleReads",
			Handler:    _News_ListUserArticleReads_Handler,
		},
		{
			MethodName: "clearUserArticleReads",
			Handler:    _News_ClearUserArticleReads_Handler,
		},
		{
			MethodName: "listUserArticleComments",
			Handler:    _News_ListUserArticleComments_Handler,
		},
		{
			MethodName: "listUserArticleCommentReplies",
			Handler:    _News_ListUserArticleCommentReplies_Handler,
		},
		{
			MethodName: "FollowedOfficialConversation",
			Handler:    _News_FollowedOfficialConversation_Handler,
		},
		{
			MethodName: "GetOfficialIDNumberAvailability",
			Handler:    _News_GetOfficialIDNumberAvailability_Handler,
		},
		{
			MethodName: "GetOfficialFollowers",
			Handler:    _News_GetOfficialFollowers_Handler,
		},
		{
			MethodName: "BlockFollower",
			Handler:    _News_BlockFollower_Handler,
		},
		{
			MethodName: "MuteFollower",
			Handler:    _News_MuteFollower_Handler,
		},
		{
			MethodName: "RemoveFollowers",
			Handler:    _News_RemoveFollowers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "news/news.proto",
}
