syntax = "proto3";
import "server/pkg/proto/sdk_ws/ws.proto";
import "server/pkg/proto/sdk_ws/wrappers.proto";
option go_package = "./group;group";
package group;

message CommonResp{
  int32   ErrCode = 1;
  string  ErrMsg = 2;
}

message GroupAddMemberInfo{
  string UserID = 1;
  int32 RoleLevel = 2;
}

message CreateGroupReq{
  repeated GroupAddMemberInfo InitMemberList = 1;
  server_api_params.GroupInfo GroupInfo = 2;
  string OperationID = 3;
  string OpUserID = 4;  //app manager or group owner
  string OwnerUserID = 5; //owner
  int32 IsOpen = 6;
  repeated int64 GroupInterest = 7;
}
message CreateGroupResp{
  int32   ErrCode = 1;
  string  ErrMsg = 2;
  server_api_params.GroupInfo GroupInfo = 3;
}


message GetGroupsInfoReq{
  repeated string GroupIDList = 1;
  string OperationID = 2;
  string OpUserID = 3; //No verification permission
}
message GetGroupsInfoResp{
  int32   ErrCode = 1;
  string  ErrMsg = 2;
  repeated server_api_params.GroupInfo GroupInfoList = 3;
}


message SetGroupInfoReq{
  server_api_params.GroupInfo GroupInfo = 1;
  string OpUserID = 2; //app manager or group owner
  string OperationID = 3;
  string GroupMasterId = 4;
  repeated int64 GroupInterest = 5;
  bool IsAdmin = 6;
}
message SetGroupInfoResp{
    CommonResp CommonResp = 1;
}


message GetGroupApplicationListReq {
  string OpUserID = 1; //app manager or group owner(manager)
  string OperationID = 2;
  string FromUserID = 3; //owner or manager
}
message GetGroupApplicationListResp {
  int32   ErrCode = 1;
  string  ErrMsg = 2;
  repeated server_api_params.GroupRequest GroupRequestList = 3;
}

message GetUserReqApplicationListReq{
  string UserID = 1;
  string OpUserID = 2;
  string OperationID = 3;
}

message GetUserReqApplicationListResp{
  CommonResp CommonResp = 1;
  repeated server_api_params.GroupRequest GroupRequestList = 2;
}


message TransferGroupOwnerReq {
  string GroupID = 1;
  string OldOwnerUserID = 2;
  string NewOwnerUserID = 3;
  string OperationID = 4;
  string OpUserID = 5;
  int32 OpFrom = 6; // app manage or EF -> 0-fronted 1-CMS
}
message TransferGroupOwnerResp{
  CommonResp CommonResp = 1;
}

message TransferGroupAdminReq {
  string GroupID = 1;
  string OwnerUserID = 2;
  string UserID = 3;
  string OperationID = 4;
  string OpUserID = 5; //app manager or group owner
  int32 OpFrom = 6; // app manage or EF -> 0-fronted 1-CMS
}
message TransferGroupAdminResp{
  CommonResp CommonResp = 1;
}

message TransferGroupOrdinaryReq {
  string GroupID = 1;
  string OwnerUserID = 2;
  string UserID = 3;
  string OperationID = 4;
  string OpUserID = 5; //app manager or group owner
  int32 OpFrom = 6; // app manage or EF -> 0-fronted 1-CMS
}
message TransferGroupOrdinaryResp{
  CommonResp CommonResp = 1;
}

message JoinGroupReq{
  string GroupID = 1;
  string ReqMessage = 2;
  string OpUserID = 3;
  string OperationID = 4;
}
message JoinGroupResp{
  CommonResp CommonResp = 1;
}


message GroupApplicationResponseReq{
  string OperationID = 1;
  string OpUserID = 2;
  string GroupID = 3;
  string FromUserID = 4;  //
  string HandledMsg = 5;
  int32 HandleResult = 6;
}
message GroupApplicationResponseResp{
  CommonResp CommonResp = 1;
}



message QuitGroupReq{
  string GroupID = 1;
  string OperationID = 2;
  string OpUserID = 3;
}
message QuitGroupResp{
  CommonResp CommonResp = 1;
}



message GetGroupMemberListReq {
  string GroupID = 1;
  string OpUserID = 2;  //No verification permission
  string OperationID = 3;
  int32 Filter = 4;
  int32 NextSeq = 5;
}

message GetGroupMemberListResp {
  int32   ErrCode = 1;
  string  ErrMsg = 2;
  repeated server_api_params.GroupMemberFullInfo memberList = 3;
  int32 nextSeq = 4;
}


message GetGroupMembersInfoReq {
  string GroupID = 1;
  repeated string memberList = 2;
  string OpUserID = 3;  //No verification permission
  string OperationID = 4;
}

message GetGroupMembersInfoResp {
  int32   ErrCode = 1;
  string  ErrMsg = 2;
  repeated server_api_params.GroupMemberFullInfo memberList = 3;
}

message KickGroupMemberReq {
  string GroupID = 1;
  repeated string KickedUserIDList = 2;
  string Reason = 3;
  string OperationID = 5;
  string OpUserID = 6;  //app manger or group manager
}

message Id2Result {
  string UserID = 1;
  int32 Result = 2; //0 ok; -1 error
}
message GroupId2Result {
  string GroupID = 1;
  int32 Result = 2; //0 ok; -1 error
}

message KickGroupMemberResp {
  int32   ErrCode = 1;
  string  ErrMsg = 2;
  repeated Id2Result Id2ResultList = 3;
}


message GetJoinedGroupListReq {
  string FromUserID = 1;
  string operationID = 2;
  string OpUserID = 3; //app manager or FromUserID
}
message GetJoinedGroupListResp{
  int32   ErrCode = 1;
  string  ErrMsg = 2;
  repeated  server_api_params.GroupInfo GroupList = 3;
}


message InviteUserToGroupReq {
  string OperationID = 2;
  string GroupID = 3;
  string Reason = 4;
  repeated string InvitedUserIDList = 5;
  string OpUserID = 6; //group member or app manager
}
message InviteUserToGroupResp {
  int32   ErrCode = 1;
  string  ErrMsg = 2;
  repeated  Id2Result Id2ResultList = 3; // 0 ok, -1 error
}

message ChannelCodeInviteUserToGroupRequest {
  string OperationID = 1;
  string UserId = 2;
  repeated string InvitedGroupIDList = 3;
  string Reason = 4;
  string OpUserID = 5;
}
message ChannelCodeInviteUserToGroupResponse {
  int32   ErrCode = 1;
  string  ErrMsg = 2;
  repeated  GroupId2Result GroupId2ResultList = 3; // 0 ok, -1 error
}

message GetGroupAllMemberReq {
  string GroupID = 1;
  string OpUserID = 2; //No verification permission
  string OperationID = 3;
}
message GetGroupAllMemberResp {
  int32   ErrCode = 1;
  string  ErrMsg = 2;
  repeated server_api_params.GroupMemberFullInfo memberList = 3;
}

message MemberSimple {
  string UserName = 1;
  string UserID = 2;
}

message CMSGroup {
  server_api_params.GroupInfo GroupInfo = 1;
  string GroupMasterName = 2;
  string GroupMasterId = 3;
  int32 IsOpen = 4;
  repeated MemberSimple MemberList = 5;
}

message GetGroupReq {
    string GroupName = 1;
    server_api_params.RequestPagination Pagination = 2;
    string OperationID = 3;
}

message GetGroupResp {
    repeated CMSGroup CMSGroups = 1;
    server_api_params.RequestPagination Pagination = 2;
    int32 GroupNums = 3;
}

message GetGroupsReq {
    server_api_params.RequestPagination Pagination = 1;
    string OperationID = 2;
    string OrderBy = 3;
    string Group = 4;
    string Member = 5;
    int32 IsOpen = 6;
    string Remark = 7;
    string GroupStatus = 8;
    string StatusType = 9;
    string Owner = 10;
    string Creator = 11;
    string StartTime = 12;
    string EndTime = 13;
}

message GetGroupsResp {
    repeated CMSGroup CMSGroups = 1;
    server_api_params.RequestPagination Pagination = 2;
    int32 GroupNum = 3;
}

message GetGroupMemberReq {
    string GroupId = 1;
    string OperationID = 2;
}

message OperateGroupStatusReq {
    string GroupId = 1;
    int32 Status = 2;
    string OperationID = 3;
}

message OperateGroupStatusResp {

}

message OperateUserRoleReq {
  string GroupId = 1;
  string UserId = 2;
  int32 RoleLevel = 3;
  string OperationID = 4;
  int32 OpFrom = 5; // app manage or EF -> 0-fronted 1-CMS
  string OpUserID = 6;
}
 
message OperateUserRoleResp {
}

message DeleteGroupReq {
  string GroupId = 1;
  string OperationID = 2;
}

message DeleteGroupResp {

}

message GetGroupByIdReq {
  string GroupId = 1;
  string OperationID = 2;
}

message GetGroupByIdResp {
  CMSGroup CMSGroup = 1;
}

message GetGroupMembersCMSReq {
  string GroupID = 1;
  repeated int32 RoleLevel = 2;
  server_api_params.RequestPagination Pagination = 3;
  string OperationID = 4;
  string Member = 5;
  string RemarkName = 6;
  string Remark = 7;
  string StartTime = 8;
  string EndTime = 9;
  repeated int32 Permission = 10;
  repeated int32 Status = 11;
}

message GetGroupMembersCMSResp {
   repeated server_api_params.GroupMemberFullInfo members = 1;
   server_api_params.ResponsePagination Pagination = 2;
   string GroupName = 3;
   int32 MemberNums = 4;
}

message RemoveGroupMembersCMSReq {
  string GroupId = 1;
  repeated string UserIds = 2;
  string OperationID = 3;
  string OpUserId = 4;
}

message RemoveGroupMembersCMSResp {
  repeated string success = 1;
  repeated string failed = 2;
}

message AddGroupMembersCMSReq {
  string GroupId = 1;
  repeated string UserIds = 2;
  string OperationId = 3;
  string OpUserId = 4;
}

message AddGroupMembersCMSResp {
  repeated string success = 1;
  repeated string failed = 2;
}

message DismissGroupReq{
  string opUserID = 1; //group  or app manager
  string operationID = 2;
  string groupID = 3;
  bool isAdminUser = 4;
}

message DismissGroupResp{
  CommonResp commonResp = 1;
}


message MuteGroupMemberReq{
  string opUserID = 1; //group  or app manager
  string operationID = 2;
  string groupID = 3;
  string userID = 4;
  uint32 mutedSeconds = 5;
}

message MuteGroupMemberResp{
  CommonResp commonResp = 1;
}



message CancelMuteGroupMemberReq{
  string opUserID = 1; //group  or app manager
  string operationID = 2;
  string groupID = 3;
  string userID = 4;
}

message CancelMuteGroupMemberResp{
  CommonResp commonResp = 1;
}


message MuteGroupReq{
  string opUserID = 1; //group  or app manager
  string operationID = 2;
  string groupID = 3;
}

message MuteGroupResp{
  CommonResp commonResp = 1;
}



message CancelMuteGroupReq{
  string opUserID = 1; //group  or app manager
  string operationID = 2;
  string groupID = 3;
}

message CancelMuteGroupResp{
  CommonResp commonResp = 1;
}




message SetGroupMemberNicknameReq{
  string groupID = 1;
  string nickname = 2;
  string opUserID = 3;
  string operationID = 4;
  string userID = 5;
}
message SetGroupMemberNicknameResp{
  CommonResp CommonResp = 1;
}

message GetJoinedSuperGroupListReq {
  string operationID = 1;
  string userID = 2;
  string opUserID = 3;
}

message GetJoinedSuperGroupListResp {
  CommonResp commonResp = 1;
  repeated server_api_params.GroupInfo GroupList = 3;
}

message GetSuperGroupsInfoReq {
  repeated string GroupIDList = 1;
  string OperationID = 2;
  string OpUserID = 3; //No verification permission
}

message GetSuperGroupsInfoResp {
  CommonResp commonResp = 1;
  repeated server_api_params.GroupInfo GroupInfoList = 3;
}

message SetGroupMemberInfoReq{
  string groupID = 1;
  string userID = 2;
  string opUserID = 3;
  string operationID = 4;
  google.protobuf.StringValue nickname = 5;
  google.protobuf.StringValue faceURL = 6;
  google.protobuf.Int32Value roleLevel = 7;
  google.protobuf.StringValue ex = 8;
}

message SetGroupMemberInfoResp{
  CommonResp CommonResp = 1;
}



message GetGroupMembersReqV2 {
  string GroupId = 1;
  string UserName = 2;
  int32 limit =3;
  int32 offset = 4;
  string OperationID = 5;
  int32 filter = 6;
  string searchName = 7;
}

message GetGroupMembersResV2 {
  repeated server_api_params.GroupMemberFullInfo members = 1;
  server_api_params.ResponsePagination Pagination = 2;
  int32 MemberNums = 3;
}

message CheckGroupUpdateVersionsFromLocalReq {
  string OperationID = 1;
  string groupID = 2;
  int64 groupVersion = 3;
  string opUserID = 4;
  int32 pageNumber = 5;
  int32 pageSize = 6;
  bool needNextPageFetch = 7;
  bool responseBackHTTP = 8;
}


message GroupUpdatesVersionsRes{
  repeated GroupUpdatesVersions groupUpdateVersionByID = 1;
  server_api_params.MemberSyncNotificationTips MemberSyncNotificationTips = 2;
}


message GroupUpdatesVersions{
   string groupIDs = 1;
   int64 versionNumber = 2;
}

message GetInterestGroupListByUserIdRequest {
  string FromUserID = 1;
  string operationID = 2;
}
message GetInterestGroupListByUserIdResponse {
  repeated  server_api_params.GroupInfo GroupList = 1;
}
message SetVideoAudioStatusReq {
  string OperationID = 1;
  string GroupID = 2;
  string OpUserID = 3;
  int32 StatusType = 4;
  int32 Status = 5;
}
message SetVideoAudioStatusResp {
  CommonResp CommonResp = 1;
}
message SetUserVideoAudioStatusReq {
  string OperationID = 1;
  string GroupID = 2;
  string MemberID = 3;
  int32 StatusType = 4;
  int32 Status = 5;
  string OpUserID = 6;
}
message SetUserVideoAudioStatusResp {
  CommonResp CommonResp = 1;
}

message UserIDAndName {
  string UserID = 1;
  string UserName = 2;
}

message GetUsersByGroupReq {
  string  GroupID = 1;
  string OperationID = 2;
  int32 GetType = 3;
  server_api_params.RequestPagination Pagination = 4;
}

message GetUsersByGroupResp {
  repeated UserIDAndName Users = 1;
  server_api_params.ResponsePagination Pagination = 2;
  int64 UserNums = 3;
  CommonResp commonResp = 4;
}

message GroupMemberSyncStatusModel {
  string groupID = 1;
  int32 pageNumber = 2;
  int32 totalCount = 3;
  int32 syncStartTime = 4;
  int32 priority = 5;
}

service group{
  rpc createGroup(CreateGroupReq) returns(CreateGroupResp);
  rpc joinGroup(JoinGroupReq) returns(JoinGroupResp);
  rpc quitGroup(QuitGroupReq) returns(QuitGroupResp);
  rpc getGroupsInfo(GetGroupsInfoReq) returns(GetGroupsInfoResp);
  rpc setGroupInfo(SetGroupInfoReq) returns(SetGroupInfoResp);
  rpc getGroupApplicationList(GetGroupApplicationListReq) returns(GetGroupApplicationListResp);
  rpc getUserReqApplicationList(GetUserReqApplicationListReq) returns(GetUserReqApplicationListResp);
  rpc groupApplicationResponse(GroupApplicationResponseReq) returns(GroupApplicationResponseResp);
  rpc getGroupMemberList(GetGroupMemberListReq) returns(GetGroupMemberListResp);
  rpc getGroupMemberListV2(GetGroupMembersReqV2) returns(GetGroupMembersResV2);
  rpc getGroupMembersInfo(GetGroupMembersInfoReq) returns(GetGroupMembersInfoResp);
  rpc kickGroupMember(KickGroupMemberReq) returns (KickGroupMemberResp);
  rpc getJoinedGroupList(GetJoinedGroupListReq) returns (GetJoinedGroupListResp);
  rpc inviteUserToGroup(InviteUserToGroupReq) returns (InviteUserToGroupResp);
  rpc getGroupAllMember(GetGroupAllMemberReq) returns(GetGroupAllMemberResp);

  rpc GetGroupById(GetGroupByIdReq) returns(GetGroupByIdResp);
  rpc GetGroup(GetGroupReq) returns(GetGroupResp);
  rpc GetGroups(GetGroupsReq) returns(GetGroupsResp);
  rpc OperateGroupStatus(OperateGroupStatusReq) returns(OperateGroupStatusResp);
  rpc OperateUserRole(OperateUserRoleReq) returns(OperateUserRoleResp);
  rpc DeleteGroup(DeleteGroupReq) returns(DeleteGroupResp);
  rpc GetGroupMembersCMS(GetGroupMembersCMSReq) returns(GetGroupMembersCMSResp);
  rpc RemoveGroupMembersCMS(RemoveGroupMembersCMSReq) returns(RemoveGroupMembersCMSResp);
  rpc AddGroupMembersCMS(AddGroupMembersCMSReq) returns(AddGroupMembersCMSResp);

  rpc DismissGroup(DismissGroupReq) returns(DismissGroupResp);
  rpc MuteGroupMember(MuteGroupMemberReq) returns(MuteGroupMemberResp);
  rpc CancelMuteGroupMember(CancelMuteGroupMemberReq) returns(CancelMuteGroupMemberResp);
  rpc MuteGroup(MuteGroupReq) returns(MuteGroupResp);
  rpc CancelMuteGroup(CancelMuteGroupReq) returns(CancelMuteGroupResp);

  rpc SetGroupMemberNickname(SetGroupMemberNicknameReq) returns (SetGroupMemberNicknameResp);

  rpc GetJoinedSuperGroupList(GetJoinedSuperGroupListReq) returns (GetJoinedSuperGroupListResp);
  rpc GetSuperGroupsInfo(GetSuperGroupsInfoReq) returns (GetSuperGroupsInfoResp);
  rpc SetGroupMemberInfo(SetGroupMemberInfoReq) returns (SetGroupMemberInfoResp);

  rpc ChannelCodeInviteUserToGroup(ChannelCodeInviteUserToGroupRequest) returns (ChannelCodeInviteUserToGroupResponse);
  rpc CheckGroupUpdateVersionsFromLocal(CheckGroupUpdateVersionsFromLocalReq) returns(GroupUpdatesVersionsRes);
  rpc GetInterestGroupListByUserId(GetInterestGroupListByUserIdRequest) returns(GetInterestGroupListByUserIdResponse);

  rpc SetVideoAudioStatus(SetVideoAudioStatusReq)returns(SetVideoAudioStatusResp);
  rpc SetUserVideoAudioStatus(SetUserVideoAudioStatusReq)returns(SetUserVideoAudioStatusResp);

  rpc GetUsersByGroup(GetUsersByGroupReq)returns(GetUsersByGroupResp);

  // CMS
  rpc TransferGroupOwner(TransferGroupOwnerReq) returns(TransferGroupOwnerResp);
  rpc TransferGroupAdminCMS(TransferGroupAdminReq) returns(TransferGroupAdminResp);
  rpc TransferGroupOrdinaryCMS(TransferGroupOrdinaryReq) returns(TransferGroupOrdinaryResp);

}







