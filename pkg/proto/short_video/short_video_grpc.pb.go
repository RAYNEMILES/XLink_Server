// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: short_video/short_video.proto

package short_video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortVideoClient is the client API for ShortVideo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortVideoClient interface {
	// call back
	FileUploadCallBack(ctx context.Context, in *FileUploadCallBackRequest, opts ...grpc.CallOption) (*FileUploadCallBackResponse, error)
	FileDeletedCallBack(ctx context.Context, in *FileDeletedCallBackRequest, opts ...grpc.CallOption) (*FileDeletedCallBackResponse, error)
	ProcedureStateChangeCallBack(ctx context.Context, in *ProcedureStateChangeCallBackRequest, opts ...grpc.CallOption) (*ProcedureStateChangeCallBackResponse, error)
	CreateShortVideo(ctx context.Context, in *CreateShortVideoRequest, opts ...grpc.CallOption) (*CreateShortVideoResponse, error)
	GetUpdateShortVideoSign(ctx context.Context, in *GetUpdateShortVideoSignRequest, opts ...grpc.CallOption) (*GetUpdateShortVideoSignResponse, error)
	GetShortVideoByFieldId(ctx context.Context, in *GetShortVideoByFileIdRequest, opts ...grpc.CallOption) (*GetShortVideoByFileIdResponse, error)
	GetShortVideoByFieldIdList(ctx context.Context, in *GetShortVideoByFileIdListRequest, opts ...grpc.CallOption) (*GetShortVideoByFileIdListResponse, error)
	SearchShortVideo(ctx context.Context, in *SearchShortVideoRequest, opts ...grpc.CallOption) (*SearchShortVideoResponse, error)
	ShortVideoLike(ctx context.Context, in *ShortVideoLikeRequest, opts ...grpc.CallOption) (*ShortVideoLikeResponse, error)
	GetLikeShortVideoList(ctx context.Context, in *GetLikeShortVideoListRequest, opts ...grpc.CallOption) (*GetLikeShortVideoListResponse, error)
	ShortVideoComment(ctx context.Context, in *ShortVideoCommentRequest, opts ...grpc.CallOption) (*ShortVideoCommentResponse, error)
	DeleteShortVideoComment(ctx context.Context, in *DeleteShortVideoRequest, opts ...grpc.CallOption) (*DeleteShortVideoResponse, error)
	ShortVideoCommentLike(ctx context.Context, in *ShortVideoCommentLikeRequest, opts ...grpc.CallOption) (*ShortVideoCommentLikeResponse, error)
	GetShortVideoCommentList(ctx context.Context, in *GetShortVideoCommentListRequest, opts ...grpc.CallOption) (*GetShortVideoCommentListResponse, error)
	GetCommentPage(ctx context.Context, in *GetCommentPageRequest, opts ...grpc.CallOption) (*GetCommentPageResponse, error)
	GetCommentPageReplyList(ctx context.Context, in *GetCommentPageReplyListRequest, opts ...grpc.CallOption) (*GetCommentPageReplyListResponse, error)
	GetRecommendShortVideoList(ctx context.Context, in *GetRecommendShortVideoListRequest, opts ...grpc.CallOption) (*GetRecommendShortVideoListResponse, error)
	GetFollowShortVideoList(ctx context.Context, in *GetFollowShortVideoListRequest, opts ...grpc.CallOption) (*GetFollowShortVideoListResponse, error)
	Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error)
	GetFollowList(ctx context.Context, in *GetFollowListRequest, opts ...grpc.CallOption) (*GetFollowListResponse, error)
	GetFansList(ctx context.Context, in *GetFansListRequest, opts ...grpc.CallOption) (*GetFansListResponse, error)
	IsFollow(ctx context.Context, in *IsFollowRequest, opts ...grpc.CallOption) (*IsFollowResponse, error)
	GetShortVideoListByUserId(ctx context.Context, in *GetShortVideoListByUserIdRequest, opts ...grpc.CallOption) (*GetShortVideoListByUserIdResponse, error)
	GetShortVideoUserCountByUserId(ctx context.Context, in *GetShortVideoUserCountByUserIdRequest, opts ...grpc.CallOption) (*GetShortVideoUserCountByUserIdResponse, error)
	GetShortVideoNoticeList(ctx context.Context, in *GetShortVideoNoticesRequest, opts ...grpc.CallOption) (*GetShortVideoNoticesResponse, error)
	BlockShortVideo(ctx context.Context, in *BlockShortVideoRequest, opts ...grpc.CallOption) (*BlockShortVideoResponse, error)
}

type shortVideoClient struct {
	cc grpc.ClientConnInterface
}

func NewShortVideoClient(cc grpc.ClientConnInterface) ShortVideoClient {
	return &shortVideoClient{cc}
}

func (c *shortVideoClient) FileUploadCallBack(ctx context.Context, in *FileUploadCallBackRequest, opts ...grpc.CallOption) (*FileUploadCallBackResponse, error) {
	out := new(FileUploadCallBackResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/FileUploadCallBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) FileDeletedCallBack(ctx context.Context, in *FileDeletedCallBackRequest, opts ...grpc.CallOption) (*FileDeletedCallBackResponse, error) {
	out := new(FileDeletedCallBackResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/FileDeletedCallBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) ProcedureStateChangeCallBack(ctx context.Context, in *ProcedureStateChangeCallBackRequest, opts ...grpc.CallOption) (*ProcedureStateChangeCallBackResponse, error) {
	out := new(ProcedureStateChangeCallBackResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/ProcedureStateChangeCallBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) CreateShortVideo(ctx context.Context, in *CreateShortVideoRequest, opts ...grpc.CallOption) (*CreateShortVideoResponse, error) {
	out := new(CreateShortVideoResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/CreateShortVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) GetUpdateShortVideoSign(ctx context.Context, in *GetUpdateShortVideoSignRequest, opts ...grpc.CallOption) (*GetUpdateShortVideoSignResponse, error) {
	out := new(GetUpdateShortVideoSignResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/GetUpdateShortVideoSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) GetShortVideoByFieldId(ctx context.Context, in *GetShortVideoByFileIdRequest, opts ...grpc.CallOption) (*GetShortVideoByFileIdResponse, error) {
	out := new(GetShortVideoByFileIdResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/GetShortVideoByFieldId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) GetShortVideoByFieldIdList(ctx context.Context, in *GetShortVideoByFileIdListRequest, opts ...grpc.CallOption) (*GetShortVideoByFileIdListResponse, error) {
	out := new(GetShortVideoByFileIdListResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/GetShortVideoByFieldIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) SearchShortVideo(ctx context.Context, in *SearchShortVideoRequest, opts ...grpc.CallOption) (*SearchShortVideoResponse, error) {
	out := new(SearchShortVideoResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/SearchShortVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) ShortVideoLike(ctx context.Context, in *ShortVideoLikeRequest, opts ...grpc.CallOption) (*ShortVideoLikeResponse, error) {
	out := new(ShortVideoLikeResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/ShortVideoLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) GetLikeShortVideoList(ctx context.Context, in *GetLikeShortVideoListRequest, opts ...grpc.CallOption) (*GetLikeShortVideoListResponse, error) {
	out := new(GetLikeShortVideoListResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/GetLikeShortVideoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) ShortVideoComment(ctx context.Context, in *ShortVideoCommentRequest, opts ...grpc.CallOption) (*ShortVideoCommentResponse, error) {
	out := new(ShortVideoCommentResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/ShortVideoComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) DeleteShortVideoComment(ctx context.Context, in *DeleteShortVideoRequest, opts ...grpc.CallOption) (*DeleteShortVideoResponse, error) {
	out := new(DeleteShortVideoResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/DeleteShortVideoComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) ShortVideoCommentLike(ctx context.Context, in *ShortVideoCommentLikeRequest, opts ...grpc.CallOption) (*ShortVideoCommentLikeResponse, error) {
	out := new(ShortVideoCommentLikeResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/ShortVideoCommentLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) GetShortVideoCommentList(ctx context.Context, in *GetShortVideoCommentListRequest, opts ...grpc.CallOption) (*GetShortVideoCommentListResponse, error) {
	out := new(GetShortVideoCommentListResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/GetShortVideoCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) GetCommentPage(ctx context.Context, in *GetCommentPageRequest, opts ...grpc.CallOption) (*GetCommentPageResponse, error) {
	out := new(GetCommentPageResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/GetCommentPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) GetCommentPageReplyList(ctx context.Context, in *GetCommentPageReplyListRequest, opts ...grpc.CallOption) (*GetCommentPageReplyListResponse, error) {
	out := new(GetCommentPageReplyListResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/GetCommentPageReplyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) GetRecommendShortVideoList(ctx context.Context, in *GetRecommendShortVideoListRequest, opts ...grpc.CallOption) (*GetRecommendShortVideoListResponse, error) {
	out := new(GetRecommendShortVideoListResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/GetRecommendShortVideoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) GetFollowShortVideoList(ctx context.Context, in *GetFollowShortVideoListRequest, opts ...grpc.CallOption) (*GetFollowShortVideoListResponse, error) {
	out := new(GetFollowShortVideoListResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/GetFollowShortVideoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error) {
	out := new(FollowResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) GetFollowList(ctx context.Context, in *GetFollowListRequest, opts ...grpc.CallOption) (*GetFollowListResponse, error) {
	out := new(GetFollowListResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/GetFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) GetFansList(ctx context.Context, in *GetFansListRequest, opts ...grpc.CallOption) (*GetFansListResponse, error) {
	out := new(GetFansListResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/GetFansList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) IsFollow(ctx context.Context, in *IsFollowRequest, opts ...grpc.CallOption) (*IsFollowResponse, error) {
	out := new(IsFollowResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/IsFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) GetShortVideoListByUserId(ctx context.Context, in *GetShortVideoListByUserIdRequest, opts ...grpc.CallOption) (*GetShortVideoListByUserIdResponse, error) {
	out := new(GetShortVideoListByUserIdResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/GetShortVideoListByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) GetShortVideoUserCountByUserId(ctx context.Context, in *GetShortVideoUserCountByUserIdRequest, opts ...grpc.CallOption) (*GetShortVideoUserCountByUserIdResponse, error) {
	out := new(GetShortVideoUserCountByUserIdResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/GetShortVideoUserCountByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) GetShortVideoNoticeList(ctx context.Context, in *GetShortVideoNoticesRequest, opts ...grpc.CallOption) (*GetShortVideoNoticesResponse, error) {
	out := new(GetShortVideoNoticesResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/GetShortVideoNoticeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortVideoClient) BlockShortVideo(ctx context.Context, in *BlockShortVideoRequest, opts ...grpc.CallOption) (*BlockShortVideoResponse, error) {
	out := new(BlockShortVideoResponse)
	err := c.cc.Invoke(ctx, "/short_video.shortVideo/BlockShortVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortVideoServer is the server API for ShortVideo service.
// All implementations should embed UnimplementedShortVideoServer
// for forward compatibility
type ShortVideoServer interface {
	// call back
	FileUploadCallBack(context.Context, *FileUploadCallBackRequest) (*FileUploadCallBackResponse, error)
	FileDeletedCallBack(context.Context, *FileDeletedCallBackRequest) (*FileDeletedCallBackResponse, error)
	ProcedureStateChangeCallBack(context.Context, *ProcedureStateChangeCallBackRequest) (*ProcedureStateChangeCallBackResponse, error)
	CreateShortVideo(context.Context, *CreateShortVideoRequest) (*CreateShortVideoResponse, error)
	GetUpdateShortVideoSign(context.Context, *GetUpdateShortVideoSignRequest) (*GetUpdateShortVideoSignResponse, error)
	GetShortVideoByFieldId(context.Context, *GetShortVideoByFileIdRequest) (*GetShortVideoByFileIdResponse, error)
	GetShortVideoByFieldIdList(context.Context, *GetShortVideoByFileIdListRequest) (*GetShortVideoByFileIdListResponse, error)
	SearchShortVideo(context.Context, *SearchShortVideoRequest) (*SearchShortVideoResponse, error)
	ShortVideoLike(context.Context, *ShortVideoLikeRequest) (*ShortVideoLikeResponse, error)
	GetLikeShortVideoList(context.Context, *GetLikeShortVideoListRequest) (*GetLikeShortVideoListResponse, error)
	ShortVideoComment(context.Context, *ShortVideoCommentRequest) (*ShortVideoCommentResponse, error)
	DeleteShortVideoComment(context.Context, *DeleteShortVideoRequest) (*DeleteShortVideoResponse, error)
	ShortVideoCommentLike(context.Context, *ShortVideoCommentLikeRequest) (*ShortVideoCommentLikeResponse, error)
	GetShortVideoCommentList(context.Context, *GetShortVideoCommentListRequest) (*GetShortVideoCommentListResponse, error)
	GetCommentPage(context.Context, *GetCommentPageRequest) (*GetCommentPageResponse, error)
	GetCommentPageReplyList(context.Context, *GetCommentPageReplyListRequest) (*GetCommentPageReplyListResponse, error)
	GetRecommendShortVideoList(context.Context, *GetRecommendShortVideoListRequest) (*GetRecommendShortVideoListResponse, error)
	GetFollowShortVideoList(context.Context, *GetFollowShortVideoListRequest) (*GetFollowShortVideoListResponse, error)
	Follow(context.Context, *FollowRequest) (*FollowResponse, error)
	GetFollowList(context.Context, *GetFollowListRequest) (*GetFollowListResponse, error)
	GetFansList(context.Context, *GetFansListRequest) (*GetFansListResponse, error)
	IsFollow(context.Context, *IsFollowRequest) (*IsFollowResponse, error)
	GetShortVideoListByUserId(context.Context, *GetShortVideoListByUserIdRequest) (*GetShortVideoListByUserIdResponse, error)
	GetShortVideoUserCountByUserId(context.Context, *GetShortVideoUserCountByUserIdRequest) (*GetShortVideoUserCountByUserIdResponse, error)
	GetShortVideoNoticeList(context.Context, *GetShortVideoNoticesRequest) (*GetShortVideoNoticesResponse, error)
	BlockShortVideo(context.Context, *BlockShortVideoRequest) (*BlockShortVideoResponse, error)
}

// UnimplementedShortVideoServer should be embedded to have forward compatible implementations.
type UnimplementedShortVideoServer struct {
}

func (UnimplementedShortVideoServer) FileUploadCallBack(context.Context, *FileUploadCallBackRequest) (*FileUploadCallBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUploadCallBack not implemented")
}
func (UnimplementedShortVideoServer) FileDeletedCallBack(context.Context, *FileDeletedCallBackRequest) (*FileDeletedCallBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDeletedCallBack not implemented")
}
func (UnimplementedShortVideoServer) ProcedureStateChangeCallBack(context.Context, *ProcedureStateChangeCallBackRequest) (*ProcedureStateChangeCallBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcedureStateChangeCallBack not implemented")
}
func (UnimplementedShortVideoServer) CreateShortVideo(context.Context, *CreateShortVideoRequest) (*CreateShortVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortVideo not implemented")
}
func (UnimplementedShortVideoServer) GetUpdateShortVideoSign(context.Context, *GetUpdateShortVideoSignRequest) (*GetUpdateShortVideoSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdateShortVideoSign not implemented")
}
func (UnimplementedShortVideoServer) GetShortVideoByFieldId(context.Context, *GetShortVideoByFileIdRequest) (*GetShortVideoByFileIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortVideoByFieldId not implemented")
}
func (UnimplementedShortVideoServer) GetShortVideoByFieldIdList(context.Context, *GetShortVideoByFileIdListRequest) (*GetShortVideoByFileIdListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortVideoByFieldIdList not implemented")
}
func (UnimplementedShortVideoServer) SearchShortVideo(context.Context, *SearchShortVideoRequest) (*SearchShortVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchShortVideo not implemented")
}
func (UnimplementedShortVideoServer) ShortVideoLike(context.Context, *ShortVideoLikeRequest) (*ShortVideoLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortVideoLike not implemented")
}
func (UnimplementedShortVideoServer) GetLikeShortVideoList(context.Context, *GetLikeShortVideoListRequest) (*GetLikeShortVideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikeShortVideoList not implemented")
}
func (UnimplementedShortVideoServer) ShortVideoComment(context.Context, *ShortVideoCommentRequest) (*ShortVideoCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortVideoComment not implemented")
}
func (UnimplementedShortVideoServer) DeleteShortVideoComment(context.Context, *DeleteShortVideoRequest) (*DeleteShortVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortVideoComment not implemented")
}
func (UnimplementedShortVideoServer) ShortVideoCommentLike(context.Context, *ShortVideoCommentLikeRequest) (*ShortVideoCommentLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortVideoCommentLike not implemented")
}
func (UnimplementedShortVideoServer) GetShortVideoCommentList(context.Context, *GetShortVideoCommentListRequest) (*GetShortVideoCommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortVideoCommentList not implemented")
}
func (UnimplementedShortVideoServer) GetCommentPage(context.Context, *GetCommentPageRequest) (*GetCommentPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentPage not implemented")
}
func (UnimplementedShortVideoServer) GetCommentPageReplyList(context.Context, *GetCommentPageReplyListRequest) (*GetCommentPageReplyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentPageReplyList not implemented")
}
func (UnimplementedShortVideoServer) GetRecommendShortVideoList(context.Context, *GetRecommendShortVideoListRequest) (*GetRecommendShortVideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendShortVideoList not implemented")
}
func (UnimplementedShortVideoServer) GetFollowShortVideoList(context.Context, *GetFollowShortVideoListRequest) (*GetFollowShortVideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowShortVideoList not implemented")
}
func (UnimplementedShortVideoServer) Follow(context.Context, *FollowRequest) (*FollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedShortVideoServer) GetFollowList(context.Context, *GetFollowListRequest) (*GetFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowList not implemented")
}
func (UnimplementedShortVideoServer) GetFansList(context.Context, *GetFansListRequest) (*GetFansListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFansList not implemented")
}
func (UnimplementedShortVideoServer) IsFollow(context.Context, *IsFollowRequest) (*IsFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFollow not implemented")
}
func (UnimplementedShortVideoServer) GetShortVideoListByUserId(context.Context, *GetShortVideoListByUserIdRequest) (*GetShortVideoListByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortVideoListByUserId not implemented")
}
func (UnimplementedShortVideoServer) GetShortVideoUserCountByUserId(context.Context, *GetShortVideoUserCountByUserIdRequest) (*GetShortVideoUserCountByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortVideoUserCountByUserId not implemented")
}
func (UnimplementedShortVideoServer) GetShortVideoNoticeList(context.Context, *GetShortVideoNoticesRequest) (*GetShortVideoNoticesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortVideoNoticeList not implemented")
}
func (UnimplementedShortVideoServer) BlockShortVideo(context.Context, *BlockShortVideoRequest) (*BlockShortVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockShortVideo not implemented")
}

// UnsafeShortVideoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortVideoServer will
// result in compilation errors.
type UnsafeShortVideoServer interface {
	mustEmbedUnimplementedShortVideoServer()
}

func RegisterShortVideoServer(s grpc.ServiceRegistrar, srv ShortVideoServer) {
	s.RegisterService(&ShortVideo_ServiceDesc, srv)
}

func _ShortVideo_FileUploadCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadCallBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).FileUploadCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/FileUploadCallBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).FileUploadCallBack(ctx, req.(*FileUploadCallBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_FileDeletedCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDeletedCallBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).FileDeletedCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/FileDeletedCallBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).FileDeletedCallBack(ctx, req.(*FileDeletedCallBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_ProcedureStateChangeCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcedureStateChangeCallBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).ProcedureStateChangeCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/ProcedureStateChangeCallBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).ProcedureStateChangeCallBack(ctx, req.(*ProcedureStateChangeCallBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_CreateShortVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).CreateShortVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/CreateShortVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).CreateShortVideo(ctx, req.(*CreateShortVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_GetUpdateShortVideoSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateShortVideoSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).GetUpdateShortVideoSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/GetUpdateShortVideoSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).GetUpdateShortVideoSign(ctx, req.(*GetUpdateShortVideoSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_GetShortVideoByFieldId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortVideoByFileIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).GetShortVideoByFieldId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/GetShortVideoByFieldId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).GetShortVideoByFieldId(ctx, req.(*GetShortVideoByFileIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_GetShortVideoByFieldIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortVideoByFileIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).GetShortVideoByFieldIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/GetShortVideoByFieldIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).GetShortVideoByFieldIdList(ctx, req.(*GetShortVideoByFileIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_SearchShortVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchShortVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).SearchShortVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/SearchShortVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).SearchShortVideo(ctx, req.(*SearchShortVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_ShortVideoLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortVideoLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).ShortVideoLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/ShortVideoLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).ShortVideoLike(ctx, req.(*ShortVideoLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_GetLikeShortVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikeShortVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).GetLikeShortVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/GetLikeShortVideoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).GetLikeShortVideoList(ctx, req.(*GetLikeShortVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_ShortVideoComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortVideoCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).ShortVideoComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/ShortVideoComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).ShortVideoComment(ctx, req.(*ShortVideoCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_DeleteShortVideoComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).DeleteShortVideoComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/DeleteShortVideoComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).DeleteShortVideoComment(ctx, req.(*DeleteShortVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_ShortVideoCommentLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortVideoCommentLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).ShortVideoCommentLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/ShortVideoCommentLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).ShortVideoCommentLike(ctx, req.(*ShortVideoCommentLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_GetShortVideoCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortVideoCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).GetShortVideoCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/GetShortVideoCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).GetShortVideoCommentList(ctx, req.(*GetShortVideoCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_GetCommentPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).GetCommentPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/GetCommentPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).GetCommentPage(ctx, req.(*GetCommentPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_GetCommentPageReplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentPageReplyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).GetCommentPageReplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/GetCommentPageReplyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).GetCommentPageReplyList(ctx, req.(*GetCommentPageReplyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_GetRecommendShortVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendShortVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).GetRecommendShortVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/GetRecommendShortVideoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).GetRecommendShortVideoList(ctx, req.(*GetRecommendShortVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_GetFollowShortVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowShortVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).GetFollowShortVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/GetFollowShortVideoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).GetFollowShortVideoList(ctx, req.(*GetFollowShortVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).Follow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_GetFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).GetFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/GetFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).GetFollowList(ctx, req.(*GetFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_GetFansList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFansListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).GetFansList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/GetFansList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).GetFansList(ctx, req.(*GetFansListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_IsFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).IsFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/IsFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).IsFollow(ctx, req.(*IsFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_GetShortVideoListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortVideoListByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).GetShortVideoListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/GetShortVideoListByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).GetShortVideoListByUserId(ctx, req.(*GetShortVideoListByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_GetShortVideoUserCountByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortVideoUserCountByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).GetShortVideoUserCountByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/GetShortVideoUserCountByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).GetShortVideoUserCountByUserId(ctx, req.(*GetShortVideoUserCountByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_GetShortVideoNoticeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortVideoNoticesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).GetShortVideoNoticeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/GetShortVideoNoticeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).GetShortVideoNoticeList(ctx, req.(*GetShortVideoNoticesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortVideo_BlockShortVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockShortVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortVideoServer).BlockShortVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/short_video.shortVideo/BlockShortVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortVideoServer).BlockShortVideo(ctx, req.(*BlockShortVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortVideo_ServiceDesc is the grpc.ServiceDesc for ShortVideo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortVideo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "short_video.shortVideo",
	HandlerType: (*ShortVideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FileUploadCallBack",
			Handler:    _ShortVideo_FileUploadCallBack_Handler,
		},
		{
			MethodName: "FileDeletedCallBack",
			Handler:    _ShortVideo_FileDeletedCallBack_Handler,
		},
		{
			MethodName: "ProcedureStateChangeCallBack",
			Handler:    _ShortVideo_ProcedureStateChangeCallBack_Handler,
		},
		{
			MethodName: "CreateShortVideo",
			Handler:    _ShortVideo_CreateShortVideo_Handler,
		},
		{
			MethodName: "GetUpdateShortVideoSign",
			Handler:    _ShortVideo_GetUpdateShortVideoSign_Handler,
		},
		{
			MethodName: "GetShortVideoByFieldId",
			Handler:    _ShortVideo_GetShortVideoByFieldId_Handler,
		},
		{
			MethodName: "GetShortVideoByFieldIdList",
			Handler:    _ShortVideo_GetShortVideoByFieldIdList_Handler,
		},
		{
			MethodName: "SearchShortVideo",
			Handler:    _ShortVideo_SearchShortVideo_Handler,
		},
		{
			MethodName: "ShortVideoLike",
			Handler:    _ShortVideo_ShortVideoLike_Handler,
		},
		{
			MethodName: "GetLikeShortVideoList",
			Handler:    _ShortVideo_GetLikeShortVideoList_Handler,
		},
		{
			MethodName: "ShortVideoComment",
			Handler:    _ShortVideo_ShortVideoComment_Handler,
		},
		{
			MethodName: "DeleteShortVideoComment",
			Handler:    _ShortVideo_DeleteShortVideoComment_Handler,
		},
		{
			MethodName: "ShortVideoCommentLike",
			Handler:    _ShortVideo_ShortVideoCommentLike_Handler,
		},
		{
			MethodName: "GetShortVideoCommentList",
			Handler:    _ShortVideo_GetShortVideoCommentList_Handler,
		},
		{
			MethodName: "GetCommentPage",
			Handler:    _ShortVideo_GetCommentPage_Handler,
		},
		{
			MethodName: "GetCommentPageReplyList",
			Handler:    _ShortVideo_GetCommentPageReplyList_Handler,
		},
		{
			MethodName: "GetRecommendShortVideoList",
			Handler:    _ShortVideo_GetRecommendShortVideoList_Handler,
		},
		{
			MethodName: "GetFollowShortVideoList",
			Handler:    _ShortVideo_GetFollowShortVideoList_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _ShortVideo_Follow_Handler,
		},
		{
			MethodName: "GetFollowList",
			Handler:    _ShortVideo_GetFollowList_Handler,
		},
		{
			MethodName: "GetFansList",
			Handler:    _ShortVideo_GetFansList_Handler,
		},
		{
			MethodName: "IsFollow",
			Handler:    _ShortVideo_IsFollow_Handler,
		},
		{
			MethodName: "GetShortVideoListByUserId",
			Handler:    _ShortVideo_GetShortVideoListByUserId_Handler,
		},
		{
			MethodName: "GetShortVideoUserCountByUserId",
			Handler:    _ShortVideo_GetShortVideoUserCountByUserId_Handler,
		},
		{
			MethodName: "GetShortVideoNoticeList",
			Handler:    _ShortVideo_GetShortVideoNoticeList_Handler,
		},
		{
			MethodName: "BlockShortVideo",
			Handler:    _ShortVideo_BlockShortVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "short_video/short_video.proto",
}
