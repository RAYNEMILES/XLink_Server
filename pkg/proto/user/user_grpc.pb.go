// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	RemoveUserFaceUrl(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	SetGlobalRecvMessageOpt(ctx context.Context, in *SetGlobalRecvMessageOptReq, opts ...grpc.CallOption) (*SetGlobalRecvMessageOptResp, error)
	DeleteUsers(ctx context.Context, in *DeleteUsersReq, opts ...grpc.CallOption) (*DeleteUsersResp, error)
	GetAllUserID(ctx context.Context, in *GetAllUserIDReq, opts ...grpc.CallOption) (*GetAllUserIDResp, error)
	GenerateFriendAndGroupForChannel(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*CommonResp, error)
	AccountCheck(ctx context.Context, in *AccountCheckReq, opts ...grpc.CallOption) (*AccountCheckResp, error)
	GetConversation(ctx context.Context, in *GetConversationReq, opts ...grpc.CallOption) (*GetConversationResp, error)
	GetAllConversations(ctx context.Context, in *GetAllConversationsReq, opts ...grpc.CallOption) (*GetAllConversationsResp, error)
	GetConversations(ctx context.Context, in *GetConversationsReq, opts ...grpc.CallOption) (*GetConversationsResp, error)
	BatchSetConversations(ctx context.Context, in *BatchSetConversationsReq, opts ...grpc.CallOption) (*BatchSetConversationsResp, error)
	SetConversation(ctx context.Context, in *SetConversationReq, opts ...grpc.CallOption) (*SetConversationResp, error)
	SetRecvMsgOpt(ctx context.Context, in *SetRecvMsgOptReq, opts ...grpc.CallOption) (*SetRecvMsgOptResp, error)
	GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error)
	GetUsersByName(ctx context.Context, in *GetUsersByNameReq, opts ...grpc.CallOption) (*GetUsersByNameResp, error)
	ResignUser(ctx context.Context, in *ResignUserReq, opts ...grpc.CallOption) (*ResignUserResp, error)
	AlterUser(ctx context.Context, in *AlterUserReq, opts ...grpc.CallOption) (*AlterUserResp, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResp, error)
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
	BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error)
	UnBlockUser(ctx context.Context, in *UnBlockUserReq, opts ...grpc.CallOption) (*UnBlockUserResp, error)
	GetBlockUsers(ctx context.Context, in *GetBlockUsersReq, opts ...grpc.CallOption) (*GetBlockUsersResp, error)
	GetBlockUserById(ctx context.Context, in *GetBlockUserByIdReq, opts ...grpc.CallOption) (*GetBlockUserByIdResp, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error)
	SwitchStatus(ctx context.Context, in *SwitchStatusReq, opts ...grpc.CallOption) (*SwitchStatusResp, error)
	GetIviteLink(ctx context.Context, in *GetInviteLinkRequest, opts ...grpc.CallOption) (*GetInviteLinkResponse, error)
	// rpc AlterAddFriendStatus(SwitchStatusReq) returns (SwitchStatusResp);
	ExistsUser(ctx context.Context, in *ExistsUserRequest, opts ...grpc.CallOption) (*ExistsUserResponse, error)
	UserIdIsExist(ctx context.Context, in *UserIdIsExistRequest, opts ...grpc.CallOption) (*UserIdIsExistResponse, error)
	GetUsersInfoByPhoneList(ctx context.Context, in *GetUsersInfoByPhoneListRequest, opts ...grpc.CallOption) (*GetUsersInfoByPhoneListResponse, error)
	GetUsersThirdInfo(ctx context.Context, in *GetUsersThirdInfoRequest, opts ...grpc.CallOption) (*GetUsersThirdInfoResponse, error)
	GetYouKnowUsersByContactList(ctx context.Context, in *GetYouKnowUsersByContactListRequest, opts ...grpc.CallOption) (*GetYouKnowUsersByContactListResponse, error)
	// privacy
	GetPrivacy(ctx context.Context, in *GetUserPrivacyRequest, opts ...grpc.CallOption) (*GetUserPrivacyResponse, error)
	SetPrivacy(ctx context.Context, in *SetUserPrivacyRequest, opts ...grpc.CallOption) (*SetUserPrivacyResponse, error)
	GetUserPrivacyByUserIdList(ctx context.Context, in *GetUserPrivacyByUserIdListRequest, opts ...grpc.CallOption) (*GetUserPrivacyByUserIdListResponse, error)
	SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error)
	GetDeletedUsers(ctx context.Context, in *GetDeletedUsersReq, opts ...grpc.CallOption) (*GetDeletedUsersResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, "/user.user/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, "/user.user/UpdateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RemoveUserFaceUrl(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, "/user.user/RemoveUserFaceUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetGlobalRecvMessageOpt(ctx context.Context, in *SetGlobalRecvMessageOptReq, opts ...grpc.CallOption) (*SetGlobalRecvMessageOptResp, error) {
	out := new(SetGlobalRecvMessageOptResp)
	err := c.cc.Invoke(ctx, "/user.user/SetGlobalRecvMessageOpt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteUsers(ctx context.Context, in *DeleteUsersReq, opts ...grpc.CallOption) (*DeleteUsersResp, error) {
	out := new(DeleteUsersResp)
	err := c.cc.Invoke(ctx, "/user.user/DeleteUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAllUserID(ctx context.Context, in *GetAllUserIDReq, opts ...grpc.CallOption) (*GetAllUserIDResp, error) {
	out := new(GetAllUserIDResp)
	err := c.cc.Invoke(ctx, "/user.user/GetAllUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GenerateFriendAndGroupForChannel(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/user.user/GenerateFriendAndGroupForChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AccountCheck(ctx context.Context, in *AccountCheckReq, opts ...grpc.CallOption) (*AccountCheckResp, error) {
	out := new(AccountCheckResp)
	err := c.cc.Invoke(ctx, "/user.user/AccountCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetConversation(ctx context.Context, in *GetConversationReq, opts ...grpc.CallOption) (*GetConversationResp, error) {
	out := new(GetConversationResp)
	err := c.cc.Invoke(ctx, "/user.user/GetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAllConversations(ctx context.Context, in *GetAllConversationsReq, opts ...grpc.CallOption) (*GetAllConversationsResp, error) {
	out := new(GetAllConversationsResp)
	err := c.cc.Invoke(ctx, "/user.user/GetAllConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetConversations(ctx context.Context, in *GetConversationsReq, opts ...grpc.CallOption) (*GetConversationsResp, error) {
	out := new(GetConversationsResp)
	err := c.cc.Invoke(ctx, "/user.user/GetConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BatchSetConversations(ctx context.Context, in *BatchSetConversationsReq, opts ...grpc.CallOption) (*BatchSetConversationsResp, error) {
	out := new(BatchSetConversationsResp)
	err := c.cc.Invoke(ctx, "/user.user/BatchSetConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetConversation(ctx context.Context, in *SetConversationReq, opts ...grpc.CallOption) (*SetConversationResp, error) {
	out := new(SetConversationResp)
	err := c.cc.Invoke(ctx, "/user.user/SetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetRecvMsgOpt(ctx context.Context, in *SetRecvMsgOptReq, opts ...grpc.CallOption) (*SetRecvMsgOptResp, error) {
	out := new(SetRecvMsgOptResp)
	err := c.cc.Invoke(ctx, "/user.user/SetRecvMsgOpt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error) {
	out := new(GetUserByIdResp)
	err := c.cc.Invoke(ctx, "/user.user/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUsersByName(ctx context.Context, in *GetUsersByNameReq, opts ...grpc.CallOption) (*GetUsersByNameResp, error) {
	out := new(GetUsersByNameResp)
	err := c.cc.Invoke(ctx, "/user.user/GetUsersByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ResignUser(ctx context.Context, in *ResignUserReq, opts ...grpc.CallOption) (*ResignUserResp, error) {
	out := new(ResignUserResp)
	err := c.cc.Invoke(ctx, "/user.user/ResignUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AlterUser(ctx context.Context, in *AlterUserReq, opts ...grpc.CallOption) (*AlterUserResp, error) {
	out := new(AlterUserResp)
	err := c.cc.Invoke(ctx, "/user.user/AlterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResp, error) {
	out := new(GetUsersResp)
	err := c.cc.Invoke(ctx, "/user.user/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	out := new(AddUserResp)
	err := c.cc.Invoke(ctx, "/user.user/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error) {
	out := new(BlockUserResp)
	err := c.cc.Invoke(ctx, "/user.user/BlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UnBlockUser(ctx context.Context, in *UnBlockUserReq, opts ...grpc.CallOption) (*UnBlockUserResp, error) {
	out := new(UnBlockUserResp)
	err := c.cc.Invoke(ctx, "/user.user/UnBlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetBlockUsers(ctx context.Context, in *GetBlockUsersReq, opts ...grpc.CallOption) (*GetBlockUsersResp, error) {
	out := new(GetBlockUsersResp)
	err := c.cc.Invoke(ctx, "/user.user/GetBlockUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetBlockUserById(ctx context.Context, in *GetBlockUserByIdReq, opts ...grpc.CallOption) (*GetBlockUserByIdResp, error) {
	out := new(GetBlockUserByIdResp)
	err := c.cc.Invoke(ctx, "/user.user/GetBlockUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error) {
	out := new(DeleteUserResp)
	err := c.cc.Invoke(ctx, "/user.user/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SwitchStatus(ctx context.Context, in *SwitchStatusReq, opts ...grpc.CallOption) (*SwitchStatusResp, error) {
	out := new(SwitchStatusResp)
	err := c.cc.Invoke(ctx, "/user.user/SwitchStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetIviteLink(ctx context.Context, in *GetInviteLinkRequest, opts ...grpc.CallOption) (*GetInviteLinkResponse, error) {
	out := new(GetInviteLinkResponse)
	err := c.cc.Invoke(ctx, "/user.user/GetIviteLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ExistsUser(ctx context.Context, in *ExistsUserRequest, opts ...grpc.CallOption) (*ExistsUserResponse, error) {
	out := new(ExistsUserResponse)
	err := c.cc.Invoke(ctx, "/user.user/ExistsUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserIdIsExist(ctx context.Context, in *UserIdIsExistRequest, opts ...grpc.CallOption) (*UserIdIsExistResponse, error) {
	out := new(UserIdIsExistResponse)
	err := c.cc.Invoke(ctx, "/user.user/UserIdIsExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUsersInfoByPhoneList(ctx context.Context, in *GetUsersInfoByPhoneListRequest, opts ...grpc.CallOption) (*GetUsersInfoByPhoneListResponse, error) {
	out := new(GetUsersInfoByPhoneListResponse)
	err := c.cc.Invoke(ctx, "/user.user/GetUsersInfoByPhoneList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUsersThirdInfo(ctx context.Context, in *GetUsersThirdInfoRequest, opts ...grpc.CallOption) (*GetUsersThirdInfoResponse, error) {
	out := new(GetUsersThirdInfoResponse)
	err := c.cc.Invoke(ctx, "/user.user/GetUsersThirdInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetYouKnowUsersByContactList(ctx context.Context, in *GetYouKnowUsersByContactListRequest, opts ...grpc.CallOption) (*GetYouKnowUsersByContactListResponse, error) {
	out := new(GetYouKnowUsersByContactListResponse)
	err := c.cc.Invoke(ctx, "/user.user/GetYouKnowUsersByContactList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetPrivacy(ctx context.Context, in *GetUserPrivacyRequest, opts ...grpc.CallOption) (*GetUserPrivacyResponse, error) {
	out := new(GetUserPrivacyResponse)
	err := c.cc.Invoke(ctx, "/user.user/GetPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetPrivacy(ctx context.Context, in *SetUserPrivacyRequest, opts ...grpc.CallOption) (*SetUserPrivacyResponse, error) {
	out := new(SetUserPrivacyResponse)
	err := c.cc.Invoke(ctx, "/user.user/SetPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserPrivacyByUserIdList(ctx context.Context, in *GetUserPrivacyByUserIdListRequest, opts ...grpc.CallOption) (*GetUserPrivacyByUserIdListResponse, error) {
	out := new(GetUserPrivacyByUserIdListResponse)
	err := c.cc.Invoke(ctx, "/user.user/GetUserPrivacyByUserIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error) {
	out := new(SearchUserResponse)
	err := c.cc.Invoke(ctx, "/user.user/SearchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetDeletedUsers(ctx context.Context, in *GetDeletedUsersReq, opts ...grpc.CallOption) (*GetDeletedUsersResp, error) {
	out := new(GetDeletedUsersResp)
	err := c.cc.Invoke(ctx, "/user.user/GetDeletedUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations should embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	RemoveUserFaceUrl(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	SetGlobalRecvMessageOpt(context.Context, *SetGlobalRecvMessageOptReq) (*SetGlobalRecvMessageOptResp, error)
	DeleteUsers(context.Context, *DeleteUsersReq) (*DeleteUsersResp, error)
	GetAllUserID(context.Context, *GetAllUserIDReq) (*GetAllUserIDResp, error)
	GenerateFriendAndGroupForChannel(context.Context, *CommonReq) (*CommonResp, error)
	AccountCheck(context.Context, *AccountCheckReq) (*AccountCheckResp, error)
	GetConversation(context.Context, *GetConversationReq) (*GetConversationResp, error)
	GetAllConversations(context.Context, *GetAllConversationsReq) (*GetAllConversationsResp, error)
	GetConversations(context.Context, *GetConversationsReq) (*GetConversationsResp, error)
	BatchSetConversations(context.Context, *BatchSetConversationsReq) (*BatchSetConversationsResp, error)
	SetConversation(context.Context, *SetConversationReq) (*SetConversationResp, error)
	SetRecvMsgOpt(context.Context, *SetRecvMsgOptReq) (*SetRecvMsgOptResp, error)
	GetUserById(context.Context, *GetUserByIdReq) (*GetUserByIdResp, error)
	GetUsersByName(context.Context, *GetUsersByNameReq) (*GetUsersByNameResp, error)
	ResignUser(context.Context, *ResignUserReq) (*ResignUserResp, error)
	AlterUser(context.Context, *AlterUserReq) (*AlterUserResp, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResp, error)
	AddUser(context.Context, *AddUserReq) (*AddUserResp, error)
	BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error)
	UnBlockUser(context.Context, *UnBlockUserReq) (*UnBlockUserResp, error)
	GetBlockUsers(context.Context, *GetBlockUsersReq) (*GetBlockUsersResp, error)
	GetBlockUserById(context.Context, *GetBlockUserByIdReq) (*GetBlockUserByIdResp, error)
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error)
	SwitchStatus(context.Context, *SwitchStatusReq) (*SwitchStatusResp, error)
	GetIviteLink(context.Context, *GetInviteLinkRequest) (*GetInviteLinkResponse, error)
	// rpc AlterAddFriendStatus(SwitchStatusReq) returns (SwitchStatusResp);
	ExistsUser(context.Context, *ExistsUserRequest) (*ExistsUserResponse, error)
	UserIdIsExist(context.Context, *UserIdIsExistRequest) (*UserIdIsExistResponse, error)
	GetUsersInfoByPhoneList(context.Context, *GetUsersInfoByPhoneListRequest) (*GetUsersInfoByPhoneListResponse, error)
	GetUsersThirdInfo(context.Context, *GetUsersThirdInfoRequest) (*GetUsersThirdInfoResponse, error)
	GetYouKnowUsersByContactList(context.Context, *GetYouKnowUsersByContactListRequest) (*GetYouKnowUsersByContactListResponse, error)
	// privacy
	GetPrivacy(context.Context, *GetUserPrivacyRequest) (*GetUserPrivacyResponse, error)
	SetPrivacy(context.Context, *SetUserPrivacyRequest) (*SetUserPrivacyResponse, error)
	GetUserPrivacyByUserIdList(context.Context, *GetUserPrivacyByUserIdListRequest) (*GetUserPrivacyByUserIdListResponse, error)
	SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error)
	GetDeletedUsers(context.Context, *GetDeletedUsersReq) (*GetDeletedUsersResp, error)
}

// UnimplementedUserServer should be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserServer) RemoveUserFaceUrl(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFaceUrl not implemented")
}
func (UnimplementedUserServer) SetGlobalRecvMessageOpt(context.Context, *SetGlobalRecvMessageOptReq) (*SetGlobalRecvMessageOptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGlobalRecvMessageOpt not implemented")
}
func (UnimplementedUserServer) DeleteUsers(context.Context, *DeleteUsersReq) (*DeleteUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsers not implemented")
}
func (UnimplementedUserServer) GetAllUserID(context.Context, *GetAllUserIDReq) (*GetAllUserIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserID not implemented")
}
func (UnimplementedUserServer) GenerateFriendAndGroupForChannel(context.Context, *CommonReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFriendAndGroupForChannel not implemented")
}
func (UnimplementedUserServer) AccountCheck(context.Context, *AccountCheckReq) (*AccountCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCheck not implemented")
}
func (UnimplementedUserServer) GetConversation(context.Context, *GetConversationReq) (*GetConversationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (UnimplementedUserServer) GetAllConversations(context.Context, *GetAllConversationsReq) (*GetAllConversationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConversations not implemented")
}
func (UnimplementedUserServer) GetConversations(context.Context, *GetConversationsReq) (*GetConversationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversations not implemented")
}
func (UnimplementedUserServer) BatchSetConversations(context.Context, *BatchSetConversationsReq) (*BatchSetConversationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSetConversations not implemented")
}
func (UnimplementedUserServer) SetConversation(context.Context, *SetConversationReq) (*SetConversationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConversation not implemented")
}
func (UnimplementedUserServer) SetRecvMsgOpt(context.Context, *SetRecvMsgOptReq) (*SetRecvMsgOptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecvMsgOpt not implemented")
}
func (UnimplementedUserServer) GetUserById(context.Context, *GetUserByIdReq) (*GetUserByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServer) GetUsersByName(context.Context, *GetUsersByNameReq) (*GetUsersByNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByName not implemented")
}
func (UnimplementedUserServer) ResignUser(context.Context, *ResignUserReq) (*ResignUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResignUser not implemented")
}
func (UnimplementedUserServer) AlterUser(context.Context, *AlterUserReq) (*AlterUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterUser not implemented")
}
func (UnimplementedUserServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserServer) AddUser(context.Context, *AddUserReq) (*AddUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserServer) BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedUserServer) UnBlockUser(context.Context, *UnBlockUserReq) (*UnBlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBlockUser not implemented")
}
func (UnimplementedUserServer) GetBlockUsers(context.Context, *GetBlockUsersReq) (*GetBlockUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockUsers not implemented")
}
func (UnimplementedUserServer) GetBlockUserById(context.Context, *GetBlockUserByIdReq) (*GetBlockUserByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockUserById not implemented")
}
func (UnimplementedUserServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServer) SwitchStatus(context.Context, *SwitchStatusReq) (*SwitchStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchStatus not implemented")
}
func (UnimplementedUserServer) GetIviteLink(context.Context, *GetInviteLinkRequest) (*GetInviteLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIviteLink not implemented")
}
func (UnimplementedUserServer) ExistsUser(context.Context, *ExistsUserRequest) (*ExistsUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsUser not implemented")
}
func (UnimplementedUserServer) UserIdIsExist(context.Context, *UserIdIsExistRequest) (*UserIdIsExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIdIsExist not implemented")
}
func (UnimplementedUserServer) GetUsersInfoByPhoneList(context.Context, *GetUsersInfoByPhoneListRequest) (*GetUsersInfoByPhoneListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersInfoByPhoneList not implemented")
}
func (UnimplementedUserServer) GetUsersThirdInfo(context.Context, *GetUsersThirdInfoRequest) (*GetUsersThirdInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersThirdInfo not implemented")
}
func (UnimplementedUserServer) GetYouKnowUsersByContactList(context.Context, *GetYouKnowUsersByContactListRequest) (*GetYouKnowUsersByContactListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYouKnowUsersByContactList not implemented")
}
func (UnimplementedUserServer) GetPrivacy(context.Context, *GetUserPrivacyRequest) (*GetUserPrivacyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivacy not implemented")
}
func (UnimplementedUserServer) SetPrivacy(context.Context, *SetUserPrivacyRequest) (*SetUserPrivacyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPrivacy not implemented")
}
func (UnimplementedUserServer) GetUserPrivacyByUserIdList(context.Context, *GetUserPrivacyByUserIdListRequest) (*GetUserPrivacyByUserIdListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPrivacyByUserIdList not implemented")
}
func (UnimplementedUserServer) SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedUserServer) GetDeletedUsers(context.Context, *GetDeletedUsersReq) (*GetDeletedUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeletedUsers not implemented")
}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RemoveUserFaceUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RemoveUserFaceUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/RemoveUserFaceUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RemoveUserFaceUrl(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetGlobalRecvMessageOpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGlobalRecvMessageOptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetGlobalRecvMessageOpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/SetGlobalRecvMessageOpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetGlobalRecvMessageOpt(ctx, req.(*SetGlobalRecvMessageOptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/DeleteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteUsers(ctx, req.(*DeleteUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAllUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAllUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetAllUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAllUserID(ctx, req.(*GetAllUserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GenerateFriendAndGroupForChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GenerateFriendAndGroupForChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GenerateFriendAndGroupForChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GenerateFriendAndGroupForChannel(ctx, req.(*CommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AccountCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AccountCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/AccountCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AccountCheck(ctx, req.(*AccountCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetConversation(ctx, req.(*GetConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAllConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAllConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetAllConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAllConversations(ctx, req.(*GetAllConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetConversations(ctx, req.(*GetConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BatchSetConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSetConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BatchSetConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/BatchSetConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BatchSetConversations(ctx, req.(*BatchSetConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/SetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetConversation(ctx, req.(*SetConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetRecvMsgOpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRecvMsgOptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetRecvMsgOpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/SetRecvMsgOpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetRecvMsgOpt(ctx, req.(*SetRecvMsgOptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserById(ctx, req.(*GetUserByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUsersByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUsersByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetUsersByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUsersByName(ctx, req.(*GetUsersByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ResignUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResignUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ResignUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/ResignUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ResignUser(ctx, req.(*ResignUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AlterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AlterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/AlterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AlterUser(ctx, req.(*AlterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BlockUser(ctx, req.(*BlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UnBlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UnBlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/UnBlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UnBlockUser(ctx, req.(*UnBlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetBlockUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetBlockUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetBlockUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetBlockUsers(ctx, req.(*GetBlockUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetBlockUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockUserByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetBlockUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetBlockUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetBlockUserById(ctx, req.(*GetBlockUserByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SwitchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SwitchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/SwitchStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SwitchStatus(ctx, req.(*SwitchStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetIviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetIviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetIviteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetIviteLink(ctx, req.(*GetInviteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ExistsUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ExistsUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/ExistsUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ExistsUser(ctx, req.(*ExistsUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserIdIsExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdIsExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserIdIsExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/UserIdIsExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserIdIsExist(ctx, req.(*UserIdIsExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUsersInfoByPhoneList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersInfoByPhoneListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUsersInfoByPhoneList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetUsersInfoByPhoneList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUsersInfoByPhoneList(ctx, req.(*GetUsersInfoByPhoneListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUsersThirdInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersThirdInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUsersThirdInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetUsersThirdInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUsersThirdInfo(ctx, req.(*GetUsersThirdInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetYouKnowUsersByContactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYouKnowUsersByContactListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetYouKnowUsersByContactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetYouKnowUsersByContactList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetYouKnowUsersByContactList(ctx, req.(*GetYouKnowUsersByContactListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPrivacyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetPrivacy(ctx, req.(*GetUserPrivacyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPrivacyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/SetPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetPrivacy(ctx, req.(*SetUserPrivacyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserPrivacyByUserIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPrivacyByUserIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserPrivacyByUserIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetUserPrivacyByUserIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserPrivacyByUserIdList(ctx, req.(*GetUserPrivacyByUserIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/SearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchUser(ctx, req.(*SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetDeletedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeletedUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetDeletedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/GetDeletedUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetDeletedUsers(ctx, req.(*GetDeletedUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _User_GetUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _User_UpdateUserInfo_Handler,
		},
		{
			MethodName: "RemoveUserFaceUrl",
			Handler:    _User_RemoveUserFaceUrl_Handler,
		},
		{
			MethodName: "SetGlobalRecvMessageOpt",
			Handler:    _User_SetGlobalRecvMessageOpt_Handler,
		},
		{
			MethodName: "DeleteUsers",
			Handler:    _User_DeleteUsers_Handler,
		},
		{
			MethodName: "GetAllUserID",
			Handler:    _User_GetAllUserID_Handler,
		},
		{
			MethodName: "GenerateFriendAndGroupForChannel",
			Handler:    _User_GenerateFriendAndGroupForChannel_Handler,
		},
		{
			MethodName: "AccountCheck",
			Handler:    _User_AccountCheck_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _User_GetConversation_Handler,
		},
		{
			MethodName: "GetAllConversations",
			Handler:    _User_GetAllConversations_Handler,
		},
		{
			MethodName: "GetConversations",
			Handler:    _User_GetConversations_Handler,
		},
		{
			MethodName: "BatchSetConversations",
			Handler:    _User_BatchSetConversations_Handler,
		},
		{
			MethodName: "SetConversation",
			Handler:    _User_SetConversation_Handler,
		},
		{
			MethodName: "SetRecvMsgOpt",
			Handler:    _User_SetRecvMsgOpt_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _User_GetUserById_Handler,
		},
		{
			MethodName: "GetUsersByName",
			Handler:    _User_GetUsersByName_Handler,
		},
		{
			MethodName: "ResignUser",
			Handler:    _User_ResignUser_Handler,
		},
		{
			MethodName: "AlterUser",
			Handler:    _User_AlterUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _User_GetUsers_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _User_AddUser_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _User_BlockUser_Handler,
		},
		{
			MethodName: "UnBlockUser",
			Handler:    _User_UnBlockUser_Handler,
		},
		{
			MethodName: "GetBlockUsers",
			Handler:    _User_GetBlockUsers_Handler,
		},
		{
			MethodName: "GetBlockUserById",
			Handler:    _User_GetBlockUserById_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _User_DeleteUser_Handler,
		},
		{
			MethodName: "SwitchStatus",
			Handler:    _User_SwitchStatus_Handler,
		},
		{
			MethodName: "GetIviteLink",
			Handler:    _User_GetIviteLink_Handler,
		},
		{
			MethodName: "ExistsUser",
			Handler:    _User_ExistsUser_Handler,
		},
		{
			MethodName: "UserIdIsExist",
			Handler:    _User_UserIdIsExist_Handler,
		},
		{
			MethodName: "GetUsersInfoByPhoneList",
			Handler:    _User_GetUsersInfoByPhoneList_Handler,
		},
		{
			MethodName: "GetUsersThirdInfo",
			Handler:    _User_GetUsersThirdInfo_Handler,
		},
		{
			MethodName: "GetYouKnowUsersByContactList",
			Handler:    _User_GetYouKnowUsersByContactList_Handler,
		},
		{
			MethodName: "GetPrivacy",
			Handler:    _User_GetPrivacy_Handler,
		},
		{
			MethodName: "SetPrivacy",
			Handler:    _User_SetPrivacy_Handler,
		},
		{
			MethodName: "GetUserPrivacyByUserIdList",
			Handler:    _User_GetUserPrivacyByUserIdList_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _User_SearchUser_Handler,
		},
		{
			MethodName: "GetDeletedUsers",
			Handler:    _User_GetDeletedUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
