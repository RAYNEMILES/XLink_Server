// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: admin_cms/admin_cms.proto

package admin_cms

import (
	appversion "Open_IM/pkg/proto/appversion"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminCMS_AdminLogin_FullMethodName                     = "/admin_cms.adminCMS/AdminLogin"
	AdminCMS_AdminLoginV2_FullMethodName                   = "/admin_cms.adminCMS/AdminLoginV2"
	AdminCMS_GetDiscoverUrl_FullMethodName                 = "/admin_cms.adminCMS/GetDiscoverUrl"
	AdminCMS_SaveDiscoverUrl_FullMethodName                = "/admin_cms.adminCMS/SaveDiscoverUrl"
	AdminCMS_SwitchDiscoverStatus_FullMethodName           = "/admin_cms.adminCMS/SwitchDiscoverStatus"
	AdminCMS_GetAppVersionByID_FullMethodName              = "/admin_cms.adminCMS/GetAppVersionByID"
	AdminCMS_GetLatestAppVersion_FullMethodName            = "/admin_cms.adminCMS/GetLatestAppVersion"
	AdminCMS_GetAppVersions_FullMethodName                 = "/admin_cms.adminCMS/GetAppVersions"
	AdminCMS_AddAppVersion_FullMethodName                  = "/admin_cms.adminCMS/AddAppVersion"
	AdminCMS_EditAppVersion_FullMethodName                 = "/admin_cms.adminCMS/EditAppVersion"
	AdminCMS_DeleteAppVersion_FullMethodName               = "/admin_cms.adminCMS/DeleteAppVersion"
	AdminCMS_GetInviteCodeBaseLink_FullMethodName          = "/admin_cms.adminCMS/GetInviteCodeBaseLink"
	AdminCMS_SetInviteCodeBaseLink_FullMethodName          = "/admin_cms.adminCMS/SetInviteCodeBaseLink"
	AdminCMS_CheckInviteCode_FullMethodName                = "/admin_cms.adminCMS/CheckInviteCode"
	AdminCMS_GetChannelCodeList_FullMethodName             = "/admin_cms.adminCMS/GetChannelCodeList"
	AdminCMS_SwitchChannelCodeState_FullMethodName         = "/admin_cms.adminCMS/SwitchChannelCodeState"
	AdminCMS_EditChannelCode_FullMethodName                = "/admin_cms.adminCMS/EditChannelCode"
	AdminCMS_AddChannelCode_FullMethodName                 = "/admin_cms.adminCMS/AddChannelCode"
	AdminCMS_MultiDeleteChannelCode_FullMethodName         = "/admin_cms.adminCMS/MultiDeleteChannelCode"
	AdminCMS_SetChannelCodeLimit_FullMethodName            = "/admin_cms.adminCMS/SetChannelCodeLimit"
	AdminCMS_SetChannelCodeSwitch_FullMethodName           = "/admin_cms.adminCMS/SetChannelCodeSwitch"
	AdminCMS_SetInviteCodeSwitch_FullMethodName            = "/admin_cms.adminCMS/SetInviteCodeSwitch"
	AdminCMS_SetInviteCodeLimit_FullMethodName             = "/admin_cms.adminCMS/SetInviteCodeLimit"
	AdminCMS_MultiDeleteInviteCode_FullMethodName          = "/admin_cms.adminCMS/MultiDeleteInviteCode"
	AdminCMS_AddInviteCode_FullMethodName                  = "/admin_cms.adminCMS/AddInviteCode"
	AdminCMS_GetInviteCodeList_FullMethodName              = "/admin_cms.adminCMS/GetInviteCodeList"
	AdminCMS_AddAdminUser_FullMethodName                   = "/admin_cms.adminCMS/AddAdminUser"
	AdminCMS_DeleteAdminUser_FullMethodName                = "/admin_cms.adminCMS/DeleteAdminUser"
	AdminCMS_AlterAdminUser_FullMethodName                 = "/admin_cms.adminCMS/AlterAdminUser"
	AdminCMS_GetAdminUsers_FullMethodName                  = "/admin_cms.adminCMS/GetAdminUsers"
	AdminCMS_SwitchAdminUserStatus_FullMethodName          = "/admin_cms.adminCMS/SwitchAdminUserStatus"
	AdminCMS_ChangeAdminUserPassword_FullMethodName        = "/admin_cms.adminCMS/ChangeAdminUserPassword"
	AdminCMS_GetgAuthQrCode_FullMethodName                 = "/admin_cms.adminCMS/GetgAuthQrCode"
	AdminCMS_AlterGAuthStatus_FullMethodName               = "/admin_cms.adminCMS/AlterGAuthStatus"
	AdminCMS_GetAdminPermissionReq_FullMethodName          = "/admin_cms.adminCMS/GetAdminPermissionReq"
	AdminCMS_AddAdminRole_FullMethodName                   = "/admin_cms.adminCMS/AddAdminRole"
	AdminCMS_AlterAdminRole_FullMethodName                 = "/admin_cms.adminCMS/AlterAdminRole"
	AdminCMS_DeleteAdminRole_FullMethodName                = "/admin_cms.adminCMS/DeleteAdminRole"
	AdminCMS_GetAllAdminRoles_FullMethodName               = "/admin_cms.adminCMS/GetAllAdminRoles"
	AdminCMS_SearchAminRoles_FullMethodName                = "/admin_cms.adminCMS/SearchAminRoles"
	AdminCMS_AddApiAdminRole_FullMethodName                = "/admin_cms.adminCMS/AddApiAdminRole"
	AdminCMS_AlterApiAdminRole_FullMethodName              = "/admin_cms.adminCMS/AlterApiAdminRole"
	AdminCMS_DeleteApiAdminRole_FullMethodName             = "/admin_cms.adminCMS/DeleteApiAdminRole"
	AdminCMS_GetAllApiAdminRoles_FullMethodName            = "/admin_cms.adminCMS/GetAllApiAdminRoles"
	AdminCMS_SearchApiAdminRoles_FullMethodName            = "/admin_cms.adminCMS/SearchApiAdminRoles"
	AdminCMS_AddPageAdminRole_FullMethodName               = "/admin_cms.adminCMS/AddPageAdminRole"
	AdminCMS_AlterPageAdminRole_FullMethodName             = "/admin_cms.adminCMS/AlterPageAdminRole"
	AdminCMS_DeletePageAdminRole_FullMethodName            = "/admin_cms.adminCMS/DeletePageAdminRole"
	AdminCMS_GetAllPageAdminRoles_FullMethodName           = "/admin_cms.adminCMS/GetAllPageAdminRoles"
	AdminCMS_SearchPageAdminRoles_FullMethodName           = "/admin_cms.adminCMS/SearchPageAdminRoles"
	AdminCMS_AddAdminAction_FullMethodName                 = "/admin_cms.adminCMS/AddAdminAction"
	AdminCMS_AlterAdminAction_FullMethodName               = "/admin_cms.adminCMS/AlterAdminAction"
	AdminCMS_DeleteAdminAction_FullMethodName              = "/admin_cms.adminCMS/DeleteAdminAction"
	AdminCMS_GetAllAdminAction_FullMethodName              = "/admin_cms.adminCMS/GetAllAdminAction"
	AdminCMS_SearchAdminUsers_FullMethodName               = "/admin_cms.adminCMS/SearchAdminUsers"
	AdminCMS_OperationLog_FullMethodName                   = "/admin_cms.adminCMS/OperationLog"
	AdminCMS_SearchOperationLogs_FullMethodName            = "/admin_cms.adminCMS/SearchOperationLogs"
	AdminCMS_GetInterests_FullMethodName                   = "/admin_cms.adminCMS/GetInterests"
	AdminCMS_DeleteInterests_FullMethodName                = "/admin_cms.adminCMS/DeleteInterests"
	AdminCMS_AlterInterest_FullMethodName                  = "/admin_cms.adminCMS/AlterInterest"
	AdminCMS_ChangeInterestStatus_FullMethodName           = "/admin_cms.adminCMS/ChangeInterestStatus"
	AdminCMS_AddInterests_FullMethodName                   = "/admin_cms.adminCMS/AddInterests"
	AdminCMS_GetUserInterests_FullMethodName               = "/admin_cms.adminCMS/GetUserInterests"
	AdminCMS_AlterUserInterests_FullMethodName             = "/admin_cms.adminCMS/AlterUserInterests"
	AdminCMS_DeleteUserInterests_FullMethodName            = "/admin_cms.adminCMS/DeleteUserInterests"
	AdminCMS_GetGroupInterests_FullMethodName              = "/admin_cms.adminCMS/GetGroupInterests"
	AdminCMS_AlterGroupInterests_FullMethodName            = "/admin_cms.adminCMS/AlterGroupInterests"
	AdminCMS_GetMePageURL_FullMethodName                   = "/admin_cms.adminCMS/GetMePageURL"
	AdminCMS_SaveMePageURL_FullMethodName                  = "/admin_cms.adminCMS/SaveMePageURL"
	AdminCMS_SwitchMePageURL_FullMethodName                = "/admin_cms.adminCMS/SwitchMePageURL"
	AdminCMS_GetMePageURLs_FullMethodName                  = "/admin_cms.adminCMS/GetMePageURLs"
	AdminCMS_ManagementShortVideo_FullMethodName           = "/admin_cms.adminCMS/ManagementShortVideo"
	AdminCMS_DeleteShortVideo_FullMethodName               = "/admin_cms.adminCMS/DeleteShortVideo"
	AdminCMS_AlterShortVideo_FullMethodName                = "/admin_cms.adminCMS/AlterShortVideo"
	AdminCMS_GetShortVideoLikeList_FullMethodName          = "/admin_cms.adminCMS/GetShortVideoLikeList"
	AdminCMS_DeleteShortVideoLike_FullMethodName           = "/admin_cms.adminCMS/DeleteShortVideoLike"
	AdminCMS_GetShortVideoCommentReplies_FullMethodName    = "/admin_cms.adminCMS/GetShortVideoCommentReplies"
	AdminCMS_AlterReply_FullMethodName                     = "/admin_cms.adminCMS/AlterReply"
	AdminCMS_DeleteReplies_FullMethodName                  = "/admin_cms.adminCMS/DeleteReplies"
	AdminCMS_GetShortVideoCommentLikes_FullMethodName      = "/admin_cms.adminCMS/GetShortVideoCommentLikes"
	AdminCMS_AlterLike_FullMethodName                      = "/admin_cms.adminCMS/AlterLike"
	AdminCMS_DeleteLikes_FullMethodName                    = "/admin_cms.adminCMS/DeleteLikes"
	AdminCMS_GetShortVideoCommentList_FullMethodName       = "/admin_cms.adminCMS/GetShortVideoCommentList"
	AdminCMS_DeleteShortVideoComment_FullMethodName        = "/admin_cms.adminCMS/DeleteShortVideoComment"
	AdminCMS_AlterShortVideoComment_FullMethodName         = "/admin_cms.adminCMS/AlterShortVideoComment"
	AdminCMS_GetShortVideoInterestLabelList_FullMethodName = "/admin_cms.adminCMS/GetShortVideoInterestLabelList"
	AdminCMS_AlterShortVideoInterestLabel_FullMethodName   = "/admin_cms.adminCMS/AlterShortVideoInterestLabel"
	AdminCMS_GetFollowers_FullMethodName                   = "/admin_cms.adminCMS/GetFollowers"
	AdminCMS_AlterFollower_FullMethodName                  = "/admin_cms.adminCMS/AlterFollower"
	AdminCMS_DeleteFollowers_FullMethodName                = "/admin_cms.adminCMS/DeleteFollowers"
	AdminCMS_GetStatus_FullMethodName                      = "/admin_cms.adminCMS/GetStatus"
	AdminCMS_SetStatus_FullMethodName                      = "/admin_cms.adminCMS/SetStatus"
	AdminCMS_GetAllDomains_FullMethodName                  = "/admin_cms.adminCMS/GetAllDomains"
	AdminCMS_SaveAllDomains_FullMethodName                 = "/admin_cms.adminCMS/SaveAllDomains"
)

// AdminCMSClient is the client API for AdminCMS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminCMSClient interface {
	AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error)
	AdminLoginV2(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error)
	GetDiscoverUrl(ctx context.Context, in *GetDiscoverUrlReq, opts ...grpc.CallOption) (*GetDiscoverUrlResp, error)
	SaveDiscoverUrl(ctx context.Context, in *SaveDiscoverUrlReq, opts ...grpc.CallOption) (*SaveDiscoverUrlResp, error)
	SwitchDiscoverStatus(ctx context.Context, in *SwitchDiscoverStatusReq, opts ...grpc.CallOption) (*SwitchDiscoverStatusResp, error)
	GetAppVersionByID(ctx context.Context, in *appversion.GetAppVersionByIDReq, opts ...grpc.CallOption) (*appversion.GetAppVersionByIDResp, error)
	GetLatestAppVersion(ctx context.Context, in *appversion.GetLatestAppVersionReq, opts ...grpc.CallOption) (*appversion.GetLatestAppVersionResp, error)
	GetAppVersions(ctx context.Context, in *appversion.GetAppVersionsReq, opts ...grpc.CallOption) (*appversion.GetAppVersionsResp, error)
	AddAppVersion(ctx context.Context, in *appversion.AddAppVersionReq, opts ...grpc.CallOption) (*appversion.CommonResp, error)
	EditAppVersion(ctx context.Context, in *appversion.EditAppVersionReq, opts ...grpc.CallOption) (*appversion.CommonResp, error)
	DeleteAppVersion(ctx context.Context, in *appversion.DeleteAppVersionReq, opts ...grpc.CallOption) (*appversion.CommonResp, error)
	GetInviteCodeBaseLink(ctx context.Context, in *GetInviteCodeBaseLinkReq, opts ...grpc.CallOption) (*GetInviteCodeBaseLinkResp, error)
	SetInviteCodeBaseLink(ctx context.Context, in *SetInviteCodeBaseLinkReq, opts ...grpc.CallOption) (*GetInviteCodeBaseLinkResp, error)
	CheckInviteCode(ctx context.Context, in *CheckInviteCodeRequest, opts ...grpc.CallOption) (*CheckInviteCodeResponse, error)
	// Channel Code
	GetChannelCodeList(ctx context.Context, in *GetChannelCodeListRequest, opts ...grpc.CallOption) (*GetChannelCodeListResponse, error)
	SwitchChannelCodeState(ctx context.Context, in *SwitchChannelCodeStateRequest, opts ...grpc.CallOption) (*SwitchChannelCodeStateResponse, error)
	EditChannelCode(ctx context.Context, in *EditChannelCodeRequest, opts ...grpc.CallOption) (*EditChannelCodeResponse, error)
	AddChannelCode(ctx context.Context, in *AddChannelCodeRequest, opts ...grpc.CallOption) (*AddChannelCodeResponse, error)
	MultiDeleteChannelCode(ctx context.Context, in *MultiDeleteChannelCodeRequest, opts ...grpc.CallOption) (*MultiDeleteChannelCodeResponse, error)
	SetChannelCodeLimit(ctx context.Context, in *SetChannelCodeLimitRequest, opts ...grpc.CallOption) (*SetChannelCodeLimitResponse, error)
	SetChannelCodeSwitch(ctx context.Context, in *SetChannelCodeSwitchRequest, opts ...grpc.CallOption) (*SetChannelCodeSwitchResponse, error)
	// Invite Code
	SetInviteCodeSwitch(ctx context.Context, in *SetInviteCodeSwitchRequest, opts ...grpc.CallOption) (*SetInviteCodeSwitchResponse, error)
	SetInviteCodeLimit(ctx context.Context, in *SetInviteCodeLimitRequest, opts ...grpc.CallOption) (*SetInviteCodeLimitResponse, error)
	MultiDeleteInviteCode(ctx context.Context, in *MultiDeleteInviteCodeRequest, opts ...grpc.CallOption) (*MultiDeleteInviteCodeResponse, error)
	AddInviteCode(ctx context.Context, in *AddInviteCodeRequest, opts ...grpc.CallOption) (*AddInviteCodeResponse, error)
	GetInviteCodeList(ctx context.Context, in *GetInviteCodeListRequest, opts ...grpc.CallOption) (*GetInviteCodeListResponse, error)
	AddAdminUser(ctx context.Context, in *AddAdminUserReq, opts ...grpc.CallOption) (*AddAdminUserResp, error)
	DeleteAdminUser(ctx context.Context, in *DeleteAdminUserReq, opts ...grpc.CallOption) (*DeleteAdminUserResp, error)
	AlterAdminUser(ctx context.Context, in *AlterAdminUserRequest, opts ...grpc.CallOption) (*AlterAdminUserResp, error)
	GetAdminUsers(ctx context.Context, in *GetAdminUsersReq, opts ...grpc.CallOption) (*GetAdminUsersResp, error)
	SwitchAdminUserStatus(ctx context.Context, in *SwitchAdminUserStatusReq, opts ...grpc.CallOption) (*SwitchAdminUserStatusResp, error)
	ChangeAdminUserPassword(ctx context.Context, in *ChangeAdminUserPasswordReq, opts ...grpc.CallOption) (*ChangeAdminUserPasswordResp, error)
	GetgAuthQrCode(ctx context.Context, in *GetgAuthQrCodeReq, opts ...grpc.CallOption) (*GetgAuthQrCodeResp, error)
	AlterGAuthStatus(ctx context.Context, in *AlterGAuthStatusReq, opts ...grpc.CallOption) (*AlterGAuthStatusResp, error)
	GetAdminPermissionReq(ctx context.Context, in *AdminPermissionsReq, opts ...grpc.CallOption) (*AdminPermissionsResp, error)
	AddAdminRole(ctx context.Context, in *AddAdminRoleRequest, opts ...grpc.CallOption) (*AddAdminRoleResponse, error)
	AlterAdminRole(ctx context.Context, in *AlterAdminRoleRequest, opts ...grpc.CallOption) (*AlterAdminRoleResponse, error)
	DeleteAdminRole(ctx context.Context, in *AlterAdminRoleRequest, opts ...grpc.CallOption) (*AlterAdminRoleResponse, error)
	GetAllAdminRoles(ctx context.Context, in *GetAllAdminRolesReq, opts ...grpc.CallOption) (*GetAllAdminRolesResp, error)
	SearchAminRoles(ctx context.Context, in *SearchAminRolesRequest, opts ...grpc.CallOption) (*GetAllAdminRolesResp, error)
	AddApiAdminRole(ctx context.Context, in *AddApiAdminRoleRequest, opts ...grpc.CallOption) (*AddApiAdminRoleResponse, error)
	AlterApiAdminRole(ctx context.Context, in *AlterApiAdminRoleRequest, opts ...grpc.CallOption) (*AlterApiAdminRoleResponse, error)
	DeleteApiAdminRole(ctx context.Context, in *AlterApiAdminRoleRequest, opts ...grpc.CallOption) (*AlterApiAdminRoleResponse, error)
	GetAllApiAdminRoles(ctx context.Context, in *GetAllApiAdminRolesReq, opts ...grpc.CallOption) (*GetAllApiAdminRolesResp, error)
	SearchApiAdminRoles(ctx context.Context, in *SearchApiAdminRoleRequest, opts ...grpc.CallOption) (*GetAllApiAdminRolesResp, error)
	AddPageAdminRole(ctx context.Context, in *AddPageAdminRoleRequest, opts ...grpc.CallOption) (*AddPageAdminRoleResponse, error)
	AlterPageAdminRole(ctx context.Context, in *AlterPageAdminRoleRequest, opts ...grpc.CallOption) (*AlterPageAdminRoleResponse, error)
	DeletePageAdminRole(ctx context.Context, in *AlterPageAdminRoleRequest, opts ...grpc.CallOption) (*AlterPageAdminRoleResponse, error)
	GetAllPageAdminRoles(ctx context.Context, in *GetAllPageAdminRolesReq, opts ...grpc.CallOption) (*GetAllPageAdminRolesResp, error)
	SearchPageAdminRoles(ctx context.Context, in *SearchPageAdminRolesRequest, opts ...grpc.CallOption) (*GetAllPageAdminRolesResp, error)
	AddAdminAction(ctx context.Context, in *AddAdminActionRequest, opts ...grpc.CallOption) (*AddAdminActionResponse, error)
	AlterAdminAction(ctx context.Context, in *AlterAdminActionRequest, opts ...grpc.CallOption) (*AlterAdminActionResponse, error)
	DeleteAdminAction(ctx context.Context, in *AlterAdminActionRequest, opts ...grpc.CallOption) (*AlterAdminActionResponse, error)
	GetAllAdminAction(ctx context.Context, in *GetAllAdminActionReq, opts ...grpc.CallOption) (*GetAllAdminActionResp, error)
	SearchAdminUsers(ctx context.Context, in *SearchAdminUsersRequest, opts ...grpc.CallOption) (*GetAdminUsersResp, error)
	OperationLog(ctx context.Context, in *OperationLogRequest, opts ...grpc.CallOption) (*OperationLogRequest, error)
	SearchOperationLogs(ctx context.Context, in *SearchOperationLogsRequest, opts ...grpc.CallOption) (*SearchOperationLogsResponse, error)
	GetInterests(ctx context.Context, in *GetInterestsReq, opts ...grpc.CallOption) (*GetInterestsResp, error)
	DeleteInterests(ctx context.Context, in *DeleteInterestsReq, opts ...grpc.CallOption) (*DeleteInterestsResp, error)
	AlterInterest(ctx context.Context, in *AlterInterestReq, opts ...grpc.CallOption) (*AlterInterestResp, error)
	ChangeInterestStatus(ctx context.Context, in *ChangeInterestStatusReq, opts ...grpc.CallOption) (*ChangeInterestStatusResp, error)
	AddInterests(ctx context.Context, in *AddInterestsReq, opts ...grpc.CallOption) (*AddInterestsResp, error)
	GetUserInterests(ctx context.Context, in *GetUserInterestsReq, opts ...grpc.CallOption) (*GetUserInterestsResp, error)
	AlterUserInterests(ctx context.Context, in *AlterUserInterestsReq, opts ...grpc.CallOption) (*AlterUserInterestsResp, error)
	DeleteUserInterests(ctx context.Context, in *DeleteUserInterestsReq, opts ...grpc.CallOption) (*DeleteUserInterestsResp, error)
	GetGroupInterests(ctx context.Context, in *GetGroupInterestsReq, opts ...grpc.CallOption) (*GetGroupInterestsResp, error)
	AlterGroupInterests(ctx context.Context, in *AlterGroupInterestsReq, opts ...grpc.CallOption) (*AlterGroupInterestsResp, error)
	// me page
	GetMePageURL(ctx context.Context, in *GetMePageURLReq, opts ...grpc.CallOption) (*GetMePageURLResp, error)
	SaveMePageURL(ctx context.Context, in *SaveMePageURLReq, opts ...grpc.CallOption) (*SaveMePageURLResp, error)
	SwitchMePageURL(ctx context.Context, in *SwitchMePageURLReq, opts ...grpc.CallOption) (*SwitchMePageURLResp, error)
	GetMePageURLs(ctx context.Context, in *GetMePageURLsReq, opts ...grpc.CallOption) (*GetMePageURLsResp, error)
	// short video
	ManagementShortVideo(ctx context.Context, in *ManagementShortVideoRequest, opts ...grpc.CallOption) (*ManagementShortVideoResponse, error)
	DeleteShortVideo(ctx context.Context, in *DeleteShortVideoRequest, opts ...grpc.CallOption) (*DeleteShortVideoResponse, error)
	AlterShortVideo(ctx context.Context, in *AlterShortVideoRequest, opts ...grpc.CallOption) (*AlterShortVideoResponse, error)
	// short video like
	GetShortVideoLikeList(ctx context.Context, in *GetShortVideoLikeListRequest, opts ...grpc.CallOption) (*GetShortVideoLikeListResponse, error)
	DeleteShortVideoLike(ctx context.Context, in *DeleteShortVideoLikeRequest, opts ...grpc.CallOption) (*DeleteShortVideoLikeResponse, error)
	GetShortVideoCommentReplies(ctx context.Context, in *GetShortVideoCommentRepliesReq, opts ...grpc.CallOption) (*GetShortVideoCommentRepliesResp, error)
	AlterReply(ctx context.Context, in *AlterReplyReq, opts ...grpc.CallOption) (*AlterReplyResp, error)
	DeleteReplies(ctx context.Context, in *DeleteRepliesReq, opts ...grpc.CallOption) (*DeleteRepliesResp, error)
	GetShortVideoCommentLikes(ctx context.Context, in *GetShortVideoCommentLikesReq, opts ...grpc.CallOption) (*GetShortVideoCommentLikesResp, error)
	AlterLike(ctx context.Context, in *AlterLikeReq, opts ...grpc.CallOption) (*AlterLikeResp, error)
	DeleteLikes(ctx context.Context, in *DeleteLikesReq, opts ...grpc.CallOption) (*DeleteLikesResp, error)
	// short video comment
	GetShortVideoCommentList(ctx context.Context, in *GetShortVideoCommentListRequest, opts ...grpc.CallOption) (*GetShortVideoCommentListResponse, error)
	DeleteShortVideoComment(ctx context.Context, in *DeleteShortVideoCommentRequest, opts ...grpc.CallOption) (*DeleteShortVideoCommentResponse, error)
	AlterShortVideoComment(ctx context.Context, in *AlterShortVideoCommentRequest, opts ...grpc.CallOption) (*AlterShortVideoCommentResponse, error)
	// short video interest label
	GetShortVideoInterestLabelList(ctx context.Context, in *GetShortVideoInterestLabelListRequest, opts ...grpc.CallOption) (*GetShortVideoInterestLabelListResponse, error)
	AlterShortVideoInterestLabel(ctx context.Context, in *AlterShortVideoInterestLabelRequest, opts ...grpc.CallOption) (*AlterShortVideoInterestLabelResponse, error)
	GetFollowers(ctx context.Context, in *GetFollowersReq, opts ...grpc.CallOption) (*GetFollowersResp, error)
	AlterFollower(ctx context.Context, in *AlterFollowerReq, opts ...grpc.CallOption) (*AlterFollowerResp, error)
	DeleteFollowers(ctx context.Context, in *DeleteFollowersReq, opts ...grpc.CallOption) (*DeleteFollowersResp, error)
	GetStatus(ctx context.Context, in *GetStatusReq, opts ...grpc.CallOption) (*GetStatusResp, error)
	SetStatus(ctx context.Context, in *SetStatusReq, opts ...grpc.CallOption) (*SetStatusResp, error)
	GetAllDomains(ctx context.Context, in *GetAllDomainsReq, opts ...grpc.CallOption) (*GetAllDomainsResp, error)
	SaveAllDomains(ctx context.Context, in *SaveAllDomainsReq, opts ...grpc.CallOption) (*SaveAllDomainsResp, error)
}

type adminCMSClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminCMSClient(cc grpc.ClientConnInterface) AdminCMSClient {
	return &adminCMSClient{cc}
}

func (c *adminCMSClient) AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error) {
	out := new(AdminLoginResp)
	err := c.cc.Invoke(ctx, AdminCMS_AdminLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AdminLoginV2(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error) {
	out := new(AdminLoginResp)
	err := c.cc.Invoke(ctx, AdminCMS_AdminLoginV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetDiscoverUrl(ctx context.Context, in *GetDiscoverUrlReq, opts ...grpc.CallOption) (*GetDiscoverUrlResp, error) {
	out := new(GetDiscoverUrlResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetDiscoverUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SaveDiscoverUrl(ctx context.Context, in *SaveDiscoverUrlReq, opts ...grpc.CallOption) (*SaveDiscoverUrlResp, error) {
	out := new(SaveDiscoverUrlResp)
	err := c.cc.Invoke(ctx, AdminCMS_SaveDiscoverUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SwitchDiscoverStatus(ctx context.Context, in *SwitchDiscoverStatusReq, opts ...grpc.CallOption) (*SwitchDiscoverStatusResp, error) {
	out := new(SwitchDiscoverStatusResp)
	err := c.cc.Invoke(ctx, AdminCMS_SwitchDiscoverStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetAppVersionByID(ctx context.Context, in *appversion.GetAppVersionByIDReq, opts ...grpc.CallOption) (*appversion.GetAppVersionByIDResp, error) {
	out := new(appversion.GetAppVersionByIDResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetAppVersionByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetLatestAppVersion(ctx context.Context, in *appversion.GetLatestAppVersionReq, opts ...grpc.CallOption) (*appversion.GetLatestAppVersionResp, error) {
	out := new(appversion.GetLatestAppVersionResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetLatestAppVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetAppVersions(ctx context.Context, in *appversion.GetAppVersionsReq, opts ...grpc.CallOption) (*appversion.GetAppVersionsResp, error) {
	out := new(appversion.GetAppVersionsResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetAppVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AddAppVersion(ctx context.Context, in *appversion.AddAppVersionReq, opts ...grpc.CallOption) (*appversion.CommonResp, error) {
	out := new(appversion.CommonResp)
	err := c.cc.Invoke(ctx, AdminCMS_AddAppVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) EditAppVersion(ctx context.Context, in *appversion.EditAppVersionReq, opts ...grpc.CallOption) (*appversion.CommonResp, error) {
	out := new(appversion.CommonResp)
	err := c.cc.Invoke(ctx, AdminCMS_EditAppVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) DeleteAppVersion(ctx context.Context, in *appversion.DeleteAppVersionReq, opts ...grpc.CallOption) (*appversion.CommonResp, error) {
	out := new(appversion.CommonResp)
	err := c.cc.Invoke(ctx, AdminCMS_DeleteAppVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetInviteCodeBaseLink(ctx context.Context, in *GetInviteCodeBaseLinkReq, opts ...grpc.CallOption) (*GetInviteCodeBaseLinkResp, error) {
	out := new(GetInviteCodeBaseLinkResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetInviteCodeBaseLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SetInviteCodeBaseLink(ctx context.Context, in *SetInviteCodeBaseLinkReq, opts ...grpc.CallOption) (*GetInviteCodeBaseLinkResp, error) {
	out := new(GetInviteCodeBaseLinkResp)
	err := c.cc.Invoke(ctx, AdminCMS_SetInviteCodeBaseLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) CheckInviteCode(ctx context.Context, in *CheckInviteCodeRequest, opts ...grpc.CallOption) (*CheckInviteCodeResponse, error) {
	out := new(CheckInviteCodeResponse)
	err := c.cc.Invoke(ctx, AdminCMS_CheckInviteCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetChannelCodeList(ctx context.Context, in *GetChannelCodeListRequest, opts ...grpc.CallOption) (*GetChannelCodeListResponse, error) {
	out := new(GetChannelCodeListResponse)
	err := c.cc.Invoke(ctx, AdminCMS_GetChannelCodeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SwitchChannelCodeState(ctx context.Context, in *SwitchChannelCodeStateRequest, opts ...grpc.CallOption) (*SwitchChannelCodeStateResponse, error) {
	out := new(SwitchChannelCodeStateResponse)
	err := c.cc.Invoke(ctx, AdminCMS_SwitchChannelCodeState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) EditChannelCode(ctx context.Context, in *EditChannelCodeRequest, opts ...grpc.CallOption) (*EditChannelCodeResponse, error) {
	out := new(EditChannelCodeResponse)
	err := c.cc.Invoke(ctx, AdminCMS_EditChannelCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AddChannelCode(ctx context.Context, in *AddChannelCodeRequest, opts ...grpc.CallOption) (*AddChannelCodeResponse, error) {
	out := new(AddChannelCodeResponse)
	err := c.cc.Invoke(ctx, AdminCMS_AddChannelCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) MultiDeleteChannelCode(ctx context.Context, in *MultiDeleteChannelCodeRequest, opts ...grpc.CallOption) (*MultiDeleteChannelCodeResponse, error) {
	out := new(MultiDeleteChannelCodeResponse)
	err := c.cc.Invoke(ctx, AdminCMS_MultiDeleteChannelCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SetChannelCodeLimit(ctx context.Context, in *SetChannelCodeLimitRequest, opts ...grpc.CallOption) (*SetChannelCodeLimitResponse, error) {
	out := new(SetChannelCodeLimitResponse)
	err := c.cc.Invoke(ctx, AdminCMS_SetChannelCodeLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SetChannelCodeSwitch(ctx context.Context, in *SetChannelCodeSwitchRequest, opts ...grpc.CallOption) (*SetChannelCodeSwitchResponse, error) {
	out := new(SetChannelCodeSwitchResponse)
	err := c.cc.Invoke(ctx, AdminCMS_SetChannelCodeSwitch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SetInviteCodeSwitch(ctx context.Context, in *SetInviteCodeSwitchRequest, opts ...grpc.CallOption) (*SetInviteCodeSwitchResponse, error) {
	out := new(SetInviteCodeSwitchResponse)
	err := c.cc.Invoke(ctx, AdminCMS_SetInviteCodeSwitch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SetInviteCodeLimit(ctx context.Context, in *SetInviteCodeLimitRequest, opts ...grpc.CallOption) (*SetInviteCodeLimitResponse, error) {
	out := new(SetInviteCodeLimitResponse)
	err := c.cc.Invoke(ctx, AdminCMS_SetInviteCodeLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) MultiDeleteInviteCode(ctx context.Context, in *MultiDeleteInviteCodeRequest, opts ...grpc.CallOption) (*MultiDeleteInviteCodeResponse, error) {
	out := new(MultiDeleteInviteCodeResponse)
	err := c.cc.Invoke(ctx, AdminCMS_MultiDeleteInviteCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AddInviteCode(ctx context.Context, in *AddInviteCodeRequest, opts ...grpc.CallOption) (*AddInviteCodeResponse, error) {
	out := new(AddInviteCodeResponse)
	err := c.cc.Invoke(ctx, AdminCMS_AddInviteCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetInviteCodeList(ctx context.Context, in *GetInviteCodeListRequest, opts ...grpc.CallOption) (*GetInviteCodeListResponse, error) {
	out := new(GetInviteCodeListResponse)
	err := c.cc.Invoke(ctx, AdminCMS_GetInviteCodeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AddAdminUser(ctx context.Context, in *AddAdminUserReq, opts ...grpc.CallOption) (*AddAdminUserResp, error) {
	out := new(AddAdminUserResp)
	err := c.cc.Invoke(ctx, AdminCMS_AddAdminUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) DeleteAdminUser(ctx context.Context, in *DeleteAdminUserReq, opts ...grpc.CallOption) (*DeleteAdminUserResp, error) {
	out := new(DeleteAdminUserResp)
	err := c.cc.Invoke(ctx, AdminCMS_DeleteAdminUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterAdminUser(ctx context.Context, in *AlterAdminUserRequest, opts ...grpc.CallOption) (*AlterAdminUserResp, error) {
	out := new(AlterAdminUserResp)
	err := c.cc.Invoke(ctx, AdminCMS_AlterAdminUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetAdminUsers(ctx context.Context, in *GetAdminUsersReq, opts ...grpc.CallOption) (*GetAdminUsersResp, error) {
	out := new(GetAdminUsersResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetAdminUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SwitchAdminUserStatus(ctx context.Context, in *SwitchAdminUserStatusReq, opts ...grpc.CallOption) (*SwitchAdminUserStatusResp, error) {
	out := new(SwitchAdminUserStatusResp)
	err := c.cc.Invoke(ctx, AdminCMS_SwitchAdminUserStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) ChangeAdminUserPassword(ctx context.Context, in *ChangeAdminUserPasswordReq, opts ...grpc.CallOption) (*ChangeAdminUserPasswordResp, error) {
	out := new(ChangeAdminUserPasswordResp)
	err := c.cc.Invoke(ctx, AdminCMS_ChangeAdminUserPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetgAuthQrCode(ctx context.Context, in *GetgAuthQrCodeReq, opts ...grpc.CallOption) (*GetgAuthQrCodeResp, error) {
	out := new(GetgAuthQrCodeResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetgAuthQrCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterGAuthStatus(ctx context.Context, in *AlterGAuthStatusReq, opts ...grpc.CallOption) (*AlterGAuthStatusResp, error) {
	out := new(AlterGAuthStatusResp)
	err := c.cc.Invoke(ctx, AdminCMS_AlterGAuthStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetAdminPermissionReq(ctx context.Context, in *AdminPermissionsReq, opts ...grpc.CallOption) (*AdminPermissionsResp, error) {
	out := new(AdminPermissionsResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetAdminPermissionReq_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AddAdminRole(ctx context.Context, in *AddAdminRoleRequest, opts ...grpc.CallOption) (*AddAdminRoleResponse, error) {
	out := new(AddAdminRoleResponse)
	err := c.cc.Invoke(ctx, AdminCMS_AddAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterAdminRole(ctx context.Context, in *AlterAdminRoleRequest, opts ...grpc.CallOption) (*AlterAdminRoleResponse, error) {
	out := new(AlterAdminRoleResponse)
	err := c.cc.Invoke(ctx, AdminCMS_AlterAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) DeleteAdminRole(ctx context.Context, in *AlterAdminRoleRequest, opts ...grpc.CallOption) (*AlterAdminRoleResponse, error) {
	out := new(AlterAdminRoleResponse)
	err := c.cc.Invoke(ctx, AdminCMS_DeleteAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetAllAdminRoles(ctx context.Context, in *GetAllAdminRolesReq, opts ...grpc.CallOption) (*GetAllAdminRolesResp, error) {
	out := new(GetAllAdminRolesResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetAllAdminRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SearchAminRoles(ctx context.Context, in *SearchAminRolesRequest, opts ...grpc.CallOption) (*GetAllAdminRolesResp, error) {
	out := new(GetAllAdminRolesResp)
	err := c.cc.Invoke(ctx, AdminCMS_SearchAminRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AddApiAdminRole(ctx context.Context, in *AddApiAdminRoleRequest, opts ...grpc.CallOption) (*AddApiAdminRoleResponse, error) {
	out := new(AddApiAdminRoleResponse)
	err := c.cc.Invoke(ctx, AdminCMS_AddApiAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterApiAdminRole(ctx context.Context, in *AlterApiAdminRoleRequest, opts ...grpc.CallOption) (*AlterApiAdminRoleResponse, error) {
	out := new(AlterApiAdminRoleResponse)
	err := c.cc.Invoke(ctx, AdminCMS_AlterApiAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) DeleteApiAdminRole(ctx context.Context, in *AlterApiAdminRoleRequest, opts ...grpc.CallOption) (*AlterApiAdminRoleResponse, error) {
	out := new(AlterApiAdminRoleResponse)
	err := c.cc.Invoke(ctx, AdminCMS_DeleteApiAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetAllApiAdminRoles(ctx context.Context, in *GetAllApiAdminRolesReq, opts ...grpc.CallOption) (*GetAllApiAdminRolesResp, error) {
	out := new(GetAllApiAdminRolesResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetAllApiAdminRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SearchApiAdminRoles(ctx context.Context, in *SearchApiAdminRoleRequest, opts ...grpc.CallOption) (*GetAllApiAdminRolesResp, error) {
	out := new(GetAllApiAdminRolesResp)
	err := c.cc.Invoke(ctx, AdminCMS_SearchApiAdminRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AddPageAdminRole(ctx context.Context, in *AddPageAdminRoleRequest, opts ...grpc.CallOption) (*AddPageAdminRoleResponse, error) {
	out := new(AddPageAdminRoleResponse)
	err := c.cc.Invoke(ctx, AdminCMS_AddPageAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterPageAdminRole(ctx context.Context, in *AlterPageAdminRoleRequest, opts ...grpc.CallOption) (*AlterPageAdminRoleResponse, error) {
	out := new(AlterPageAdminRoleResponse)
	err := c.cc.Invoke(ctx, AdminCMS_AlterPageAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) DeletePageAdminRole(ctx context.Context, in *AlterPageAdminRoleRequest, opts ...grpc.CallOption) (*AlterPageAdminRoleResponse, error) {
	out := new(AlterPageAdminRoleResponse)
	err := c.cc.Invoke(ctx, AdminCMS_DeletePageAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetAllPageAdminRoles(ctx context.Context, in *GetAllPageAdminRolesReq, opts ...grpc.CallOption) (*GetAllPageAdminRolesResp, error) {
	out := new(GetAllPageAdminRolesResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetAllPageAdminRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SearchPageAdminRoles(ctx context.Context, in *SearchPageAdminRolesRequest, opts ...grpc.CallOption) (*GetAllPageAdminRolesResp, error) {
	out := new(GetAllPageAdminRolesResp)
	err := c.cc.Invoke(ctx, AdminCMS_SearchPageAdminRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AddAdminAction(ctx context.Context, in *AddAdminActionRequest, opts ...grpc.CallOption) (*AddAdminActionResponse, error) {
	out := new(AddAdminActionResponse)
	err := c.cc.Invoke(ctx, AdminCMS_AddAdminAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterAdminAction(ctx context.Context, in *AlterAdminActionRequest, opts ...grpc.CallOption) (*AlterAdminActionResponse, error) {
	out := new(AlterAdminActionResponse)
	err := c.cc.Invoke(ctx, AdminCMS_AlterAdminAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) DeleteAdminAction(ctx context.Context, in *AlterAdminActionRequest, opts ...grpc.CallOption) (*AlterAdminActionResponse, error) {
	out := new(AlterAdminActionResponse)
	err := c.cc.Invoke(ctx, AdminCMS_DeleteAdminAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetAllAdminAction(ctx context.Context, in *GetAllAdminActionReq, opts ...grpc.CallOption) (*GetAllAdminActionResp, error) {
	out := new(GetAllAdminActionResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetAllAdminAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SearchAdminUsers(ctx context.Context, in *SearchAdminUsersRequest, opts ...grpc.CallOption) (*GetAdminUsersResp, error) {
	out := new(GetAdminUsersResp)
	err := c.cc.Invoke(ctx, AdminCMS_SearchAdminUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) OperationLog(ctx context.Context, in *OperationLogRequest, opts ...grpc.CallOption) (*OperationLogRequest, error) {
	out := new(OperationLogRequest)
	err := c.cc.Invoke(ctx, AdminCMS_OperationLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SearchOperationLogs(ctx context.Context, in *SearchOperationLogsRequest, opts ...grpc.CallOption) (*SearchOperationLogsResponse, error) {
	out := new(SearchOperationLogsResponse)
	err := c.cc.Invoke(ctx, AdminCMS_SearchOperationLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetInterests(ctx context.Context, in *GetInterestsReq, opts ...grpc.CallOption) (*GetInterestsResp, error) {
	out := new(GetInterestsResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetInterests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) DeleteInterests(ctx context.Context, in *DeleteInterestsReq, opts ...grpc.CallOption) (*DeleteInterestsResp, error) {
	out := new(DeleteInterestsResp)
	err := c.cc.Invoke(ctx, AdminCMS_DeleteInterests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterInterest(ctx context.Context, in *AlterInterestReq, opts ...grpc.CallOption) (*AlterInterestResp, error) {
	out := new(AlterInterestResp)
	err := c.cc.Invoke(ctx, AdminCMS_AlterInterest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) ChangeInterestStatus(ctx context.Context, in *ChangeInterestStatusReq, opts ...grpc.CallOption) (*ChangeInterestStatusResp, error) {
	out := new(ChangeInterestStatusResp)
	err := c.cc.Invoke(ctx, AdminCMS_ChangeInterestStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AddInterests(ctx context.Context, in *AddInterestsReq, opts ...grpc.CallOption) (*AddInterestsResp, error) {
	out := new(AddInterestsResp)
	err := c.cc.Invoke(ctx, AdminCMS_AddInterests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetUserInterests(ctx context.Context, in *GetUserInterestsReq, opts ...grpc.CallOption) (*GetUserInterestsResp, error) {
	out := new(GetUserInterestsResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetUserInterests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterUserInterests(ctx context.Context, in *AlterUserInterestsReq, opts ...grpc.CallOption) (*AlterUserInterestsResp, error) {
	out := new(AlterUserInterestsResp)
	err := c.cc.Invoke(ctx, AdminCMS_AlterUserInterests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) DeleteUserInterests(ctx context.Context, in *DeleteUserInterestsReq, opts ...grpc.CallOption) (*DeleteUserInterestsResp, error) {
	out := new(DeleteUserInterestsResp)
	err := c.cc.Invoke(ctx, AdminCMS_DeleteUserInterests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetGroupInterests(ctx context.Context, in *GetGroupInterestsReq, opts ...grpc.CallOption) (*GetGroupInterestsResp, error) {
	out := new(GetGroupInterestsResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetGroupInterests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterGroupInterests(ctx context.Context, in *AlterGroupInterestsReq, opts ...grpc.CallOption) (*AlterGroupInterestsResp, error) {
	out := new(AlterGroupInterestsResp)
	err := c.cc.Invoke(ctx, AdminCMS_AlterGroupInterests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetMePageURL(ctx context.Context, in *GetMePageURLReq, opts ...grpc.CallOption) (*GetMePageURLResp, error) {
	out := new(GetMePageURLResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetMePageURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SaveMePageURL(ctx context.Context, in *SaveMePageURLReq, opts ...grpc.CallOption) (*SaveMePageURLResp, error) {
	out := new(SaveMePageURLResp)
	err := c.cc.Invoke(ctx, AdminCMS_SaveMePageURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SwitchMePageURL(ctx context.Context, in *SwitchMePageURLReq, opts ...grpc.CallOption) (*SwitchMePageURLResp, error) {
	out := new(SwitchMePageURLResp)
	err := c.cc.Invoke(ctx, AdminCMS_SwitchMePageURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetMePageURLs(ctx context.Context, in *GetMePageURLsReq, opts ...grpc.CallOption) (*GetMePageURLsResp, error) {
	out := new(GetMePageURLsResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetMePageURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) ManagementShortVideo(ctx context.Context, in *ManagementShortVideoRequest, opts ...grpc.CallOption) (*ManagementShortVideoResponse, error) {
	out := new(ManagementShortVideoResponse)
	err := c.cc.Invoke(ctx, AdminCMS_ManagementShortVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) DeleteShortVideo(ctx context.Context, in *DeleteShortVideoRequest, opts ...grpc.CallOption) (*DeleteShortVideoResponse, error) {
	out := new(DeleteShortVideoResponse)
	err := c.cc.Invoke(ctx, AdminCMS_DeleteShortVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterShortVideo(ctx context.Context, in *AlterShortVideoRequest, opts ...grpc.CallOption) (*AlterShortVideoResponse, error) {
	out := new(AlterShortVideoResponse)
	err := c.cc.Invoke(ctx, AdminCMS_AlterShortVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetShortVideoLikeList(ctx context.Context, in *GetShortVideoLikeListRequest, opts ...grpc.CallOption) (*GetShortVideoLikeListResponse, error) {
	out := new(GetShortVideoLikeListResponse)
	err := c.cc.Invoke(ctx, AdminCMS_GetShortVideoLikeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) DeleteShortVideoLike(ctx context.Context, in *DeleteShortVideoLikeRequest, opts ...grpc.CallOption) (*DeleteShortVideoLikeResponse, error) {
	out := new(DeleteShortVideoLikeResponse)
	err := c.cc.Invoke(ctx, AdminCMS_DeleteShortVideoLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetShortVideoCommentReplies(ctx context.Context, in *GetShortVideoCommentRepliesReq, opts ...grpc.CallOption) (*GetShortVideoCommentRepliesResp, error) {
	out := new(GetShortVideoCommentRepliesResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetShortVideoCommentReplies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterReply(ctx context.Context, in *AlterReplyReq, opts ...grpc.CallOption) (*AlterReplyResp, error) {
	out := new(AlterReplyResp)
	err := c.cc.Invoke(ctx, AdminCMS_AlterReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) DeleteReplies(ctx context.Context, in *DeleteRepliesReq, opts ...grpc.CallOption) (*DeleteRepliesResp, error) {
	out := new(DeleteRepliesResp)
	err := c.cc.Invoke(ctx, AdminCMS_DeleteReplies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetShortVideoCommentLikes(ctx context.Context, in *GetShortVideoCommentLikesReq, opts ...grpc.CallOption) (*GetShortVideoCommentLikesResp, error) {
	out := new(GetShortVideoCommentLikesResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetShortVideoCommentLikes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterLike(ctx context.Context, in *AlterLikeReq, opts ...grpc.CallOption) (*AlterLikeResp, error) {
	out := new(AlterLikeResp)
	err := c.cc.Invoke(ctx, AdminCMS_AlterLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) DeleteLikes(ctx context.Context, in *DeleteLikesReq, opts ...grpc.CallOption) (*DeleteLikesResp, error) {
	out := new(DeleteLikesResp)
	err := c.cc.Invoke(ctx, AdminCMS_DeleteLikes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetShortVideoCommentList(ctx context.Context, in *GetShortVideoCommentListRequest, opts ...grpc.CallOption) (*GetShortVideoCommentListResponse, error) {
	out := new(GetShortVideoCommentListResponse)
	err := c.cc.Invoke(ctx, AdminCMS_GetShortVideoCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) DeleteShortVideoComment(ctx context.Context, in *DeleteShortVideoCommentRequest, opts ...grpc.CallOption) (*DeleteShortVideoCommentResponse, error) {
	out := new(DeleteShortVideoCommentResponse)
	err := c.cc.Invoke(ctx, AdminCMS_DeleteShortVideoComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterShortVideoComment(ctx context.Context, in *AlterShortVideoCommentRequest, opts ...grpc.CallOption) (*AlterShortVideoCommentResponse, error) {
	out := new(AlterShortVideoCommentResponse)
	err := c.cc.Invoke(ctx, AdminCMS_AlterShortVideoComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetShortVideoInterestLabelList(ctx context.Context, in *GetShortVideoInterestLabelListRequest, opts ...grpc.CallOption) (*GetShortVideoInterestLabelListResponse, error) {
	out := new(GetShortVideoInterestLabelListResponse)
	err := c.cc.Invoke(ctx, AdminCMS_GetShortVideoInterestLabelList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterShortVideoInterestLabel(ctx context.Context, in *AlterShortVideoInterestLabelRequest, opts ...grpc.CallOption) (*AlterShortVideoInterestLabelResponse, error) {
	out := new(AlterShortVideoInterestLabelResponse)
	err := c.cc.Invoke(ctx, AdminCMS_AlterShortVideoInterestLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetFollowers(ctx context.Context, in *GetFollowersReq, opts ...grpc.CallOption) (*GetFollowersResp, error) {
	out := new(GetFollowersResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetFollowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) AlterFollower(ctx context.Context, in *AlterFollowerReq, opts ...grpc.CallOption) (*AlterFollowerResp, error) {
	out := new(AlterFollowerResp)
	err := c.cc.Invoke(ctx, AdminCMS_AlterFollower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) DeleteFollowers(ctx context.Context, in *DeleteFollowersReq, opts ...grpc.CallOption) (*DeleteFollowersResp, error) {
	out := new(DeleteFollowersResp)
	err := c.cc.Invoke(ctx, AdminCMS_DeleteFollowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetStatus(ctx context.Context, in *GetStatusReq, opts ...grpc.CallOption) (*GetStatusResp, error) {
	out := new(GetStatusResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SetStatus(ctx context.Context, in *SetStatusReq, opts ...grpc.CallOption) (*SetStatusResp, error) {
	out := new(SetStatusResp)
	err := c.cc.Invoke(ctx, AdminCMS_SetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) GetAllDomains(ctx context.Context, in *GetAllDomainsReq, opts ...grpc.CallOption) (*GetAllDomainsResp, error) {
	out := new(GetAllDomainsResp)
	err := c.cc.Invoke(ctx, AdminCMS_GetAllDomains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminCMSClient) SaveAllDomains(ctx context.Context, in *SaveAllDomainsReq, opts ...grpc.CallOption) (*SaveAllDomainsResp, error) {
	out := new(SaveAllDomainsResp)
	err := c.cc.Invoke(ctx, AdminCMS_SaveAllDomains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminCMSServer is the server API for AdminCMS service.
// All implementations should embed UnimplementedAdminCMSServer
// for forward compatibility
type AdminCMSServer interface {
	AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginResp, error)
	AdminLoginV2(context.Context, *AdminLoginReq) (*AdminLoginResp, error)
	GetDiscoverUrl(context.Context, *GetDiscoverUrlReq) (*GetDiscoverUrlResp, error)
	SaveDiscoverUrl(context.Context, *SaveDiscoverUrlReq) (*SaveDiscoverUrlResp, error)
	SwitchDiscoverStatus(context.Context, *SwitchDiscoverStatusReq) (*SwitchDiscoverStatusResp, error)
	GetAppVersionByID(context.Context, *appversion.GetAppVersionByIDReq) (*appversion.GetAppVersionByIDResp, error)
	GetLatestAppVersion(context.Context, *appversion.GetLatestAppVersionReq) (*appversion.GetLatestAppVersionResp, error)
	GetAppVersions(context.Context, *appversion.GetAppVersionsReq) (*appversion.GetAppVersionsResp, error)
	AddAppVersion(context.Context, *appversion.AddAppVersionReq) (*appversion.CommonResp, error)
	EditAppVersion(context.Context, *appversion.EditAppVersionReq) (*appversion.CommonResp, error)
	DeleteAppVersion(context.Context, *appversion.DeleteAppVersionReq) (*appversion.CommonResp, error)
	GetInviteCodeBaseLink(context.Context, *GetInviteCodeBaseLinkReq) (*GetInviteCodeBaseLinkResp, error)
	SetInviteCodeBaseLink(context.Context, *SetInviteCodeBaseLinkReq) (*GetInviteCodeBaseLinkResp, error)
	CheckInviteCode(context.Context, *CheckInviteCodeRequest) (*CheckInviteCodeResponse, error)
	// Channel Code
	GetChannelCodeList(context.Context, *GetChannelCodeListRequest) (*GetChannelCodeListResponse, error)
	SwitchChannelCodeState(context.Context, *SwitchChannelCodeStateRequest) (*SwitchChannelCodeStateResponse, error)
	EditChannelCode(context.Context, *EditChannelCodeRequest) (*EditChannelCodeResponse, error)
	AddChannelCode(context.Context, *AddChannelCodeRequest) (*AddChannelCodeResponse, error)
	MultiDeleteChannelCode(context.Context, *MultiDeleteChannelCodeRequest) (*MultiDeleteChannelCodeResponse, error)
	SetChannelCodeLimit(context.Context, *SetChannelCodeLimitRequest) (*SetChannelCodeLimitResponse, error)
	SetChannelCodeSwitch(context.Context, *SetChannelCodeSwitchRequest) (*SetChannelCodeSwitchResponse, error)
	// Invite Code
	SetInviteCodeSwitch(context.Context, *SetInviteCodeSwitchRequest) (*SetInviteCodeSwitchResponse, error)
	SetInviteCodeLimit(context.Context, *SetInviteCodeLimitRequest) (*SetInviteCodeLimitResponse, error)
	MultiDeleteInviteCode(context.Context, *MultiDeleteInviteCodeRequest) (*MultiDeleteInviteCodeResponse, error)
	AddInviteCode(context.Context, *AddInviteCodeRequest) (*AddInviteCodeResponse, error)
	GetInviteCodeList(context.Context, *GetInviteCodeListRequest) (*GetInviteCodeListResponse, error)
	AddAdminUser(context.Context, *AddAdminUserReq) (*AddAdminUserResp, error)
	DeleteAdminUser(context.Context, *DeleteAdminUserReq) (*DeleteAdminUserResp, error)
	AlterAdminUser(context.Context, *AlterAdminUserRequest) (*AlterAdminUserResp, error)
	GetAdminUsers(context.Context, *GetAdminUsersReq) (*GetAdminUsersResp, error)
	SwitchAdminUserStatus(context.Context, *SwitchAdminUserStatusReq) (*SwitchAdminUserStatusResp, error)
	ChangeAdminUserPassword(context.Context, *ChangeAdminUserPasswordReq) (*ChangeAdminUserPasswordResp, error)
	GetgAuthQrCode(context.Context, *GetgAuthQrCodeReq) (*GetgAuthQrCodeResp, error)
	AlterGAuthStatus(context.Context, *AlterGAuthStatusReq) (*AlterGAuthStatusResp, error)
	GetAdminPermissionReq(context.Context, *AdminPermissionsReq) (*AdminPermissionsResp, error)
	AddAdminRole(context.Context, *AddAdminRoleRequest) (*AddAdminRoleResponse, error)
	AlterAdminRole(context.Context, *AlterAdminRoleRequest) (*AlterAdminRoleResponse, error)
	DeleteAdminRole(context.Context, *AlterAdminRoleRequest) (*AlterAdminRoleResponse, error)
	GetAllAdminRoles(context.Context, *GetAllAdminRolesReq) (*GetAllAdminRolesResp, error)
	SearchAminRoles(context.Context, *SearchAminRolesRequest) (*GetAllAdminRolesResp, error)
	AddApiAdminRole(context.Context, *AddApiAdminRoleRequest) (*AddApiAdminRoleResponse, error)
	AlterApiAdminRole(context.Context, *AlterApiAdminRoleRequest) (*AlterApiAdminRoleResponse, error)
	DeleteApiAdminRole(context.Context, *AlterApiAdminRoleRequest) (*AlterApiAdminRoleResponse, error)
	GetAllApiAdminRoles(context.Context, *GetAllApiAdminRolesReq) (*GetAllApiAdminRolesResp, error)
	SearchApiAdminRoles(context.Context, *SearchApiAdminRoleRequest) (*GetAllApiAdminRolesResp, error)
	AddPageAdminRole(context.Context, *AddPageAdminRoleRequest) (*AddPageAdminRoleResponse, error)
	AlterPageAdminRole(context.Context, *AlterPageAdminRoleRequest) (*AlterPageAdminRoleResponse, error)
	DeletePageAdminRole(context.Context, *AlterPageAdminRoleRequest) (*AlterPageAdminRoleResponse, error)
	GetAllPageAdminRoles(context.Context, *GetAllPageAdminRolesReq) (*GetAllPageAdminRolesResp, error)
	SearchPageAdminRoles(context.Context, *SearchPageAdminRolesRequest) (*GetAllPageAdminRolesResp, error)
	AddAdminAction(context.Context, *AddAdminActionRequest) (*AddAdminActionResponse, error)
	AlterAdminAction(context.Context, *AlterAdminActionRequest) (*AlterAdminActionResponse, error)
	DeleteAdminAction(context.Context, *AlterAdminActionRequest) (*AlterAdminActionResponse, error)
	GetAllAdminAction(context.Context, *GetAllAdminActionReq) (*GetAllAdminActionResp, error)
	SearchAdminUsers(context.Context, *SearchAdminUsersRequest) (*GetAdminUsersResp, error)
	OperationLog(context.Context, *OperationLogRequest) (*OperationLogRequest, error)
	SearchOperationLogs(context.Context, *SearchOperationLogsRequest) (*SearchOperationLogsResponse, error)
	GetInterests(context.Context, *GetInterestsReq) (*GetInterestsResp, error)
	DeleteInterests(context.Context, *DeleteInterestsReq) (*DeleteInterestsResp, error)
	AlterInterest(context.Context, *AlterInterestReq) (*AlterInterestResp, error)
	ChangeInterestStatus(context.Context, *ChangeInterestStatusReq) (*ChangeInterestStatusResp, error)
	AddInterests(context.Context, *AddInterestsReq) (*AddInterestsResp, error)
	GetUserInterests(context.Context, *GetUserInterestsReq) (*GetUserInterestsResp, error)
	AlterUserInterests(context.Context, *AlterUserInterestsReq) (*AlterUserInterestsResp, error)
	DeleteUserInterests(context.Context, *DeleteUserInterestsReq) (*DeleteUserInterestsResp, error)
	GetGroupInterests(context.Context, *GetGroupInterestsReq) (*GetGroupInterestsResp, error)
	AlterGroupInterests(context.Context, *AlterGroupInterestsReq) (*AlterGroupInterestsResp, error)
	// me page
	GetMePageURL(context.Context, *GetMePageURLReq) (*GetMePageURLResp, error)
	SaveMePageURL(context.Context, *SaveMePageURLReq) (*SaveMePageURLResp, error)
	SwitchMePageURL(context.Context, *SwitchMePageURLReq) (*SwitchMePageURLResp, error)
	GetMePageURLs(context.Context, *GetMePageURLsReq) (*GetMePageURLsResp, error)
	// short video
	ManagementShortVideo(context.Context, *ManagementShortVideoRequest) (*ManagementShortVideoResponse, error)
	DeleteShortVideo(context.Context, *DeleteShortVideoRequest) (*DeleteShortVideoResponse, error)
	AlterShortVideo(context.Context, *AlterShortVideoRequest) (*AlterShortVideoResponse, error)
	// short video like
	GetShortVideoLikeList(context.Context, *GetShortVideoLikeListRequest) (*GetShortVideoLikeListResponse, error)
	DeleteShortVideoLike(context.Context, *DeleteShortVideoLikeRequest) (*DeleteShortVideoLikeResponse, error)
	GetShortVideoCommentReplies(context.Context, *GetShortVideoCommentRepliesReq) (*GetShortVideoCommentRepliesResp, error)
	AlterReply(context.Context, *AlterReplyReq) (*AlterReplyResp, error)
	DeleteReplies(context.Context, *DeleteRepliesReq) (*DeleteRepliesResp, error)
	GetShortVideoCommentLikes(context.Context, *GetShortVideoCommentLikesReq) (*GetShortVideoCommentLikesResp, error)
	AlterLike(context.Context, *AlterLikeReq) (*AlterLikeResp, error)
	DeleteLikes(context.Context, *DeleteLikesReq) (*DeleteLikesResp, error)
	// short video comment
	GetShortVideoCommentList(context.Context, *GetShortVideoCommentListRequest) (*GetShortVideoCommentListResponse, error)
	DeleteShortVideoComment(context.Context, *DeleteShortVideoCommentRequest) (*DeleteShortVideoCommentResponse, error)
	AlterShortVideoComment(context.Context, *AlterShortVideoCommentRequest) (*AlterShortVideoCommentResponse, error)
	// short video interest label
	GetShortVideoInterestLabelList(context.Context, *GetShortVideoInterestLabelListRequest) (*GetShortVideoInterestLabelListResponse, error)
	AlterShortVideoInterestLabel(context.Context, *AlterShortVideoInterestLabelRequest) (*AlterShortVideoInterestLabelResponse, error)
	GetFollowers(context.Context, *GetFollowersReq) (*GetFollowersResp, error)
	AlterFollower(context.Context, *AlterFollowerReq) (*AlterFollowerResp, error)
	DeleteFollowers(context.Context, *DeleteFollowersReq) (*DeleteFollowersResp, error)
	GetStatus(context.Context, *GetStatusReq) (*GetStatusResp, error)
	SetStatus(context.Context, *SetStatusReq) (*SetStatusResp, error)
	GetAllDomains(context.Context, *GetAllDomainsReq) (*GetAllDomainsResp, error)
	SaveAllDomains(context.Context, *SaveAllDomainsReq) (*SaveAllDomainsResp, error)
}

// UnimplementedAdminCMSServer should be embedded to have forward compatible implementations.
type UnimplementedAdminCMSServer struct {
}

func (UnimplementedAdminCMSServer) AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAdminCMSServer) AdminLoginV2(context.Context, *AdminLoginReq) (*AdminLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLoginV2 not implemented")
}
func (UnimplementedAdminCMSServer) GetDiscoverUrl(context.Context, *GetDiscoverUrlReq) (*GetDiscoverUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoverUrl not implemented")
}
func (UnimplementedAdminCMSServer) SaveDiscoverUrl(context.Context, *SaveDiscoverUrlReq) (*SaveDiscoverUrlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDiscoverUrl not implemented")
}
func (UnimplementedAdminCMSServer) SwitchDiscoverStatus(context.Context, *SwitchDiscoverStatusReq) (*SwitchDiscoverStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchDiscoverStatus not implemented")
}
func (UnimplementedAdminCMSServer) GetAppVersionByID(context.Context, *appversion.GetAppVersionByIDReq) (*appversion.GetAppVersionByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppVersionByID not implemented")
}
func (UnimplementedAdminCMSServer) GetLatestAppVersion(context.Context, *appversion.GetLatestAppVersionReq) (*appversion.GetLatestAppVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestAppVersion not implemented")
}
func (UnimplementedAdminCMSServer) GetAppVersions(context.Context, *appversion.GetAppVersionsReq) (*appversion.GetAppVersionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppVersions not implemented")
}
func (UnimplementedAdminCMSServer) AddAppVersion(context.Context, *appversion.AddAppVersionReq) (*appversion.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppVersion not implemented")
}
func (UnimplementedAdminCMSServer) EditAppVersion(context.Context, *appversion.EditAppVersionReq) (*appversion.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAppVersion not implemented")
}
func (UnimplementedAdminCMSServer) DeleteAppVersion(context.Context, *appversion.DeleteAppVersionReq) (*appversion.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppVersion not implemented")
}
func (UnimplementedAdminCMSServer) GetInviteCodeBaseLink(context.Context, *GetInviteCodeBaseLinkReq) (*GetInviteCodeBaseLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteCodeBaseLink not implemented")
}
func (UnimplementedAdminCMSServer) SetInviteCodeBaseLink(context.Context, *SetInviteCodeBaseLinkReq) (*GetInviteCodeBaseLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInviteCodeBaseLink not implemented")
}
func (UnimplementedAdminCMSServer) CheckInviteCode(context.Context, *CheckInviteCodeRequest) (*CheckInviteCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInviteCode not implemented")
}
func (UnimplementedAdminCMSServer) GetChannelCodeList(context.Context, *GetChannelCodeListRequest) (*GetChannelCodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelCodeList not implemented")
}
func (UnimplementedAdminCMSServer) SwitchChannelCodeState(context.Context, *SwitchChannelCodeStateRequest) (*SwitchChannelCodeStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchChannelCodeState not implemented")
}
func (UnimplementedAdminCMSServer) EditChannelCode(context.Context, *EditChannelCodeRequest) (*EditChannelCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelCode not implemented")
}
func (UnimplementedAdminCMSServer) AddChannelCode(context.Context, *AddChannelCodeRequest) (*AddChannelCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChannelCode not implemented")
}
func (UnimplementedAdminCMSServer) MultiDeleteChannelCode(context.Context, *MultiDeleteChannelCodeRequest) (*MultiDeleteChannelCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiDeleteChannelCode not implemented")
}
func (UnimplementedAdminCMSServer) SetChannelCodeLimit(context.Context, *SetChannelCodeLimitRequest) (*SetChannelCodeLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChannelCodeLimit not implemented")
}
func (UnimplementedAdminCMSServer) SetChannelCodeSwitch(context.Context, *SetChannelCodeSwitchRequest) (*SetChannelCodeSwitchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChannelCodeSwitch not implemented")
}
func (UnimplementedAdminCMSServer) SetInviteCodeSwitch(context.Context, *SetInviteCodeSwitchRequest) (*SetInviteCodeSwitchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInviteCodeSwitch not implemented")
}
func (UnimplementedAdminCMSServer) SetInviteCodeLimit(context.Context, *SetInviteCodeLimitRequest) (*SetInviteCodeLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInviteCodeLimit not implemented")
}
func (UnimplementedAdminCMSServer) MultiDeleteInviteCode(context.Context, *MultiDeleteInviteCodeRequest) (*MultiDeleteInviteCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiDeleteInviteCode not implemented")
}
func (UnimplementedAdminCMSServer) AddInviteCode(context.Context, *AddInviteCodeRequest) (*AddInviteCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInviteCode not implemented")
}
func (UnimplementedAdminCMSServer) GetInviteCodeList(context.Context, *GetInviteCodeListRequest) (*GetInviteCodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteCodeList not implemented")
}
func (UnimplementedAdminCMSServer) AddAdminUser(context.Context, *AddAdminUserReq) (*AddAdminUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdminUser not implemented")
}
func (UnimplementedAdminCMSServer) DeleteAdminUser(context.Context, *DeleteAdminUserReq) (*DeleteAdminUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdminUser not implemented")
}
func (UnimplementedAdminCMSServer) AlterAdminUser(context.Context, *AlterAdminUserRequest) (*AlterAdminUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterAdminUser not implemented")
}
func (UnimplementedAdminCMSServer) GetAdminUsers(context.Context, *GetAdminUsersReq) (*GetAdminUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminUsers not implemented")
}
func (UnimplementedAdminCMSServer) SwitchAdminUserStatus(context.Context, *SwitchAdminUserStatusReq) (*SwitchAdminUserStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchAdminUserStatus not implemented")
}
func (UnimplementedAdminCMSServer) ChangeAdminUserPassword(context.Context, *ChangeAdminUserPasswordReq) (*ChangeAdminUserPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAdminUserPassword not implemented")
}
func (UnimplementedAdminCMSServer) GetgAuthQrCode(context.Context, *GetgAuthQrCodeReq) (*GetgAuthQrCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetgAuthQrCode not implemented")
}
func (UnimplementedAdminCMSServer) AlterGAuthStatus(context.Context, *AlterGAuthStatusReq) (*AlterGAuthStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterGAuthStatus not implemented")
}
func (UnimplementedAdminCMSServer) GetAdminPermissionReq(context.Context, *AdminPermissionsReq) (*AdminPermissionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminPermissionReq not implemented")
}
func (UnimplementedAdminCMSServer) AddAdminRole(context.Context, *AddAdminRoleRequest) (*AddAdminRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdminRole not implemented")
}
func (UnimplementedAdminCMSServer) AlterAdminRole(context.Context, *AlterAdminRoleRequest) (*AlterAdminRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterAdminRole not implemented")
}
func (UnimplementedAdminCMSServer) DeleteAdminRole(context.Context, *AlterAdminRoleRequest) (*AlterAdminRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdminRole not implemented")
}
func (UnimplementedAdminCMSServer) GetAllAdminRoles(context.Context, *GetAllAdminRolesReq) (*GetAllAdminRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAdminRoles not implemented")
}
func (UnimplementedAdminCMSServer) SearchAminRoles(context.Context, *SearchAminRolesRequest) (*GetAllAdminRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAminRoles not implemented")
}
func (UnimplementedAdminCMSServer) AddApiAdminRole(context.Context, *AddApiAdminRoleRequest) (*AddApiAdminRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApiAdminRole not implemented")
}
func (UnimplementedAdminCMSServer) AlterApiAdminRole(context.Context, *AlterApiAdminRoleRequest) (*AlterApiAdminRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterApiAdminRole not implemented")
}
func (UnimplementedAdminCMSServer) DeleteApiAdminRole(context.Context, *AlterApiAdminRoleRequest) (*AlterApiAdminRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiAdminRole not implemented")
}
func (UnimplementedAdminCMSServer) GetAllApiAdminRoles(context.Context, *GetAllApiAdminRolesReq) (*GetAllApiAdminRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllApiAdminRoles not implemented")
}
func (UnimplementedAdminCMSServer) SearchApiAdminRoles(context.Context, *SearchApiAdminRoleRequest) (*GetAllApiAdminRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApiAdminRoles not implemented")
}
func (UnimplementedAdminCMSServer) AddPageAdminRole(context.Context, *AddPageAdminRoleRequest) (*AddPageAdminRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPageAdminRole not implemented")
}
func (UnimplementedAdminCMSServer) AlterPageAdminRole(context.Context, *AlterPageAdminRoleRequest) (*AlterPageAdminRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterPageAdminRole not implemented")
}
func (UnimplementedAdminCMSServer) DeletePageAdminRole(context.Context, *AlterPageAdminRoleRequest) (*AlterPageAdminRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePageAdminRole not implemented")
}
func (UnimplementedAdminCMSServer) GetAllPageAdminRoles(context.Context, *GetAllPageAdminRolesReq) (*GetAllPageAdminRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPageAdminRoles not implemented")
}
func (UnimplementedAdminCMSServer) SearchPageAdminRoles(context.Context, *SearchPageAdminRolesRequest) (*GetAllPageAdminRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPageAdminRoles not implemented")
}
func (UnimplementedAdminCMSServer) AddAdminAction(context.Context, *AddAdminActionRequest) (*AddAdminActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdminAction not implemented")
}
func (UnimplementedAdminCMSServer) AlterAdminAction(context.Context, *AlterAdminActionRequest) (*AlterAdminActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterAdminAction not implemented")
}
func (UnimplementedAdminCMSServer) DeleteAdminAction(context.Context, *AlterAdminActionRequest) (*AlterAdminActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdminAction not implemented")
}
func (UnimplementedAdminCMSServer) GetAllAdminAction(context.Context, *GetAllAdminActionReq) (*GetAllAdminActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAdminAction not implemented")
}
func (UnimplementedAdminCMSServer) SearchAdminUsers(context.Context, *SearchAdminUsersRequest) (*GetAdminUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAdminUsers not implemented")
}
func (UnimplementedAdminCMSServer) OperationLog(context.Context, *OperationLogRequest) (*OperationLogRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperationLog not implemented")
}
func (UnimplementedAdminCMSServer) SearchOperationLogs(context.Context, *SearchOperationLogsRequest) (*SearchOperationLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOperationLogs not implemented")
}
func (UnimplementedAdminCMSServer) GetInterests(context.Context, *GetInterestsReq) (*GetInterestsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterests not implemented")
}
func (UnimplementedAdminCMSServer) DeleteInterests(context.Context, *DeleteInterestsReq) (*DeleteInterestsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterests not implemented")
}
func (UnimplementedAdminCMSServer) AlterInterest(context.Context, *AlterInterestReq) (*AlterInterestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterInterest not implemented")
}
func (UnimplementedAdminCMSServer) ChangeInterestStatus(context.Context, *ChangeInterestStatusReq) (*ChangeInterestStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeInterestStatus not implemented")
}
func (UnimplementedAdminCMSServer) AddInterests(context.Context, *AddInterestsReq) (*AddInterestsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterests not implemented")
}
func (UnimplementedAdminCMSServer) GetUserInterests(context.Context, *GetUserInterestsReq) (*GetUserInterestsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInterests not implemented")
}
func (UnimplementedAdminCMSServer) AlterUserInterests(context.Context, *AlterUserInterestsReq) (*AlterUserInterestsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterUserInterests not implemented")
}
func (UnimplementedAdminCMSServer) DeleteUserInterests(context.Context, *DeleteUserInterestsReq) (*DeleteUserInterestsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserInterests not implemented")
}
func (UnimplementedAdminCMSServer) GetGroupInterests(context.Context, *GetGroupInterestsReq) (*GetGroupInterestsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInterests not implemented")
}
func (UnimplementedAdminCMSServer) AlterGroupInterests(context.Context, *AlterGroupInterestsReq) (*AlterGroupInterestsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterGroupInterests not implemented")
}
func (UnimplementedAdminCMSServer) GetMePageURL(context.Context, *GetMePageURLReq) (*GetMePageURLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMePageURL not implemented")
}
func (UnimplementedAdminCMSServer) SaveMePageURL(context.Context, *SaveMePageURLReq) (*SaveMePageURLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMePageURL not implemented")
}
func (UnimplementedAdminCMSServer) SwitchMePageURL(context.Context, *SwitchMePageURLReq) (*SwitchMePageURLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchMePageURL not implemented")
}
func (UnimplementedAdminCMSServer) GetMePageURLs(context.Context, *GetMePageURLsReq) (*GetMePageURLsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMePageURLs not implemented")
}
func (UnimplementedAdminCMSServer) ManagementShortVideo(context.Context, *ManagementShortVideoRequest) (*ManagementShortVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagementShortVideo not implemented")
}
func (UnimplementedAdminCMSServer) DeleteShortVideo(context.Context, *DeleteShortVideoRequest) (*DeleteShortVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortVideo not implemented")
}
func (UnimplementedAdminCMSServer) AlterShortVideo(context.Context, *AlterShortVideoRequest) (*AlterShortVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterShortVideo not implemented")
}
func (UnimplementedAdminCMSServer) GetShortVideoLikeList(context.Context, *GetShortVideoLikeListRequest) (*GetShortVideoLikeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortVideoLikeList not implemented")
}
func (UnimplementedAdminCMSServer) DeleteShortVideoLike(context.Context, *DeleteShortVideoLikeRequest) (*DeleteShortVideoLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortVideoLike not implemented")
}
func (UnimplementedAdminCMSServer) GetShortVideoCommentReplies(context.Context, *GetShortVideoCommentRepliesReq) (*GetShortVideoCommentRepliesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortVideoCommentReplies not implemented")
}
func (UnimplementedAdminCMSServer) AlterReply(context.Context, *AlterReplyReq) (*AlterReplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterReply not implemented")
}
func (UnimplementedAdminCMSServer) DeleteReplies(context.Context, *DeleteRepliesReq) (*DeleteRepliesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReplies not implemented")
}
func (UnimplementedAdminCMSServer) GetShortVideoCommentLikes(context.Context, *GetShortVideoCommentLikesReq) (*GetShortVideoCommentLikesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortVideoCommentLikes not implemented")
}
func (UnimplementedAdminCMSServer) AlterLike(context.Context, *AlterLikeReq) (*AlterLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterLike not implemented")
}
func (UnimplementedAdminCMSServer) DeleteLikes(context.Context, *DeleteLikesReq) (*DeleteLikesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLikes not implemented")
}
func (UnimplementedAdminCMSServer) GetShortVideoCommentList(context.Context, *GetShortVideoCommentListRequest) (*GetShortVideoCommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortVideoCommentList not implemented")
}
func (UnimplementedAdminCMSServer) DeleteShortVideoComment(context.Context, *DeleteShortVideoCommentRequest) (*DeleteShortVideoCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortVideoComment not implemented")
}
func (UnimplementedAdminCMSServer) AlterShortVideoComment(context.Context, *AlterShortVideoCommentRequest) (*AlterShortVideoCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterShortVideoComment not implemented")
}
func (UnimplementedAdminCMSServer) GetShortVideoInterestLabelList(context.Context, *GetShortVideoInterestLabelListRequest) (*GetShortVideoInterestLabelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortVideoInterestLabelList not implemented")
}
func (UnimplementedAdminCMSServer) AlterShortVideoInterestLabel(context.Context, *AlterShortVideoInterestLabelRequest) (*AlterShortVideoInterestLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterShortVideoInterestLabel not implemented")
}
func (UnimplementedAdminCMSServer) GetFollowers(context.Context, *GetFollowersReq) (*GetFollowersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedAdminCMSServer) AlterFollower(context.Context, *AlterFollowerReq) (*AlterFollowerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterFollower not implemented")
}
func (UnimplementedAdminCMSServer) DeleteFollowers(context.Context, *DeleteFollowersReq) (*DeleteFollowersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollowers not implemented")
}
func (UnimplementedAdminCMSServer) GetStatus(context.Context, *GetStatusReq) (*GetStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedAdminCMSServer) SetStatus(context.Context, *SetStatusReq) (*SetStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (UnimplementedAdminCMSServer) GetAllDomains(context.Context, *GetAllDomainsReq) (*GetAllDomainsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDomains not implemented")
}
func (UnimplementedAdminCMSServer) SaveAllDomains(context.Context, *SaveAllDomainsReq) (*SaveAllDomainsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAllDomains not implemented")
}

// UnsafeAdminCMSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminCMSServer will
// result in compilation errors.
type UnsafeAdminCMSServer interface {
	mustEmbedUnimplementedAdminCMSServer()
}

func RegisterAdminCMSServer(s grpc.ServiceRegistrar, srv AdminCMSServer) {
	s.RegisterService(&AdminCMS_ServiceDesc, srv)
}

func _AdminCMS_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AdminLogin(ctx, req.(*AdminLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AdminLoginV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AdminLoginV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AdminLoginV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AdminLoginV2(ctx, req.(*AdminLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetDiscoverUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscoverUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetDiscoverUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetDiscoverUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetDiscoverUrl(ctx, req.(*GetDiscoverUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SaveDiscoverUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDiscoverUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SaveDiscoverUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SaveDiscoverUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SaveDiscoverUrl(ctx, req.(*SaveDiscoverUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SwitchDiscoverStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchDiscoverStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SwitchDiscoverStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SwitchDiscoverStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SwitchDiscoverStatus(ctx, req.(*SwitchDiscoverStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetAppVersionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appversion.GetAppVersionByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetAppVersionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetAppVersionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetAppVersionByID(ctx, req.(*appversion.GetAppVersionByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetLatestAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appversion.GetLatestAppVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetLatestAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetLatestAppVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetLatestAppVersion(ctx, req.(*appversion.GetLatestAppVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetAppVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appversion.GetAppVersionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetAppVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetAppVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetAppVersions(ctx, req.(*appversion.GetAppVersionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AddAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appversion.AddAppVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AddAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AddAppVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AddAppVersion(ctx, req.(*appversion.AddAppVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_EditAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appversion.EditAppVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).EditAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_EditAppVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).EditAppVersion(ctx, req.(*appversion.EditAppVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_DeleteAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appversion.DeleteAppVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).DeleteAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_DeleteAppVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).DeleteAppVersion(ctx, req.(*appversion.DeleteAppVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetInviteCodeBaseLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteCodeBaseLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetInviteCodeBaseLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetInviteCodeBaseLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetInviteCodeBaseLink(ctx, req.(*GetInviteCodeBaseLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SetInviteCodeBaseLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInviteCodeBaseLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SetInviteCodeBaseLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SetInviteCodeBaseLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SetInviteCodeBaseLink(ctx, req.(*SetInviteCodeBaseLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_CheckInviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInviteCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).CheckInviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_CheckInviteCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).CheckInviteCode(ctx, req.(*CheckInviteCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetChannelCodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelCodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetChannelCodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetChannelCodeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetChannelCodeList(ctx, req.(*GetChannelCodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SwitchChannelCodeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchChannelCodeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SwitchChannelCodeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SwitchChannelCodeState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SwitchChannelCodeState(ctx, req.(*SwitchChannelCodeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_EditChannelCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChannelCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).EditChannelCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_EditChannelCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).EditChannelCode(ctx, req.(*EditChannelCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AddChannelCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChannelCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AddChannelCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AddChannelCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AddChannelCode(ctx, req.(*AddChannelCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_MultiDeleteChannelCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiDeleteChannelCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).MultiDeleteChannelCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_MultiDeleteChannelCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).MultiDeleteChannelCode(ctx, req.(*MultiDeleteChannelCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SetChannelCodeLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelCodeLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SetChannelCodeLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SetChannelCodeLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SetChannelCodeLimit(ctx, req.(*SetChannelCodeLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SetChannelCodeSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelCodeSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SetChannelCodeSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SetChannelCodeSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SetChannelCodeSwitch(ctx, req.(*SetChannelCodeSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SetInviteCodeSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInviteCodeSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SetInviteCodeSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SetInviteCodeSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SetInviteCodeSwitch(ctx, req.(*SetInviteCodeSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SetInviteCodeLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInviteCodeLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SetInviteCodeLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SetInviteCodeLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SetInviteCodeLimit(ctx, req.(*SetInviteCodeLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_MultiDeleteInviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiDeleteInviteCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).MultiDeleteInviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_MultiDeleteInviteCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).MultiDeleteInviteCode(ctx, req.(*MultiDeleteInviteCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AddInviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInviteCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AddInviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AddInviteCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AddInviteCode(ctx, req.(*AddInviteCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetInviteCodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteCodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetInviteCodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetInviteCodeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetInviteCodeList(ctx, req.(*GetInviteCodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AddAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdminUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AddAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AddAdminUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AddAdminUser(ctx, req.(*AddAdminUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_DeleteAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).DeleteAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_DeleteAdminUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).DeleteAdminUser(ctx, req.(*DeleteAdminUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterAdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterAdminUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterAdminUser(ctx, req.(*AlterAdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetAdminUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetAdminUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetAdminUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetAdminUsers(ctx, req.(*GetAdminUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SwitchAdminUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchAdminUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SwitchAdminUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SwitchAdminUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SwitchAdminUserStatus(ctx, req.(*SwitchAdminUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_ChangeAdminUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAdminUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).ChangeAdminUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_ChangeAdminUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).ChangeAdminUserPassword(ctx, req.(*ChangeAdminUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetgAuthQrCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetgAuthQrCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetgAuthQrCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetgAuthQrCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetgAuthQrCode(ctx, req.(*GetgAuthQrCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterGAuthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterGAuthStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterGAuthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterGAuthStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterGAuthStatus(ctx, req.(*AlterGAuthStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetAdminPermissionReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminPermissionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetAdminPermissionReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetAdminPermissionReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetAdminPermissionReq(ctx, req.(*AdminPermissionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AddAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AddAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AddAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AddAdminRole(ctx, req.(*AddAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterAdminRole(ctx, req.(*AlterAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_DeleteAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).DeleteAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_DeleteAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).DeleteAdminRole(ctx, req.(*AlterAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetAllAdminRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAdminRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetAllAdminRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetAllAdminRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetAllAdminRoles(ctx, req.(*GetAllAdminRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SearchAminRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAminRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SearchAminRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SearchAminRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SearchAminRoles(ctx, req.(*SearchAminRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AddApiAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddApiAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AddApiAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AddApiAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AddApiAdminRole(ctx, req.(*AddApiAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterApiAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterApiAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterApiAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterApiAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterApiAdminRole(ctx, req.(*AlterApiAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_DeleteApiAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterApiAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).DeleteApiAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_DeleteApiAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).DeleteApiAdminRole(ctx, req.(*AlterApiAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetAllApiAdminRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllApiAdminRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetAllApiAdminRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetAllApiAdminRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetAllApiAdminRoles(ctx, req.(*GetAllApiAdminRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SearchApiAdminRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchApiAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SearchApiAdminRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SearchApiAdminRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SearchApiAdminRoles(ctx, req.(*SearchApiAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AddPageAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPageAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AddPageAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AddPageAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AddPageAdminRole(ctx, req.(*AddPageAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterPageAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterPageAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterPageAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterPageAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterPageAdminRole(ctx, req.(*AlterPageAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_DeletePageAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterPageAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).DeletePageAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_DeletePageAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).DeletePageAdminRole(ctx, req.(*AlterPageAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetAllPageAdminRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPageAdminRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetAllPageAdminRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetAllPageAdminRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetAllPageAdminRoles(ctx, req.(*GetAllPageAdminRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SearchPageAdminRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPageAdminRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SearchPageAdminRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SearchPageAdminRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SearchPageAdminRoles(ctx, req.(*SearchPageAdminRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AddAdminAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdminActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AddAdminAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AddAdminAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AddAdminAction(ctx, req.(*AddAdminActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterAdminAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterAdminActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterAdminAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterAdminAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterAdminAction(ctx, req.(*AlterAdminActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_DeleteAdminAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterAdminActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).DeleteAdminAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_DeleteAdminAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).DeleteAdminAction(ctx, req.(*AlterAdminActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetAllAdminAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAdminActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetAllAdminAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetAllAdminAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetAllAdminAction(ctx, req.(*GetAllAdminActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SearchAdminUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAdminUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SearchAdminUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SearchAdminUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SearchAdminUsers(ctx, req.(*SearchAdminUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_OperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).OperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_OperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).OperationLog(ctx, req.(*OperationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SearchOperationLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOperationLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SearchOperationLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SearchOperationLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SearchOperationLogs(ctx, req.(*SearchOperationLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterestsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetInterests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetInterests(ctx, req.(*GetInterestsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_DeleteInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterestsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).DeleteInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_DeleteInterests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).DeleteInterests(ctx, req.(*DeleteInterestsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterInterestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterInterest(ctx, req.(*AlterInterestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_ChangeInterestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeInterestStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).ChangeInterestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_ChangeInterestStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).ChangeInterestStatus(ctx, req.(*ChangeInterestStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AddInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInterestsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AddInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AddInterests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AddInterests(ctx, req.(*AddInterestsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetUserInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInterestsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetUserInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetUserInterests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetUserInterests(ctx, req.(*GetUserInterestsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterUserInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterUserInterestsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterUserInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterUserInterests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterUserInterests(ctx, req.(*AlterUserInterestsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_DeleteUserInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserInterestsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).DeleteUserInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_DeleteUserInterests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).DeleteUserInterests(ctx, req.(*DeleteUserInterestsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetGroupInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupInterestsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetGroupInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetGroupInterests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetGroupInterests(ctx, req.(*GetGroupInterestsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterGroupInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterGroupInterestsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterGroupInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterGroupInterests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterGroupInterests(ctx, req.(*AlterGroupInterestsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetMePageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMePageURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetMePageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetMePageURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetMePageURL(ctx, req.(*GetMePageURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SaveMePageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMePageURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SaveMePageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SaveMePageURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SaveMePageURL(ctx, req.(*SaveMePageURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SwitchMePageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchMePageURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SwitchMePageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SwitchMePageURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SwitchMePageURL(ctx, req.(*SwitchMePageURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetMePageURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMePageURLsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetMePageURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetMePageURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetMePageURLs(ctx, req.(*GetMePageURLsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_ManagementShortVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagementShortVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).ManagementShortVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_ManagementShortVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).ManagementShortVideo(ctx, req.(*ManagementShortVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_DeleteShortVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).DeleteShortVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_DeleteShortVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).DeleteShortVideo(ctx, req.(*DeleteShortVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterShortVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterShortVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterShortVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterShortVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterShortVideo(ctx, req.(*AlterShortVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetShortVideoLikeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortVideoLikeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetShortVideoLikeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetShortVideoLikeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetShortVideoLikeList(ctx, req.(*GetShortVideoLikeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_DeleteShortVideoLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortVideoLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).DeleteShortVideoLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_DeleteShortVideoLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).DeleteShortVideoLike(ctx, req.(*DeleteShortVideoLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetShortVideoCommentReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortVideoCommentRepliesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetShortVideoCommentReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetShortVideoCommentReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetShortVideoCommentReplies(ctx, req.(*GetShortVideoCommentRepliesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterReply(ctx, req.(*AlterReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_DeleteReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepliesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).DeleteReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_DeleteReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).DeleteReplies(ctx, req.(*DeleteRepliesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetShortVideoCommentLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortVideoCommentLikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetShortVideoCommentLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetShortVideoCommentLikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetShortVideoCommentLikes(ctx, req.(*GetShortVideoCommentLikesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterLike(ctx, req.(*AlterLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_DeleteLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).DeleteLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_DeleteLikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).DeleteLikes(ctx, req.(*DeleteLikesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetShortVideoCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortVideoCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetShortVideoCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetShortVideoCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetShortVideoCommentList(ctx, req.(*GetShortVideoCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_DeleteShortVideoComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortVideoCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).DeleteShortVideoComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_DeleteShortVideoComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).DeleteShortVideoComment(ctx, req.(*DeleteShortVideoCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterShortVideoComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterShortVideoCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterShortVideoComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterShortVideoComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterShortVideoComment(ctx, req.(*AlterShortVideoCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetShortVideoInterestLabelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortVideoInterestLabelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetShortVideoInterestLabelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetShortVideoInterestLabelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetShortVideoInterestLabelList(ctx, req.(*GetShortVideoInterestLabelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterShortVideoInterestLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterShortVideoInterestLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterShortVideoInterestLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterShortVideoInterestLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterShortVideoInterestLabel(ctx, req.(*AlterShortVideoInterestLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetFollowers(ctx, req.(*GetFollowersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_AlterFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterFollowerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).AlterFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_AlterFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).AlterFollower(ctx, req.(*AlterFollowerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_DeleteFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFollowersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).DeleteFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_DeleteFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).DeleteFollowers(ctx, req.(*DeleteFollowersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetStatus(ctx, req.(*GetStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SetStatus(ctx, req.(*SetStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_GetAllDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDomainsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).GetAllDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_GetAllDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).GetAllDomains(ctx, req.(*GetAllDomainsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminCMS_SaveAllDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAllDomainsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminCMSServer).SaveAllDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminCMS_SaveAllDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminCMSServer).SaveAllDomains(ctx, req.(*SaveAllDomainsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminCMS_ServiceDesc is the grpc.ServiceDesc for AdminCMS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminCMS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_cms.adminCMS",
	HandlerType: (*AdminCMSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminLogin",
			Handler:    _AdminCMS_AdminLogin_Handler,
		},
		{
			MethodName: "AdminLoginV2",
			Handler:    _AdminCMS_AdminLoginV2_Handler,
		},
		{
			MethodName: "GetDiscoverUrl",
			Handler:    _AdminCMS_GetDiscoverUrl_Handler,
		},
		{
			MethodName: "SaveDiscoverUrl",
			Handler:    _AdminCMS_SaveDiscoverUrl_Handler,
		},
		{
			MethodName: "SwitchDiscoverStatus",
			Handler:    _AdminCMS_SwitchDiscoverStatus_Handler,
		},
		{
			MethodName: "GetAppVersionByID",
			Handler:    _AdminCMS_GetAppVersionByID_Handler,
		},
		{
			MethodName: "GetLatestAppVersion",
			Handler:    _AdminCMS_GetLatestAppVersion_Handler,
		},
		{
			MethodName: "GetAppVersions",
			Handler:    _AdminCMS_GetAppVersions_Handler,
		},
		{
			MethodName: "AddAppVersion",
			Handler:    _AdminCMS_AddAppVersion_Handler,
		},
		{
			MethodName: "EditAppVersion",
			Handler:    _AdminCMS_EditAppVersion_Handler,
		},
		{
			MethodName: "DeleteAppVersion",
			Handler:    _AdminCMS_DeleteAppVersion_Handler,
		},
		{
			MethodName: "GetInviteCodeBaseLink",
			Handler:    _AdminCMS_GetInviteCodeBaseLink_Handler,
		},
		{
			MethodName: "SetInviteCodeBaseLink",
			Handler:    _AdminCMS_SetInviteCodeBaseLink_Handler,
		},
		{
			MethodName: "CheckInviteCode",
			Handler:    _AdminCMS_CheckInviteCode_Handler,
		},
		{
			MethodName: "GetChannelCodeList",
			Handler:    _AdminCMS_GetChannelCodeList_Handler,
		},
		{
			MethodName: "SwitchChannelCodeState",
			Handler:    _AdminCMS_SwitchChannelCodeState_Handler,
		},
		{
			MethodName: "EditChannelCode",
			Handler:    _AdminCMS_EditChannelCode_Handler,
		},
		{
			MethodName: "AddChannelCode",
			Handler:    _AdminCMS_AddChannelCode_Handler,
		},
		{
			MethodName: "MultiDeleteChannelCode",
			Handler:    _AdminCMS_MultiDeleteChannelCode_Handler,
		},
		{
			MethodName: "SetChannelCodeLimit",
			Handler:    _AdminCMS_SetChannelCodeLimit_Handler,
		},
		{
			MethodName: "SetChannelCodeSwitch",
			Handler:    _AdminCMS_SetChannelCodeSwitch_Handler,
		},
		{
			MethodName: "SetInviteCodeSwitch",
			Handler:    _AdminCMS_SetInviteCodeSwitch_Handler,
		},
		{
			MethodName: "SetInviteCodeLimit",
			Handler:    _AdminCMS_SetInviteCodeLimit_Handler,
		},
		{
			MethodName: "MultiDeleteInviteCode",
			Handler:    _AdminCMS_MultiDeleteInviteCode_Handler,
		},
		{
			MethodName: "AddInviteCode",
			Handler:    _AdminCMS_AddInviteCode_Handler,
		},
		{
			MethodName: "GetInviteCodeList",
			Handler:    _AdminCMS_GetInviteCodeList_Handler,
		},
		{
			MethodName: "AddAdminUser",
			Handler:    _AdminCMS_AddAdminUser_Handler,
		},
		{
			MethodName: "DeleteAdminUser",
			Handler:    _AdminCMS_DeleteAdminUser_Handler,
		},
		{
			MethodName: "AlterAdminUser",
			Handler:    _AdminCMS_AlterAdminUser_Handler,
		},
		{
			MethodName: "GetAdminUsers",
			Handler:    _AdminCMS_GetAdminUsers_Handler,
		},
		{
			MethodName: "SwitchAdminUserStatus",
			Handler:    _AdminCMS_SwitchAdminUserStatus_Handler,
		},
		{
			MethodName: "ChangeAdminUserPassword",
			Handler:    _AdminCMS_ChangeAdminUserPassword_Handler,
		},
		{
			MethodName: "GetgAuthQrCode",
			Handler:    _AdminCMS_GetgAuthQrCode_Handler,
		},
		{
			MethodName: "AlterGAuthStatus",
			Handler:    _AdminCMS_AlterGAuthStatus_Handler,
		},
		{
			MethodName: "GetAdminPermissionReq",
			Handler:    _AdminCMS_GetAdminPermissionReq_Handler,
		},
		{
			MethodName: "AddAdminRole",
			Handler:    _AdminCMS_AddAdminRole_Handler,
		},
		{
			MethodName: "AlterAdminRole",
			Handler:    _AdminCMS_AlterAdminRole_Handler,
		},
		{
			MethodName: "DeleteAdminRole",
			Handler:    _AdminCMS_DeleteAdminRole_Handler,
		},
		{
			MethodName: "GetAllAdminRoles",
			Handler:    _AdminCMS_GetAllAdminRoles_Handler,
		},
		{
			MethodName: "SearchAminRoles",
			Handler:    _AdminCMS_SearchAminRoles_Handler,
		},
		{
			MethodName: "AddApiAdminRole",
			Handler:    _AdminCMS_AddApiAdminRole_Handler,
		},
		{
			MethodName: "AlterApiAdminRole",
			Handler:    _AdminCMS_AlterApiAdminRole_Handler,
		},
		{
			MethodName: "DeleteApiAdminRole",
			Handler:    _AdminCMS_DeleteApiAdminRole_Handler,
		},
		{
			MethodName: "GetAllApiAdminRoles",
			Handler:    _AdminCMS_GetAllApiAdminRoles_Handler,
		},
		{
			MethodName: "SearchApiAdminRoles",
			Handler:    _AdminCMS_SearchApiAdminRoles_Handler,
		},
		{
			MethodName: "AddPageAdminRole",
			Handler:    _AdminCMS_AddPageAdminRole_Handler,
		},
		{
			MethodName: "AlterPageAdminRole",
			Handler:    _AdminCMS_AlterPageAdminRole_Handler,
		},
		{
			MethodName: "DeletePageAdminRole",
			Handler:    _AdminCMS_DeletePageAdminRole_Handler,
		},
		{
			MethodName: "GetAllPageAdminRoles",
			Handler:    _AdminCMS_GetAllPageAdminRoles_Handler,
		},
		{
			MethodName: "SearchPageAdminRoles",
			Handler:    _AdminCMS_SearchPageAdminRoles_Handler,
		},
		{
			MethodName: "AddAdminAction",
			Handler:    _AdminCMS_AddAdminAction_Handler,
		},
		{
			MethodName: "AlterAdminAction",
			Handler:    _AdminCMS_AlterAdminAction_Handler,
		},
		{
			MethodName: "DeleteAdminAction",
			Handler:    _AdminCMS_DeleteAdminAction_Handler,
		},
		{
			MethodName: "GetAllAdminAction",
			Handler:    _AdminCMS_GetAllAdminAction_Handler,
		},
		{
			MethodName: "SearchAdminUsers",
			Handler:    _AdminCMS_SearchAdminUsers_Handler,
		},
		{
			MethodName: "OperationLog",
			Handler:    _AdminCMS_OperationLog_Handler,
		},
		{
			MethodName: "SearchOperationLogs",
			Handler:    _AdminCMS_SearchOperationLogs_Handler,
		},
		{
			MethodName: "GetInterests",
			Handler:    _AdminCMS_GetInterests_Handler,
		},
		{
			MethodName: "DeleteInterests",
			Handler:    _AdminCMS_DeleteInterests_Handler,
		},
		{
			MethodName: "AlterInterest",
			Handler:    _AdminCMS_AlterInterest_Handler,
		},
		{
			MethodName: "ChangeInterestStatus",
			Handler:    _AdminCMS_ChangeInterestStatus_Handler,
		},
		{
			MethodName: "AddInterests",
			Handler:    _AdminCMS_AddInterests_Handler,
		},
		{
			MethodName: "GetUserInterests",
			Handler:    _AdminCMS_GetUserInterests_Handler,
		},
		{
			MethodName: "AlterUserInterests",
			Handler:    _AdminCMS_AlterUserInterests_Handler,
		},
		{
			MethodName: "DeleteUserInterests",
			Handler:    _AdminCMS_DeleteUserInterests_Handler,
		},
		{
			MethodName: "GetGroupInterests",
			Handler:    _AdminCMS_GetGroupInterests_Handler,
		},
		{
			MethodName: "AlterGroupInterests",
			Handler:    _AdminCMS_AlterGroupInterests_Handler,
		},
		{
			MethodName: "GetMePageURL",
			Handler:    _AdminCMS_GetMePageURL_Handler,
		},
		{
			MethodName: "SaveMePageURL",
			Handler:    _AdminCMS_SaveMePageURL_Handler,
		},
		{
			MethodName: "SwitchMePageURL",
			Handler:    _AdminCMS_SwitchMePageURL_Handler,
		},
		{
			MethodName: "GetMePageURLs",
			Handler:    _AdminCMS_GetMePageURLs_Handler,
		},
		{
			MethodName: "ManagementShortVideo",
			Handler:    _AdminCMS_ManagementShortVideo_Handler,
		},
		{
			MethodName: "DeleteShortVideo",
			Handler:    _AdminCMS_DeleteShortVideo_Handler,
		},
		{
			MethodName: "AlterShortVideo",
			Handler:    _AdminCMS_AlterShortVideo_Handler,
		},
		{
			MethodName: "GetShortVideoLikeList",
			Handler:    _AdminCMS_GetShortVideoLikeList_Handler,
		},
		{
			MethodName: "DeleteShortVideoLike",
			Handler:    _AdminCMS_DeleteShortVideoLike_Handler,
		},
		{
			MethodName: "GetShortVideoCommentReplies",
			Handler:    _AdminCMS_GetShortVideoCommentReplies_Handler,
		},
		{
			MethodName: "AlterReply",
			Handler:    _AdminCMS_AlterReply_Handler,
		},
		{
			MethodName: "DeleteReplies",
			Handler:    _AdminCMS_DeleteReplies_Handler,
		},
		{
			MethodName: "GetShortVideoCommentLikes",
			Handler:    _AdminCMS_GetShortVideoCommentLikes_Handler,
		},
		{
			MethodName: "AlterLike",
			Handler:    _AdminCMS_AlterLike_Handler,
		},
		{
			MethodName: "DeleteLikes",
			Handler:    _AdminCMS_DeleteLikes_Handler,
		},
		{
			MethodName: "GetShortVideoCommentList",
			Handler:    _AdminCMS_GetShortVideoCommentList_Handler,
		},
		{
			MethodName: "DeleteShortVideoComment",
			Handler:    _AdminCMS_DeleteShortVideoComment_Handler,
		},
		{
			MethodName: "AlterShortVideoComment",
			Handler:    _AdminCMS_AlterShortVideoComment_Handler,
		},
		{
			MethodName: "GetShortVideoInterestLabelList",
			Handler:    _AdminCMS_GetShortVideoInterestLabelList_Handler,
		},
		{
			MethodName: "AlterShortVideoInterestLabel",
			Handler:    _AdminCMS_AlterShortVideoInterestLabel_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _AdminCMS_GetFollowers_Handler,
		},
		{
			MethodName: "AlterFollower",
			Handler:    _AdminCMS_AlterFollower_Handler,
		},
		{
			MethodName: "DeleteFollowers",
			Handler:    _AdminCMS_DeleteFollowers_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _AdminCMS_GetStatus_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _AdminCMS_SetStatus_Handler,
		},
		{
			MethodName: "GetAllDomains",
			Handler:    _AdminCMS_GetAllDomains_Handler,
		},
		{
			MethodName: "SaveAllDomains",
			Handler:    _AdminCMS_SaveAllDomains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_cms/admin_cms.proto",
}
