// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: local_database/local_database.proto

package local_database

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocalDataBaseClient is the client API for LocalDataBase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalDataBaseClient interface {
	SyncData(ctx context.Context, in *SyncDataReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type localDataBaseClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalDataBaseClient(cc grpc.ClientConnInterface) LocalDataBaseClient {
	return &localDataBaseClient{cc}
}

func (c *localDataBaseClient) SyncData(ctx context.Context, in *SyncDataReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/local_database.LocalDataBase/SyncData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalDataBaseServer is the server API for LocalDataBase service.
// All implementations should embed UnimplementedLocalDataBaseServer
// for forward compatibility
type LocalDataBaseServer interface {
	SyncData(context.Context, *SyncDataReq) (*CommonResp, error)
}

// UnimplementedLocalDataBaseServer should be embedded to have forward compatible implementations.
type UnimplementedLocalDataBaseServer struct {
}

func (UnimplementedLocalDataBaseServer) SyncData(context.Context, *SyncDataReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncData not implemented")
}

// UnsafeLocalDataBaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalDataBaseServer will
// result in compilation errors.
type UnsafeLocalDataBaseServer interface {
	mustEmbedUnimplementedLocalDataBaseServer()
}

func RegisterLocalDataBaseServer(s grpc.ServiceRegistrar, srv LocalDataBaseServer) {
	s.RegisterService(&LocalDataBase_ServiceDesc, srv)
}

func _LocalDataBase_SyncData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalDataBaseServer).SyncData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local_database.LocalDataBase/SyncData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalDataBaseServer).SyncData(ctx, req.(*SyncDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalDataBase_ServiceDesc is the grpc.ServiceDesc for LocalDataBase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalDataBase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "local_database.LocalDataBase",
	HandlerType: (*LocalDataBaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncData",
			Handler:    _LocalDataBase_SyncData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "local_database/local_database.proto",
}
